{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0},{"_id":"source/images/write-a-todo-5.png","path":"images/write-a-todo-5.png","modified":0},{"_id":"source/images/write-a-todo-4.png","path":"images/write-a-todo-4.png","modified":0},{"_id":"source/images/write-a-todo-3.png","path":"images/write-a-todo-3.png","modified":0},{"_id":"source/images/write-a-todo-2.png","path":"images/write-a-todo-2.png","modified":0},{"_id":"source/images/write-a-todo-1.png","path":"images/write-a-todo-1.png","modified":0},{"_id":"source/images/cnzz.png","path":"images/cnzz.png","modified":0},{"_id":"source/images/article-review-insight-3.png","path":"images/article-review-insight-3.png","modified":0},{"_id":"source/images/article-review-insight-2.png","path":"images/article-review-insight-2.png","modified":0},{"_id":"source/images/article-review-insight-1.png","path":"images/article-review-insight-1.png","modified":0},{"_id":"source/images/angular-markdown-note.gif","path":"images/angular-markdown-note.gif","modified":0},{"_id":"source/images/angluar-markdown-note-3.png","path":"images/angluar-markdown-note-3.png","modified":0},{"_id":"source/images/angluar-markdown-note-2.png","path":"images/angluar-markdown-note-2.png","modified":0},{"_id":"source/images/angluar-markdown-note-1.png","path":"images/angluar-markdown-note-1.png","modified":0}],"Cache":[{"_id":"source/_posts/angular/angular-collect.md","shasum":"09d60e7c3cbd7d16f60fac4045cd1e7fddb1dde6","modified":1459759668340},{"_id":"source/_posts/angular/angular-lazyload.md","shasum":"88ea08b85f3694b6ed51b563d36846fc9e00a2ea","modified":1456325279701},{"_id":"source/_posts/angular/angular-markdown-note.md","shasum":"f51a2ec82342cf1218357f759f1c9c7bdeb7cfd9","modified":1462546720633},{"_id":"source/_posts/essays/article-review-insight.md","shasum":"f0924d0232d42e0022e66e12efa1433a3625de3e","modified":1462547209253},{"_id":"source/_posts/essays/darktime-reading-note.md","shasum":"ee1ed28a80d45c69ee817723f60ee278e5e2c3ce","modified":1462547141508},{"_id":"source/_posts/angular/angular-markdown.md","shasum":"ffaea70f82177340d88787c9fab594f09174a157","modified":1462547236458},{"_id":"source/_posts/essays/write.md","shasum":"59a961b3204413f2334ca84222cbcadd883edccf","modified":1456062254952},{"_id":"source/_posts/essays/essays-mechanical-keyboard.md","shasum":"af3fd26fd235ee71d7f8c0c54dcaa0989047b064","modified":1458579354480},{"_id":"source/_posts/essays/leave-office.md","shasum":"36ba6fee44360da2b4c1893818ae3e0ea4237108","modified":1462547261545},{"_id":"source/_posts/essays/reading-list-2016.md","shasum":"ef56332ba8515f68d069c8bc4fd127798b79b5f6","modified":1462030895041},{"_id":"source/_posts/git/git-standard.md","shasum":"4791bf7f0bf4703f124936795b90999ed238d082","modified":1462547248625},{"_id":"source/_posts/hexo/hexo-guide-1.md","shasum":"2b34dbce8aa17c36751083e9fd95101d9695892d","modified":1459753514430},{"_id":"source/_posts/hexo/hexo-guide-2.md","shasum":"a6af306224ef3ad65dfb5ac0bca19782e185df1a","modified":1456150068498},{"_id":"source/_posts/hexo/hexo-guide-3.md","shasum":"6e42133dac71be2fe6ed0d2d9b86318bd0aa1eee","modified":1456241046197},{"_id":"source/_posts/interview/zhaimi-interview-summary.md","shasum":"d41a5ad23f94e48e812f5d5a3781d3aee7541e8b","modified":1459761275266},{"_id":"source/_posts/javascript/javascirpt-call-method.md","shasum":"b1c91442d2abcedf86331c34058615a234c59b8a","modified":1462637740977},{"_id":"source/_posts/javascript/javascript-closure.md","shasum":"59fd51bf0abfcdc5b0b6a928329749330046da38","modified":1458405807387},{"_id":"source/_posts/javascript/javascript-hoisting.md","shasum":"77874e905d2f833564111a95bb999b8a20074a44","modified":1457797841529},{"_id":"source/_posts/javascript/javascript-inherit.md","shasum":"0aa03d0dbab531d3d8dd0c29c8ef4bc79995de78","modified":1462637751945},{"_id":"source/_posts/javascript/javascript-learning-object.md","shasum":"93daf5bcfece61db10237a8fb06b720dd038f374","modified":1462637756656},{"_id":"source/_posts/javascript/you-donot-konw-javascript-reading-notes-2.md","shasum":"8a942ec0c8f10601672f0cc37d346edbb4ca9365","modified":1458219993331},{"_id":"source/_posts/javascript/you-donot-konw-javascript-reading-notes.md","shasum":"c1ea229e6c661d817c6c5b9b8227541162fb41eb","modified":1459756666370},{"_id":"source/_posts/javascript-array.md","shasum":"2398a56313dcfaef3173382e91d9a915eff1972d","modified":1462637772771},{"_id":"source/_posts/node/write-todo-with-express-and-mongodb-1.md","shasum":"4ef62a4a65f26612a68e6e69263d7c00e26946ad","modified":1464186480860},{"_id":"source/_posts/mobile/wechat-clean-cache.md","shasum":"15696ea8aa10b7d0fb7ce71ea3f6079bfe3d683f","modified":1462547275393},{"_id":"source/_posts/mobile/mobile-collect.md","shasum":"1d91e9559bdcadbcdeabfc66ea92f5eef4857c2d","modified":1457791791392},{"_id":"source/_posts/project-summary-uular.md","shasum":"5d4b831fa355c9f8c20d1c98d7044deb7dbf4e72","modified":1462547294737},{"_id":"source/files/editor_md.html","shasum":"a86251c114d93e3eb0d4c397a2c0015d1f972d02","modified":1458222245335},{"_id":"source/images/angluar-markdown-note-1.png","shasum":"c3dc9a969306ab63d622edf789795e36bdd328e2","modified":1462369130838},{"_id":"source/images/angluar-markdown-note-2.png","shasum":"c0de95c12569e1908515692135c31eb3be547aca","modified":1462369735604},{"_id":"source/images/angluar-markdown-note-3.png","shasum":"ca8b28c8c3c3405246df6e376d9d8361fb539c9d","modified":1462370163746},{"_id":"source/images/article-review-insight-3.png","shasum":"9c1b6ae89ae3ecf4e7a1ecf0c611b063ac822928","modified":1461077791580},{"_id":"source/images/article-review-insight-2.png","shasum":"4e025fcf43625094610e78e5ecdaac278e8e4df6","modified":1461078845622},{"_id":"source/images/write-a-todo-1.png","shasum":"2e5ce0c036000d4a4a2a27be89904e18f099f497","modified":1464102898000},{"_id":"source/_posts/hexo/hexo-guide-4.md","shasum":"a9b30e388e06a1b345d77e4b8f32167044ba64dc","modified":1462373780561},{"_id":"source/images/write-a-todo-2.png","shasum":"165bacaa217f78b75a938e792ee3f51bc4f53554","modified":1464102898000},{"_id":"source/images/write-a-todo-3.png","shasum":"59f13980986057849d07a4ef39e020094b021438","modified":1464102898000},{"_id":"source/images/write-a-todo-5.png","shasum":"bb0e9384ceeb33915ba24e728e38a1699683b1c3","modified":1464102898000},{"_id":"source/images/write-a-todo-4.png","shasum":"037fe397a1841bdf890acae634c9e26345ba04fb","modified":1464102898000},{"_id":"source/tags/index.md","shasum":"6e3fc9cd7219e672d1700e521b7d674f747364c7","modified":1462638150839},{"_id":"source/images/article-review-insight-1.png","shasum":"046f75b0ebe4cfe21af0d5df0edda25625be081d","modified":1461078831043},{"_id":"source/images/cnzz.png","shasum":"9d997129aed64fe1c90f92ca561bd2433e3c8789","modified":1456238520554},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462544296413},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462544296413},{"_id":"themes/next/source/css/_mixins/Mist.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462544296762},{"_id":"themes/next/source/css/_mixins/Muse.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462544296763},{"_id":"themes/next/source/css/_mixins/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462544296770},{"_id":"themes/next/source/css/_variables/Muse.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462544296842},{"_id":"themes/next/source/css/_variables/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462544296850},{"_id":"themes/next/README.md","shasum":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1462544296234},{"_id":"themes/next/bower.json","shasum":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1462544296268},{"_id":"themes/next/gulpfile.coffee","shasum":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1462544296271},{"_id":"themes/next/README.en.md","shasum":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1462544296231},{"_id":"themes/next/_config.yml","shasum":"66bbc82e6620bb6bcd81a86dfd69c6da86817dc8","modified":1462719734933},{"_id":"themes/next/languages/de.yml","shasum":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1462544296275},{"_id":"themes/next/languages/en.yml","shasum":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1462544296282},{"_id":"themes/next/languages/default.yml","shasum":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1462544296279},{"_id":"themes/next/languages/id.yml","shasum":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1462544296289},{"_id":"themes/next/languages/fr-FR.yml","shasum":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1462544296285},{"_id":"themes/next/languages/ja.yml","shasum":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1462544296292},{"_id":"themes/next/languages/ru.yml","shasum":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1462544296299},{"_id":"themes/next/languages/pt.yml","shasum":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1462544296296},{"_id":"themes/next/languages/zh-Hans.yml","shasum":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1462544296302},{"_id":"themes/next/languages/zh-hk.yml","shasum":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1462544296305},{"_id":"themes/next/languages/zh-tw.yml","shasum":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1462544296309},{"_id":"themes/next/layout/_macro/post-collapse.swig","shasum":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1462544296316},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","shasum":"d569af20d20a960d534a5b60f90c20fef519d351","modified":1462544296334},{"_id":"themes/next/layout/_macro/reward.swig","shasum":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1462544296327},{"_id":"themes/next/layout/_partials/comments.swig","shasum":"325dd5923d845a539fc0524ca72ce40edd1e516a","modified":1462544296338},{"_id":"themes/next/layout/_macro/post.swig","shasum":"843389ec3cb4c2baa6a6a2bb916f803c89ca723b","modified":1462544296323},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","shasum":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1462544296341},{"_id":"themes/next/layout/_partials/footer.swig","shasum":"27669118b957e8a39d843b63dddf561c9d62b336","modified":1462544296344},{"_id":"themes/next/layout/_macro/sidebar.swig","shasum":"9fc9f89c169439d7584197930359b758eb198a1c","modified":1462544296331},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","shasum":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1462544296353},{"_id":"themes/next/layout/_partials/header.swig","shasum":"46f8bbe51c0334c64c3a237bc0fe8ef73c6e58e1","modified":1462544296357},{"_id":"themes/next/layout/_partials/pagination.swig","shasum":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1462544296360},{"_id":"themes/next/layout/_partials/search/localsearch.swig","shasum":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1462544296367},{"_id":"themes/next/layout/_layout.swig","shasum":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1462544296313},{"_id":"themes/next/layout/_partials/head.swig","shasum":"0065ae49406ade2848b86bd4cd520af9d2148ece","modified":1462544296350},{"_id":"themes/next/layout/_partials/share/add-this.swig","shasum":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1462544296379},{"_id":"themes/next/layout/_partials/search.swig","shasum":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1462544296364},{"_id":"themes/next/layout/_partials/search/swiftype.swig","shasum":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1462544296372},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","shasum":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1462544296392},{"_id":"themes/next/layout/_scripts/baidu-push.swig","shasum":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1462544296402},{"_id":"themes/next/layout/_scripts/boostrap.swig","shasum":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1462544296405},{"_id":"themes/next/layout/_scripts/commons.swig","shasum":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1462544296408},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","shasum":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1462544296411},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","shasum":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1462544296416},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","shasum":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1462544296428},{"_id":"themes/next/layout/_partials/share/jiathis.swig","shasum":"12684840de632eb16e53ffa863166306a756fd4f","modified":1462544296398},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","shasum":"096e7a6958b3bcacaa94361266832871ccb989c0","modified":1462544296431},{"_id":"themes/next/layout/_partials/share/baidushare.swig","shasum":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1462544296389},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","shasum":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1462544296425},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","shasum":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1462544296419},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","shasum":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1462544296437},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","shasum":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1462544296443},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","shasum":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1462544296450},{"_id":"themes/next/layout/_partials/search/tinysou.swig","shasum":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1462544296376},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","shasum":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1462544296453},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","shasum":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1462544296461},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","shasum":"2338be12ffee58bc08197cb9da8aaf31737aaf5c","modified":1462544296468},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","shasum":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1462544296501},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","shasum":"3bb70d8d68142ee27f3cc98c2a4339757e7af3d3","modified":1462544296481},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","shasum":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1462544296509},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","shasum":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1462544296493},{"_id":"themes/next/layout/_scripts/vendors.swig","shasum":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1462544296516},{"_id":"themes/next/layout/index.swig","shasum":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1462544296528},{"_id":"themes/next/layout/category.swig","shasum":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1462544296523},{"_id":"themes/next/layout/archive.swig","shasum":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1462544296520},{"_id":"themes/next/layout/page.swig","shasum":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1462544296531},{"_id":"themes/next/layout/tag.swig","shasum":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1462544296537},{"_id":"themes/next/scripts/merge-configs.js","shasum":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1462544296546},{"_id":"themes/next/scripts/tags/center-quote.js","shasum":"99b66949f18398689b904907af23c013be1b978f","modified":1462544296550},{"_id":"themes/next/scripts/tags/full-image.js","shasum":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1462544296554},{"_id":"themes/next/scripts/tags/group-pictures.js","shasum":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1462544296563},{"_id":"themes/next/package.json","shasum":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1462544296541},{"_id":"themes/next/layout/post.swig","shasum":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1462544296534},{"_id":"themes/next/source/css/_common/components/buttons.styl","shasum":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1462544296571},{"_id":"themes/next/source/css/_common/components/comments.styl","shasum":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1462544296575},{"_id":"themes/next/source/css/_common/components/components.styl","shasum":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1462544296578},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","shasum":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1462544296567},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","shasum":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1462544296581},{"_id":"themes/next/source/css/_common/components/header/header.styl","shasum":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1462544296584},{"_id":"themes/next/source/css/_common/components/header/menu.styl","shasum":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1462544296591},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","shasum":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1462544296587},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","shasum":"1727702eac5d326b5c81a667944a245016668231","modified":1462544296597},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","shasum":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1462544296594},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","shasum":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1462544296608},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","shasum":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1462544296602},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","shasum":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1462544296613},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","shasum":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1462544296605},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","shasum":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1462544296616},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","shasum":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1462544296622},{"_id":"themes/next/source/css/_common/components/pagination.styl","shasum":"88559b13ce94311405b170a0506ded91273beceb","modified":1462544296625},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","shasum":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1462544296632},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","shasum":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1462544296639},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","shasum":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1462544296629},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","shasum":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1462544296641},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","shasum":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1462544296645},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","shasum":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1462544296648},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","shasum":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1462544296654},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","shasum":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1462544296652},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","shasum":"01567edaea6978628aa5521a122a85434c418bfd","modified":1462544296661},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","shasum":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1462544296657},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","shasum":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1462544296668},{"_id":"themes/next/source/css/_common/components/post/post.styl","shasum":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1462544296665},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","shasum":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1462544296671},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","shasum":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1462544296674},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","shasum":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1462544296677},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","shasum":"1153bb71edf253765145559674390e16dd67c633","modified":1462544296681},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","shasum":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1462544296688},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","shasum":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1462544296694},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","shasum":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1462544296697},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","shasum":"394888efec32749b353292a59ec7f1b609d6325e","modified":1462544296685},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","shasum":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1462544296691},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","shasum":"dd941824210733588841897457e0cc9697ca5608","modified":1462544296704},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","shasum":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1462544296709},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","shasum":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1462544296712},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","shasum":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1462544296701},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","shasum":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1462544296715},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","shasum":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1462544296719},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","shasum":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1462544296727},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","shasum":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1462544296723},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","shasum":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1462544296736},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","shasum":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1462544296732},{"_id":"themes/next/source/css/_common/outline/outline.styl","shasum":"12662536c7a07fff548abe94171f34b768dd610f","modified":1462544296740},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","shasum":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1462544296743},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","shasum":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1462544296748},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","shasum":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1462544296755},{"_id":"themes/next/source/css/_custom/custom.styl","shasum":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1462544296762},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","shasum":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1462544296752},{"_id":"themes/next/source/css/_mixins/Pisces.styl","shasum":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1462544296766},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","shasum":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1462544296774},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","shasum":"ea9069645696f86c5df64208490876fe150c8cae","modified":1462544296758},{"_id":"themes/next/source/css/_mixins/base.styl","shasum":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1462544296770},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","shasum":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1462544296781},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","shasum":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1462544296784},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","shasum":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1462544296778},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","shasum":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1462544296787},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","shasum":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1462544296791},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","shasum":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1462544296798},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","shasum":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1462544296802},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","shasum":"124b540f059fd1ed13514362007cfc70355278c6","modified":1462544296805},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","shasum":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1462544296812},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","shasum":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1462544296807},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","shasum":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1462544296816},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","shasum":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1462544296811},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","shasum":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1462544296819},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","shasum":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1462544296814},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","shasum":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1462544296822},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","shasum":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1462544296795},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","shasum":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1462544296635},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","shasum":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1462544296831},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","shasum":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1462544296825},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","shasum":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1462544296828},{"_id":"themes/next/source/css/_variables/Mist.styl","shasum":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1462544296841},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","shasum":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1462544296838},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","shasum":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1462544296835},{"_id":"themes/next/source/css/main.styl","shasum":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1462544296854},{"_id":"themes/next/source/css/_variables/Pisces.styl","shasum":"b8e3663996b39590509d843f674360872b0242ac","modified":1462544296846},{"_id":"themes/next/source/css/_variables/base.styl","shasum":"a7ae72e846393493385275d934eaa78534d9834c","modified":1462544296850},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","shasum":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1462544296859},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","shasum":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1462544296863},{"_id":"themes/next/source/images/avatar.png","shasum":"69470d1a8a3a5e39dc22fc8f0ff6e1e735ac0986","modified":1456035285536},{"_id":"themes/next/source/images/avatar.gif","shasum":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1462544296855},{"_id":"themes/next/source/images/cc-by-nc.svg","shasum":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1462544296867},{"_id":"themes/next/source/images/cc-by-nd.svg","shasum":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1462544296870},{"_id":"themes/next/source/images/cc-by.svg","shasum":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1462544296879},{"_id":"themes/next/source/images/cc-by-sa.svg","shasum":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1462544296875},{"_id":"themes/next/source/images/loading.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462544296883},{"_id":"themes/next/source/images/placeholder.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462544296883},{"_id":"themes/next/source/images/cc-zero.svg","shasum":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1462544296882},{"_id":"themes/next/source/images/favicon.ico","shasum":"e7b7dbb3c7c62aef9e5bddcae3ca87df20c78e0f","modified":1456032156747},{"_id":"themes/next/source/images/quote-l.svg","shasum":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1462544296887},{"_id":"themes/next/source/images/quote-r.svg","shasum":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1462544296891},{"_id":"themes/next/source/images/searchicon.png","shasum":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1462544296891},{"_id":"themes/next/source/js/src/bootstrap.js","shasum":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1462544296912},{"_id":"themes/next/source/js/src/affix.js","shasum":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1462544296906},{"_id":"themes/next/source/js/src/hook-duoshuo.js","shasum":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1462544296918},{"_id":"themes/next/source/js/src/schemes/pisces.js","shasum":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1462544296942},{"_id":"themes/next/source/js/src/motion.js","shasum":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1462544296929},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1462544296975},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1462544296976},{"_id":"themes/next/source/js/src/post-details.js","shasum":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1462544296937},{"_id":"themes/next/source/js/src/utils.js","shasum":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1462544296966},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1462544296977},{"_id":"themes/next/source/js/src/scrollspy.js","shasum":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1462544296957},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1462544296977},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1462544296978},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1462544296980},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1462544296981},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","shasum":"6394c48092085788a8c0ef72670b0652006231a1","modified":1462544296984},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","shasum":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1462544296992},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","shasum":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1462544297001},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","shasum":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1462544297012},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","shasum":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1462544297016},{"_id":"themes/next/source/vendors/fastclick/LICENSE","shasum":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1462544297048},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","shasum":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1462544297027},{"_id":"themes/next/source/vendors/fastclick/bower.json","shasum":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1462544297057},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","shasum":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1462544296998},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","shasum":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1462544297041},{"_id":"themes/next/source/vendors/fastclick/README.md","shasum":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1462544297053},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","shasum":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1462544297099},{"_id":"themes/next/source/vendors/font-awesome/bower.json","shasum":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1462544297102},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","shasum":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1462544297066},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","shasum":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1462544297111},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","shasum":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1462544297106},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1462544297085},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","shasum":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1462544297114},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","shasum":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1462544297172},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","shasum":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1462544297212},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","shasum":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1462544297216},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","shasum":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1462544297220},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","shasum":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1462544297229},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","shasum":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1462544297236},{"_id":"themes/next/source/vendors/velocity/bower.json","shasum":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1462544297263},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","shasum":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1462544297246},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","shasum":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1462544297255},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","shasum":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1462544297302},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","shasum":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1462544297311},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","shasum":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1462544297294},{"_id":"themes/next/test/helpers.js","shasum":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1462544297321},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","shasum":"0112e96f327d413938d37c1693806f468ffdbace","modified":1462544297123},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","shasum":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1462544297142},{"_id":"themes/next/source/vendors/jquery/index.js","shasum":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1462544297204},{"_id":"themes/next/test/intern.js","shasum":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1462544297329},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","shasum":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1462544297167},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","shasum":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1462544297162},{"_id":"source/images/angular-markdown-note.gif","shasum":"e3c50d92b80ea5c9317b60620d3bddf5af09fbd3","modified":1462372158884},{"_id":"themes/next/source/vendors/velocity/velocity.js","shasum":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1462544297279},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","shasum":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1462544297156},{"_id":"public/vendors/velocity/velocity.ui.min.js","modified":1464186332320,"shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908"},{"_id":"public/vendors/velocity/velocity.ui.js","modified":1464186332337,"shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df"},{"_id":"public/vendors/velocity/velocity.min.js","modified":1464186332341,"shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6"},{"_id":"public/vendors/velocity/velocity.js","modified":1464186332350,"shasum":"9f08181baea0cc0e906703b7e5df9111b9ef3373"},{"_id":"public/vendors/velocity/bower.json","modified":1464186332354,"shasum":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409"},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1464186332358,"shasum":"214dad442a92d36af77ed0ca1d9092b16687f02f"},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","modified":1464186332364,"shasum":"38628e75e4412cc6f11074e03e1c6d257aae495b"},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","modified":1464186332371,"shasum":"0e9a81785a011c98be5ea821a8ed7d411818cfd1"},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","modified":1464186332380,"shasum":"481fd478650e12b67c201a0ea41e92743f8b45a3"},{"_id":"public/vendors/jquery_lazyload/bower.json","modified":1464186332384,"shasum":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53"},{"_id":"public/vendors/jquery_lazyload/README.html","modified":1464186332476,"shasum":"bde24335f6bc09d8801c0dcd7274f71b466552bd"},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","modified":1464186332484,"shasum":"a6358170d346af13b1452ac157b60505bec7015c"},{"_id":"public/vendors/jquery/index.js","modified":1464186332491,"shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1464186332500,"shasum":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1464186332507,"shasum":"507970402e328b2baeb05bde73bf9ded4e2c3a2d"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1464186332511,"shasum":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1464186332521,"shasum":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1464186332526,"shasum":"b3c2f08e73320135b69c23a3908b87a12053a2f6"},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","modified":1464186332535,"shasum":"0112e96f327d413938d37c1693806f468ffdbace"},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","modified":1464186332545,"shasum":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22"},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","modified":1464186332550,"shasum":"1573904b82807abbb32c97a3632c6c6808eaac50"},{"_id":"public/vendors/font-awesome/css/font-awesome.css","modified":1464186332555,"shasum":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7"},{"_id":"public/vendors/font-awesome/bower.json","modified":1464186332559,"shasum":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad"},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","modified":1464186332564,"shasum":"ed80b43dbc7e3009b2f436741b9796df8eb3be02"},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","modified":1464186332570,"shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18"},{"_id":"public/vendors/fastclick/lib/fastclick.js","modified":1464186332574,"shasum":"06cef196733a710e77ad7e386ced6963f092dc55"},{"_id":"public/vendors/fastclick/bower.json","modified":1464186332577,"shasum":"4dcecf83afddba148464d5339c93f6d0aa9f42e9"},{"_id":"public/vendors/fastclick/README.html","modified":1464186332592,"shasum":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da"},{"_id":"public/vendors/fastclick/LICENSE","modified":1464186332602,"shasum":"6f474ea75c42442da7bbcf2e9143ce98258efd8d"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","modified":1464186332607,"shasum":"53360764b429c212f424399384417ccc233bb3be"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","modified":1464186332612,"shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","modified":1464186332619,"shasum":"5f163444617b6cf267342f06ac166a237bb62df9"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1464186332625,"shasum":"53e194f4a72e649c04fb586dd57762b8c022800b"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1464186332639,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1464186332647,"shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1464186332654,"shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1464186332669,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1464186332684,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","modified":1464186332688,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","modified":1464186332693,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","modified":1464186332696,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","modified":1464186332704,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","modified":1464186332713,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/vendors/fancybox/source/blank.gif","modified":1464186332718,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/js/src/utils.js","modified":1464186332722,"shasum":"e5cb720894c4bc28ca8f10b33df127fb394018d9"},{"_id":"public/js/src/scrollspy.js","modified":1464186332727,"shasum":"fe4da1b9fe73518226446f5f27d2831e4426fc35"},{"_id":"public/js/src/schemes/pisces.js","modified":1464186332731,"shasum":"7506e7490c69a200831393c38d25e91c156bd471"},{"_id":"public/js/src/post-details.js","modified":1464186332738,"shasum":"2038f54e289b6da5def09689e69f623187147be5"},{"_id":"public/js/src/motion.js","modified":1464186332742,"shasum":"269414e84df544a4ccb88519f6abae4943db3c67"},{"_id":"public/js/src/hook-duoshuo.js","modified":1464186332749,"shasum":"a6119070c0119f33e08b29da7d2cce2635eb40a0"},{"_id":"public/js/src/bootstrap.js","modified":1464186332759,"shasum":"39bf93769d9080fa01a9a875183b43198f79bc19"},{"_id":"public/js/src/affix.js","modified":1464186332767,"shasum":"978e0422b5bf1b560236d8d10ebc1adcf66392e3"},{"_id":"public/images/searchicon.png","modified":1464186332772,"shasum":"67727a6a969be0b2659b908518fa6706eed307b8"},{"_id":"public/images/quote-r.svg","modified":1464186332777,"shasum":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41"},{"_id":"public/images/quote-l.svg","modified":1464186332784,"shasum":"cd108d6f44351cadf8e6742565217f88818a0458"},{"_id":"public/images/placeholder.gif","modified":1464186332792,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/loading.gif","modified":1464186332796,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/favicon.ico","modified":1464186332802,"shasum":"e7b7dbb3c7c62aef9e5bddcae3ca87df20c78e0f"},{"_id":"public/images/cc-zero.svg","modified":1464186332806,"shasum":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d"},{"_id":"public/images/cc-by.svg","modified":1464186332811,"shasum":"e92a33c32d1dac8ed94849b2b4e6456e887efe70"},{"_id":"public/images/cc-by-sa.svg","modified":1464186332817,"shasum":"70c1535f43e54e5ff35ca81419e77e4c0c301398"},{"_id":"public/images/cc-by-nd.svg","modified":1464186332823,"shasum":"42cd73da328077ccc92f859bb8f3cf621b3484f8"},{"_id":"public/images/cc-by-nc.svg","modified":1464186332827,"shasum":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab"},{"_id":"public/images/cc-by-nc-sa.svg","modified":1464186332833,"shasum":"6f55543d1fb9cbc436c101d24f802dec7b41efc3"},{"_id":"public/images/cc-by-nc-nd.svg","modified":1464186332838,"shasum":"bc3588c9b2d7c68830524783120ff6cf957cf668"},{"_id":"public/images/avatar.png","modified":1464186332844,"shasum":"69470d1a8a3a5e39dc22fc8f0ff6e1e735ac0986"},{"_id":"public/images/avatar.gif","modified":1464186332852,"shasum":"264082bb3a1af70d5499c7d22b0902cb454b6d12"},{"_id":"public/css/main.css","modified":1464186338020,"shasum":"6e840bebec133b2ac3676b14bdd8e9d26c88f980"},{"_id":"public/images/write-a-todo-5.png","modified":1464186338318,"shasum":"bb0e9384ceeb33915ba24e728e38a1699683b1c3"},{"_id":"public/images/write-a-todo-4.png","modified":1464186338322,"shasum":"037fe397a1841bdf890acae634c9e26345ba04fb"},{"_id":"public/images/write-a-todo-3.png","modified":1464186338326,"shasum":"59f13980986057849d07a4ef39e020094b021438"},{"_id":"public/images/write-a-todo-2.png","modified":1464186338329,"shasum":"165bacaa217f78b75a938e792ee3f51bc4f53554"},{"_id":"public/images/write-a-todo-1.png","modified":1464186338335,"shasum":"2e5ce0c036000d4a4a2a27be89904e18f099f497"},{"_id":"public/images/cnzz.png","modified":1464186338398,"shasum":"9d997129aed64fe1c90f92ca561bd2433e3c8789"},{"_id":"public/images/article-review-insight-3.png","modified":1464186338404,"shasum":"9c1b6ae89ae3ecf4e7a1ecf0c611b063ac822928"},{"_id":"public/images/article-review-insight-2.png","modified":1464186338414,"shasum":"4e025fcf43625094610e78e5ecdaac278e8e4df6"},{"_id":"public/images/article-review-insight-1.png","modified":1464186338425,"shasum":"046f75b0ebe4cfe21af0d5df0edda25625be081d"},{"_id":"public/images/angular-markdown-note.gif","modified":1464186338437,"shasum":"e3c50d92b80ea5c9317b60620d3bddf5af09fbd3"},{"_id":"public/images/angluar-markdown-note-3.png","modified":1464186338461,"shasum":"ca8b28c8c3c3405246df6e376d9d8361fb539c9d"},{"_id":"public/images/angluar-markdown-note-2.png","modified":1464186338465,"shasum":"c0de95c12569e1908515692135c31eb3be547aca"},{"_id":"public/images/angluar-markdown-note-1.png","modified":1464186338471,"shasum":"c3dc9a969306ab63d622edf789795e36bdd328e2"},{"_id":"public/tags/index.html","modified":1464186338627,"shasum":"cec9ff1235755837fc25025ed03669e60421117a"},{"_id":"public/files/editor_md.html","modified":1464186338743,"shasum":"4979c8b516f583268b616e2aad080b72d6e73efc"},{"_id":"public/2016/05/25/node/write-todo-with-express-and-mongodb-1/index.html","modified":1464186498238,"shasum":"895937ca333a656e64ebc6b3a0f00e3421856b8d"},{"_id":"public/2016/05/08/javascript-array/index.html","modified":1464186339077,"shasum":"e8935e8926aa5108e1f10035908b23b87686ea21"},{"_id":"public/2016/05/04/angular/angular-markdown-note/index.html","modified":1464186339220,"shasum":"beca6ada7446429f3688187fee73f1dd4ad2df61"},{"_id":"public/2016/04/30/essays/darktime-reading-note/index.html","modified":1464186339319,"shasum":"7451a06e227b9316ca43667c27b5007236668355"},{"_id":"public/2016/04/30/essays/reading-list-2016/index.html","modified":1464186339425,"shasum":"8d90d5af78a30e9d8fe52d48b11d17c340d24123"},{"_id":"public/2016/04/20/javascript/javascirpt-call-method/index.html","modified":1464186339528,"shasum":"b54705bf50bf4339fef286d865eb70d5cd7e976a"},{"_id":"public/2016/04/19/essays/article-review-insight/index.html","modified":1464186339626,"shasum":"1d5be2723b912c527f0926448a02d37a89047901"},{"_id":"public/2016/04/15/angular/angular-markdown/index.html","modified":1464186339734,"shasum":"984469ff3277109c4622c1df1efd0ffa45644723"},{"_id":"public/2016/04/09/git/git-standard/index.html","modified":1464186339838,"shasum":"a51a145fc94371666d01ba0b795f0f6f86e93136"},{"_id":"public/2016/04/07/essays/leave-office/index.html","modified":1464186339927,"shasum":"6b5a6a9bc2e9d1ca685e1d04598feb98119d8b51"},{"_id":"public/2016/04/07/mobile/wechat-clean-cache/index.html","modified":1464186340045,"shasum":"dd421ae10a1c79b0c12f7c7a95312111820afc70"},{"_id":"public/2016/04/04/interview/zhaimi-interview-summary/index.html","modified":1464186340170,"shasum":"7407e800c7aae7da95aedb55b300275c5ba4ad1e"},{"_id":"public/2016/04/04/angular/angular-collect/index.html","modified":1464186340294,"shasum":"dee52aafd8f5d71de741c4aa674d1fd6be87a436"},{"_id":"public/2016/03/22/essays/essays-mechanical-keyboard/index.html","modified":1464186340407,"shasum":"a49e2b9719e816aeadefbc4159893933235a4a29"},{"_id":"public/2016/03/20/javascript/javascript-closure/index.html","modified":1464186340553,"shasum":"e34dc78579d06a76f5688c3fb9857ea3f4897d85"},{"_id":"public/2016/03/15/javascript/you-donot-konw-javascript-reading-notes-2/index.html","modified":1464186340656,"shasum":"c1db07aee72516baff4806c868734aa745ea9b83"},{"_id":"public/2016/03/12/javascript/you-donot-konw-javascript-reading-notes/index.html","modified":1464186340756,"shasum":"18638f36de7549eddf9432cd005fb2b82ad3ee1f"},{"_id":"public/2016/03/12/project-summary-uular/index.html","modified":1464186340856,"shasum":"9859f3c14344edf072cc37ae00718c1458312ec1"},{"_id":"public/2016/03/06/javascript/javascript-inherit/index.html","modified":1464186340977,"shasum":"fd8cbc02ed51508e6f83b102e5355f64485d190d"},{"_id":"public/2016/03/05/javascript/javascript-hoisting/index.html","modified":1464186341077,"shasum":"92dae2ff3c8f4ca3c408e7a484bfede4b9dccd65"},{"_id":"public/2016/02/29/mobile/mobile-collect/index.html","modified":1464186341179,"shasum":"01a135605fba195d65ed7b58431d0d339f5ecbc5"},{"_id":"public/2016/02/26/javascript/javascript-learning-object/index.html","modified":1464186341281,"shasum":"7b31023fea56abedbadedf807043d49179b39ceb"},{"_id":"public/2016/02/24/angular/angular-lazyload/index.html","modified":1464186341386,"shasum":"cf5438217ea688d0c2339aeacfcca4d4263439f5"},{"_id":"public/2016/02/23/hexo/hexo-guide-4/index.html","modified":1464186341486,"shasum":"d926d2f56a15832f313f2aa95fd50f7a609473be"},{"_id":"public/2016/02/22/hexo/hexo-guide-3/index.html","modified":1464186341583,"shasum":"72f1f543786b70ef00377f049065d1f9cc2da3b8"},{"_id":"public/2016/02/21/hexo/hexo-guide-2/index.html","modified":1464186341677,"shasum":"c22bf00bb6d001156906c0d46ed41027d6be8c2d"},{"_id":"public/2016/02/21/hexo/hexo-guide-1/index.html","modified":1464186341777,"shasum":"e2ef9bce4476611c182dcc68fa86b71d974ce694"},{"_id":"public/2016/02/21/essays/write/index.html","modified":1464186341871,"shasum":"2b7febefe72aef4caacc5a491158873b4277b3b6"},{"_id":"public/archives/index.html","modified":1464186342100,"shasum":"fff1aef4a1f4c1c200c358e6a0feedd40656337f"},{"_id":"public/archives/2016/index.html","modified":1464186342315,"shasum":"7456aae2808de854ba01a336038e5780eea8f741"},{"_id":"public/archives/2016/02/index.html","modified":1464186342434,"shasum":"b3784923e461f2b7b6fc308131b4fcf379365134"},{"_id":"public/archives/2016/03/index.html","modified":1464186342603,"shasum":"49657ba76348d00d94d0a3d9ee37c0fc169db9df"},{"_id":"public/archives/2016/04/index.html","modified":1464186342726,"shasum":"550b1558f1ef3f46a21ccd43659f2ca0bd15d01e"},{"_id":"public/archives/2016/05/index.html","modified":1464186342812,"shasum":"f8d79d39554a7366c37c5e20f1c6042737368b78"},{"_id":"public/index.html","modified":1464186342919,"shasum":"01e0d80c23cab90ddbf336d47ed91a7d7ddd244d"},{"_id":"public/page/2/index.html","modified":1464186343025,"shasum":"b13f2f6a7e4ea7aaf78fe8c25d6420199279adce"},{"_id":"public/page/3/index.html","modified":1464186343130,"shasum":"b60fb0b0c921d6fbe11593a9a855dbf2517b1e35"},{"_id":"public/page/4/index.html","modified":1464186343239,"shasum":"2aec58dc8c37de0c90a6254fa9b4768e636a8ca2"},{"_id":"public/page/5/index.html","modified":1464186343347,"shasum":"2351e46daafed059b6d4221d2af30ede3f86cd2d"},{"_id":"public/page/6/index.html","modified":1464186343444,"shasum":"3a364543ee7d13260d8eefd3e8e9fee2b4c59b61"},{"_id":"public/tags/AngularJS/index.html","modified":1464186343533,"shasum":"fd3e57e4dcbe20e9720baa2f252149909559262e"},{"_id":"public/tags/移动端/index.html","modified":1464186343608,"shasum":"cefe3f6f601652e7cf6d7b7391952fdb9bc2ac3e"},{"_id":"public/tags/rem布局/index.html","modified":1464186343686,"shasum":"d61f01901f2e1259d4141e4272c1155402ff7687"},{"_id":"public/tags/nodejs/index.html","modified":1464186343751,"shasum":"a5ad7b24f2ab0b942c4315e808e0ac198cbf9826"},{"_id":"public/tags/微信/index.html","modified":1464186343826,"shasum":"94be76c1695636eae501d72953d805298f5721d3"},{"_id":"public/tags/Javascript/index.html","modified":1464186343891,"shasum":"b3540c93d8d4711bc6bb487dc1fe611a579d8166"},{"_id":"public/tags/Javascript学习笔记/index.html","modified":1464186343968,"shasum":"2dd8fe6ef49987f1829efa355ec0581ba5685205"},{"_id":"public/tags/JavaScript/index.html","modified":1464186344039,"shasum":"3d32cca57958e403d8801c95a6571ec305cb736e"},{"_id":"public/tags/JavaScript学习笔记/index.html","modified":1464186344126,"shasum":"b83892c7f25f913a464e1f1d7472fadb665418de"},{"_id":"public/tags/JavaScript学习笔记/page/2/index.html","modified":1464186344195,"shasum":"21f2f1172ba9586458d5f55dbf75513103a31704"},{"_id":"public/tags/面向对象/index.html","modified":1464186344269,"shasum":"fca02b0130d6201ca36bff707c1807947b0d4c98"},{"_id":"public/tags/对象/index.html","modified":1464186344334,"shasum":"63a27f833b204ca85ee2d67b2cf44a1007ff9c44"},{"_id":"public/tags/继承/index.html","modified":1464186344407,"shasum":"8eb92a98f644ababc7b693e97ce770803c7880d2"},{"_id":"public/tags/面试总结/index.html","modified":1464186344481,"shasum":"40d2e299bd554ad15758f07d3f3000862936a04f"},{"_id":"public/tags/Hexo/index.html","modified":1464186344564,"shasum":"1f4e7f1da48371db6d3c42d895cae15f5032fc94"},{"_id":"public/tags/Git/index.html","modified":1464186344639,"shasum":"2b1358b86e573165bd8391d3c107dc81ecd906f7"},{"_id":"public/tags/Git规范/index.html","modified":1464186344709,"shasum":"18bdfefc1fe04b93dede457daf1bee7bdc05c9f6"},{"_id":"public/tags/随笔/index.html","modified":1464186344794,"shasum":"22c49988764d6a262bc365ed6e46f4ddcf40bf09"},{"_id":"public/tags/随笔/page/2/index.html","modified":1464186344859,"shasum":"e2737b76b6f2452cc160e9ee0efb76d5331875fb"},{"_id":"public/tags/阅读书单/index.html","modified":1464186344932,"shasum":"9305c1d8fe8053e40d6c487ce95c596ba4630b05"},{"_id":"public/tags/机械键盘/index.html","modified":1464186344994,"shasum":"cc031e221c90d6f4af52750f7092b631ee28e2e4"},{"_id":"public/tags/读书笔记/index.html","modified":1464186345068,"shasum":"5ee65e31986cfa326700519b503928228c81cabe"},{"_id":"public/tags/读后感/index.html","modified":1464186345131,"shasum":"9411d08e14f11fc9da628d80be4a0b8a28e4c7a6"},{"_id":"public/tags/markdown/index.html","modified":1464186345206,"shasum":"cadc61d19391ee894940de09d2795ea302506101"},{"_id":"public/tags/动态加载/index.html","modified":1464186345267,"shasum":"5517931da2d56a6ef65263355b3d91e84b01189f"}],"Category":[],"Data":[],"Page":[{"title":"标签","date":"2016-05-07T16:21:44.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-05-08 00:21:44\ntype: \"tags\"\n---\n","updated":"2016-05-07T16:22:30.839Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciomyqgj10003tstzc5bh3q31"},{"_content":"<style type=\"text/css\">.e{position:absolute;top:0;right:50%;bottom:0;left:0;} .c{position:absolute;overflow:auto;top:0;right:0;bottom:0;left:50%;}</style><div class=\"e\" id=\"editor\"></div><div class=\"c\"></div><script src=\"http://d1n0x3qji82z53.cloudfront.net/src-min-noconflict/ace.js\" type=\"text/javascript\" charset=\"utf-8\"></script><script src=\"http://cdnjs.cloudflare.com/ajax/libs/showdown/0.3.1/showdown.min.js\"></script><script> function showResult(e){consoleEl.innerHTML=e}var e=ace.edit(\"editor\");e.setTheme(\"ace/theme/monokai\");e.getSession().setMode(\"ace/mode/markdown\");var consoleEl=document.getElementsByClassName(\"c\")[0];var converter=new Showdown.converter;e.commands.addCommand({name:\"markdown\",bindKey:{win:\"Ctrl-M\",mac:\"Command-M\"},exec:function(t){var n=e.getSession().getMode().$id;if(n==\"ace/mode/markdown\"){showResult(converter.makeHtml(t.getValue()))}},readOnly:true})</script>","source":"files/editor_md.html","raw":"<style type=\"text/css\">.e{position:absolute;top:0;right:50%;bottom:0;left:0;} .c{position:absolute;overflow:auto;top:0;right:0;bottom:0;left:50%;}</style><div class=\"e\" id=\"editor\"></div><div class=\"c\"></div><script src=\"http://d1n0x3qji82z53.cloudfront.net/src-min-noconflict/ace.js\" type=\"text/javascript\" charset=\"utf-8\"></script><script src=\"http://cdnjs.cloudflare.com/ajax/libs/showdown/0.3.1/showdown.min.js\"></script><script> function showResult(e){consoleEl.innerHTML=e}var e=ace.edit(\"editor\");e.setTheme(\"ace/theme/monokai\");e.getSession().setMode(\"ace/mode/markdown\");var consoleEl=document.getElementsByClassName(\"c\")[0];var converter=new Showdown.converter;e.commands.addCommand({name:\"markdown\",bindKey:{win:\"Ctrl-M\",mac:\"Command-M\"},exec:function(t){var n=e.getSession().getMode().$id;if(n==\"ace/mode/markdown\"){showResult(converter.makeHtml(t.getValue()))}},readOnly:true})</script>","date":"2016-03-17T13:44:05.335Z","updated":"2016-03-17T13:44:05.335Z","path":"files/editor_md.html","title":"","comments":1,"layout":"page","_id":"ciomyqgj60004tstzdnax0cdd"}],"Post":[{"title":"关于AngularJS的一些坑","date":"2016-04-04T08:45:39.000Z","_content":"本文是搜集学习AngularJS和开发中收集的一些坑。持续更新。\n<!-- more -->\n## 1、select第一行出现空白\n在使用带有angular数据绑定功能的HTML SELECT 元素时，如果不指定default value的话，第一个option会出现空白，如下图：\n\n解决办法：\n`为select添加 一个 默认的option`\n```javascript\n    <select ng-model=\"myColor\" ng-options=\"d.id for d in data\">\n            <option value=\"\">请选择</option>\n     </select>\n```\n## 2、AngularJS在IE的XHR请求存在Bug。\nIE只会在第一次才会从服务器中去请求XHR数据，之后的XHR请求都是从缓存中取。 \n解决办法：禁用IE对ajax的缓存\nhttp://stackoverflow.com/questions/16098430/angular-ie-caching-issue-for-http\n具体代码如下：\n```javascript\nmyModule.config(['$httpProvider', function($httpProvider) {\n    //initialize get if not there\n    if (!$httpProvider.defaults.headers.get) {\n        $httpProvider.defaults.headers.get = {};  \n    }  \n \n    // Answer edited to include suggestions from comments\n    // because previous version of code introduced browser-related errors\n \n    //disable IE ajax request caching\n    $httpProvider.defaults.headers.get['If-Modified-Since'] = 'Mon, 26 Jul 1997 05:00:00 GMT';\n    // extra\n    $httpProvider.defaults.headers.get['Cache-Control'] = 'no-cache';\n    $httpProvider.defaults.headers.get['Pragma'] = 'no-cache';}]);\n```\n## 3、使用ui-bootstrap中的$modal出现编译错误\n问题描述:在页面一加载的时候就去调用`$modal`服务的话，会报错对象的模板页面找不到。\n解决办法：使用`$timeout`，延迟100ms之后再去调用`$modal`服务。\n```javascript\n $timeout(function () {\n            if($scope.isDated){\n                $modal.open({\n                    backdrop: 'static',\n                    keyboard: false,\n                    animation: true,\n                    templateUrl: 'activity_reward_dated_modal.html',\n                    controller: 'ActivityRewardDatedModalCtrl'\n                });\n            }\n        },100)\n```\n## 4、页面出现表达式闪烁\n\n### 1、为什么会出现表达式{{express}}闪烁？\n　　因为我们利用JavaScript操作DOM，都需要等待DOM Ready完成。AngularJS也会在DOM Ready完成后才会去解析页面上的视图模板。在AngularJS开始工作之前，用户会看到表达式本身，之后才会被替换为表达式的求值结果。\n### 2、表达式闪烁解决方案：主要有两种解决方案\n* 把{{express}}替换为ng-bind因为ng-bind只是html节点的拓展属性，浏览器并不理解这个未知的属性，因为浏览器不会显示它。\n```\n<div ng-bind='express'></div>\n```\n* 利用AngularJS提供的ngCloak来标记AngularJS出现的节点。ngCloak主要利用CSSdisplay属性来控制显示和隐藏表达式模块。\n```\n<div ng-cloak>{{express}}</div>\n```\n#### ngCloak实现原理\n　　AngularJS会在文件加载的同时向HTML的head元素添加ng-hide、ng-cloak的样式定义。这样在浏览器初始化页面的时候，添加了ngCloak指令的节点会被`ng-cloak`这个样式隐藏掉，因此在AngularJS解析视图模板之前，我们看不到ng-cloak指令的节点。\n那么被隐藏的节点又是怎么样在视图解析完成后显示出来的呢？\n　　complie函数会在AngularJS开始解析模板指令的时候被执行，它会移除在DOM节点上的ngCloak属性和ngCloak样式，这样带有ng-cloak指令的的DOM节点就会被正常显示出来。\n\n## 5、使用第三方插件的时候，会出现无法动态绑定值\n　　AngularJS是通过“脏检查”来实现动态绑定的。然而这种\"脏检查\"机制只能适用于AngularJS内部的行为触发方式比如ng-clcik、ng-change等，而不能涵盖所有的AngularJS操作场景。典型的例子就是我们在封装第三方jQuery插件时，不能自动更新视图，而需要我们手动调用`$scope.$apply`。但是往往我们在集成jQuery插件时候调用`$scope.$apply`会出现`digest in progress`错误，那么这时候可以考虑使用`$timeout`来代替.\n　　那为什么手动触发`$scope.$apply`会报`digest in progess`的错误？\n　　AngularJS在任何时候只允许一个`$digest`或者`$apply`操作存在于应用中。因此当应用中已经有`$digest`或者`$apply`操作的时候，如果再手动去触发的话，就会报错`$digest in progress`。\n   \n\n参考资料：\n> https://docs.angularjs.org/error/$rootScope/inprog\n>《AngularJS深度剖析与最佳实践》\n\n\n","source":"_posts/angular/angular-collect.md","raw":"---\ntitle: 关于AngularJS的一些坑\ndate: 2016-04-04 16:45:39\ntags: AngularJS\n---\n本文是搜集学习AngularJS和开发中收集的一些坑。持续更新。\n<!-- more -->\n## 1、select第一行出现空白\n在使用带有angular数据绑定功能的HTML SELECT 元素时，如果不指定default value的话，第一个option会出现空白，如下图：\n\n解决办法：\n`为select添加 一个 默认的option`\n```javascript\n    <select ng-model=\"myColor\" ng-options=\"d.id for d in data\">\n            <option value=\"\">请选择</option>\n     </select>\n```\n## 2、AngularJS在IE的XHR请求存在Bug。\nIE只会在第一次才会从服务器中去请求XHR数据，之后的XHR请求都是从缓存中取。 \n解决办法：禁用IE对ajax的缓存\nhttp://stackoverflow.com/questions/16098430/angular-ie-caching-issue-for-http\n具体代码如下：\n```javascript\nmyModule.config(['$httpProvider', function($httpProvider) {\n    //initialize get if not there\n    if (!$httpProvider.defaults.headers.get) {\n        $httpProvider.defaults.headers.get = {};  \n    }  \n \n    // Answer edited to include suggestions from comments\n    // because previous version of code introduced browser-related errors\n \n    //disable IE ajax request caching\n    $httpProvider.defaults.headers.get['If-Modified-Since'] = 'Mon, 26 Jul 1997 05:00:00 GMT';\n    // extra\n    $httpProvider.defaults.headers.get['Cache-Control'] = 'no-cache';\n    $httpProvider.defaults.headers.get['Pragma'] = 'no-cache';}]);\n```\n## 3、使用ui-bootstrap中的$modal出现编译错误\n问题描述:在页面一加载的时候就去调用`$modal`服务的话，会报错对象的模板页面找不到。\n解决办法：使用`$timeout`，延迟100ms之后再去调用`$modal`服务。\n```javascript\n $timeout(function () {\n            if($scope.isDated){\n                $modal.open({\n                    backdrop: 'static',\n                    keyboard: false,\n                    animation: true,\n                    templateUrl: 'activity_reward_dated_modal.html',\n                    controller: 'ActivityRewardDatedModalCtrl'\n                });\n            }\n        },100)\n```\n## 4、页面出现表达式闪烁\n\n### 1、为什么会出现表达式{{express}}闪烁？\n　　因为我们利用JavaScript操作DOM，都需要等待DOM Ready完成。AngularJS也会在DOM Ready完成后才会去解析页面上的视图模板。在AngularJS开始工作之前，用户会看到表达式本身，之后才会被替换为表达式的求值结果。\n### 2、表达式闪烁解决方案：主要有两种解决方案\n* 把{{express}}替换为ng-bind因为ng-bind只是html节点的拓展属性，浏览器并不理解这个未知的属性，因为浏览器不会显示它。\n```\n<div ng-bind='express'></div>\n```\n* 利用AngularJS提供的ngCloak来标记AngularJS出现的节点。ngCloak主要利用CSSdisplay属性来控制显示和隐藏表达式模块。\n```\n<div ng-cloak>{{express}}</div>\n```\n#### ngCloak实现原理\n　　AngularJS会在文件加载的同时向HTML的head元素添加ng-hide、ng-cloak的样式定义。这样在浏览器初始化页面的时候，添加了ngCloak指令的节点会被`ng-cloak`这个样式隐藏掉，因此在AngularJS解析视图模板之前，我们看不到ng-cloak指令的节点。\n那么被隐藏的节点又是怎么样在视图解析完成后显示出来的呢？\n　　complie函数会在AngularJS开始解析模板指令的时候被执行，它会移除在DOM节点上的ngCloak属性和ngCloak样式，这样带有ng-cloak指令的的DOM节点就会被正常显示出来。\n\n## 5、使用第三方插件的时候，会出现无法动态绑定值\n　　AngularJS是通过“脏检查”来实现动态绑定的。然而这种\"脏检查\"机制只能适用于AngularJS内部的行为触发方式比如ng-clcik、ng-change等，而不能涵盖所有的AngularJS操作场景。典型的例子就是我们在封装第三方jQuery插件时，不能自动更新视图，而需要我们手动调用`$scope.$apply`。但是往往我们在集成jQuery插件时候调用`$scope.$apply`会出现`digest in progress`错误，那么这时候可以考虑使用`$timeout`来代替.\n　　那为什么手动触发`$scope.$apply`会报`digest in progess`的错误？\n　　AngularJS在任何时候只允许一个`$digest`或者`$apply`操作存在于应用中。因此当应用中已经有`$digest`或者`$apply`操作的时候，如果再手动去触发的话，就会报错`$digest in progress`。\n   \n\n参考资料：\n> https://docs.angularjs.org/error/$rootScope/inprog\n>《AngularJS深度剖析与最佳实践》\n\n\n","slug":"angular/angular-collect","published":1,"updated":"2016-04-04T08:47:48.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgil0000tstzxiyyat9x"},{"title":"优乐健身移动端页面制作总结","date":"2016-03-12T13:50:42.000Z","_content":"# 项目介绍\n该项目是优乐健身的移动端页面。网站要求字体和边距做到自适应。因此采用了rem布局。\nrem布局参考资料：\nweb app变革之rem: https://isux.tencent.com/web-app-rem.html\n手机端页面自适应解决方案: http://www.jianshu.com/p/b00cd3506782\n\n# 项目技术点\n## 1、rem布局\nrem布局非常简单，只需要将下面的JavaScript代码放到你的页面中即可。\n```\n(function (doc, win) { \n\tvar docEl = doc.documentElement, resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize', \n\trecalc = function () { \n\tvar clientWidth = docEl.clientWidth; \n\tif (!clientWidth) return; \n\tif(clientWidth>=640){ \n\tdocEl.style.fontSize = '100px'; \n\t}\n\telse{ \n\tdocEl.style.fontSize = 100 * (clientWidth / 640) + 'px'; \n\t}\n\t}; \n\tif (!doc.addEventListener) return; \n\twin.addEventListener(resizeEvt, recalc, false); \n\tdoc.addEventListener('DOMContentLoaded', recalc, false); \n\t})(document, window);\n```\n### 如何使用\n先解释下上面的代码，最核心的意思就是说当页面的宽度超过了640px，html的`font-size`为100px。如果小于640px，则通过`100 * (clientWidth / 640)`计算出页面的`font-size`。这时候便可以在网页中尽情使用rem了。所以涉及到宽度和距离的属性比如`width`、`margin`、`padding`、`font-size`等都可以使用rem作为单位。\n那么设计稿中的px值要怎么转换成rem值呢？\n我们可以将font-size的值设成100px，这样1rem = 100px。如果设计稿中的宽度是30px的话，那么就可以很方便的转换为0.3rem。\n**ps:这里设置宽度为640px是根据设计稿来的，如果你拿到的设计稿是750，那么你就可以将上面的数值改为750。**\n\n### rem布局存在的问题\n**存在的问题**：在生成dom树的时候，底部用js改变html的font-size的话，会造成整个页面重新布局，这样的结果就是导致页面元素因为尺寸改变了而闪烁的情况。在页面类容大的时候，加载时页面会有明显的动态变化，\n**解决办法**： \n* 使用一个全局loading页面，在fontSize计算之后才展示真正的页面\n* 用响应式样式控制最好先用响应式，再用js。具体做法就是用CSS的`@media`根据屏幕初始化一遍html的font-size，然后在再用js计算，这样可以避免页面加载时候出现的闪烁。具体的CSS代码如下面：\n```css\n@media only screen and (max-width: 320px){html{font-size: 9px;} }\n@media only screen and (min-width: 320px) and (max-width: 352px){html{font-size: 10px;} }\n@media only screen and (min-width: 352px) and (max-width: 384px){html{font-size: 11px;} }\n@media only screen and (min-width: 384px) and (max-width: 416px){html{font-size: 12px;} }\n@media only screen and (min-width: 416px) and (max-width: 448px){html{font-size: 13px;} }\n@media only screen and (min-width: 448px) and (max-width: 480px){html{font-size: 14px;} }\n@media only screen and (min-width: 480px) and (max-width: 512px){html{font-size: 15px;} }\n@media only screen and (min-width: 512px) and (max-width: 544px){html{font-size: 16px;} }\n@media only screen and (min-width: 544px) and (max-width: 576px){html{font-size: 17px;} }\n@media only screen and (min-width: 576px) and (max-width: 608px){html{font-size: 18px;} }\n@media only screen and (min-width: 608px) and (max-width: 640px){html{font-size: 19px;} }\n@media only screen and (min-width: 640px){html{font-size: 20px;} }\n\n来源： https://isux.tencent.com/web-app-rem.html\n```     \n* 采取淘宝的[flexible.js](https://github.com/amfe/lib-flexible)方案解决。\n```\n## 2、自定义select框\n如何自定义select框的样式\n## 3、移动端直接拨打电话\n\n```html\n<a href=\"tel://110\">电话</a>\n```\n在`a`标签中使用tel://协议，后面跟着电话号码，就可以实现在移动端拨打电话。","source":"_posts/project-summary-uular.md","raw":"---\ntitle: 优乐健身移动端页面制作总结\ndate: 2016-03-12 21:50:42\ntags: \n- 移动端 \n- rem布局\n---\n# 项目介绍\n该项目是优乐健身的移动端页面。网站要求字体和边距做到自适应。因此采用了rem布局。\nrem布局参考资料：\nweb app变革之rem: https://isux.tencent.com/web-app-rem.html\n手机端页面自适应解决方案: http://www.jianshu.com/p/b00cd3506782\n\n# 项目技术点\n## 1、rem布局\nrem布局非常简单，只需要将下面的JavaScript代码放到你的页面中即可。\n```\n(function (doc, win) { \n\tvar docEl = doc.documentElement, resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize', \n\trecalc = function () { \n\tvar clientWidth = docEl.clientWidth; \n\tif (!clientWidth) return; \n\tif(clientWidth>=640){ \n\tdocEl.style.fontSize = '100px'; \n\t}\n\telse{ \n\tdocEl.style.fontSize = 100 * (clientWidth / 640) + 'px'; \n\t}\n\t}; \n\tif (!doc.addEventListener) return; \n\twin.addEventListener(resizeEvt, recalc, false); \n\tdoc.addEventListener('DOMContentLoaded', recalc, false); \n\t})(document, window);\n```\n### 如何使用\n先解释下上面的代码，最核心的意思就是说当页面的宽度超过了640px，html的`font-size`为100px。如果小于640px，则通过`100 * (clientWidth / 640)`计算出页面的`font-size`。这时候便可以在网页中尽情使用rem了。所以涉及到宽度和距离的属性比如`width`、`margin`、`padding`、`font-size`等都可以使用rem作为单位。\n那么设计稿中的px值要怎么转换成rem值呢？\n我们可以将font-size的值设成100px，这样1rem = 100px。如果设计稿中的宽度是30px的话，那么就可以很方便的转换为0.3rem。\n**ps:这里设置宽度为640px是根据设计稿来的，如果你拿到的设计稿是750，那么你就可以将上面的数值改为750。**\n\n### rem布局存在的问题\n**存在的问题**：在生成dom树的时候，底部用js改变html的font-size的话，会造成整个页面重新布局，这样的结果就是导致页面元素因为尺寸改变了而闪烁的情况。在页面类容大的时候，加载时页面会有明显的动态变化，\n**解决办法**： \n* 使用一个全局loading页面，在fontSize计算之后才展示真正的页面\n* 用响应式样式控制最好先用响应式，再用js。具体做法就是用CSS的`@media`根据屏幕初始化一遍html的font-size，然后在再用js计算，这样可以避免页面加载时候出现的闪烁。具体的CSS代码如下面：\n```css\n@media only screen and (max-width: 320px){html{font-size: 9px;} }\n@media only screen and (min-width: 320px) and (max-width: 352px){html{font-size: 10px;} }\n@media only screen and (min-width: 352px) and (max-width: 384px){html{font-size: 11px;} }\n@media only screen and (min-width: 384px) and (max-width: 416px){html{font-size: 12px;} }\n@media only screen and (min-width: 416px) and (max-width: 448px){html{font-size: 13px;} }\n@media only screen and (min-width: 448px) and (max-width: 480px){html{font-size: 14px;} }\n@media only screen and (min-width: 480px) and (max-width: 512px){html{font-size: 15px;} }\n@media only screen and (min-width: 512px) and (max-width: 544px){html{font-size: 16px;} }\n@media only screen and (min-width: 544px) and (max-width: 576px){html{font-size: 17px;} }\n@media only screen and (min-width: 576px) and (max-width: 608px){html{font-size: 18px;} }\n@media only screen and (min-width: 608px) and (max-width: 640px){html{font-size: 19px;} }\n@media only screen and (min-width: 640px){html{font-size: 20px;} }\n\n来源： https://isux.tencent.com/web-app-rem.html\n```     \n* 采取淘宝的[flexible.js](https://github.com/amfe/lib-flexible)方案解决。\n```\n## 2、自定义select框\n如何自定义select框的样式\n## 3、移动端直接拨打电话\n\n```html\n<a href=\"tel://110\">电话</a>\n```\n在`a`标签中使用tel://协议，后面跟着电话号码，就可以实现在移动端拨打电话。","slug":"project-summary-uular","published":1,"updated":"2016-05-06T15:08:14.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgj90005tstz1v3ogyjp"},{"title":"基于express4.x+mongodb+nodejs的TODO（一）：express+node+mongodb环境搭建","date":"2016-05-25T14:20:01.000Z","_content":"# 前言\n终于要开始学习nodejs了。学习一门新语言或者框架入门的最好的方式就是采用项目驱动学习，这样能快速入门，有代入感。而对于新手而言，最适合入门的项目就是TODO项目。因为通过TODO项目，你可以了解到该语言或者框架对于增、删、改、查是如何操作。熟悉这些操作将有助于你更快地熟悉和进一步学习语言或者框架。这篇文章将介绍如何使用express+nodejs+mongodb进行TODO项目的开发。\n# 功能列表\n* 用户可以添加、编辑以及删除TODO事项\n\n# 环境准备\n本文的开发环境均为windows。\n## Nodejs安装\n>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。\n\nwindows下安装Nodejs非常简单，到官网下载.msi文件安装即可。安装Nodejs的会自动安装NPM。地址：https://nodejs.org/en/\n## express 安装\n### 第一步：全局安装express框架\n>Express 是一种保持最低程度规模的灵活 Node.js Web 应用程序框架，为 Web 和移动应用程序提供一组强大的功能。\n\n```bash\nnpm install -g express\n```\nexpress安装成功之后，如果要通过命令查看express是否安装成功，会提示express不是内部或外部命令(注意：-V需要大写)\n```bash\nexpress -V\n```\n由于最新express框架4.0以上将命令工具分离出来了，你需要单独安装一个命令工具（项目地址:https://github.com/expressjs/generator）\n```bash\nnpm install -g express-generator\n```\n安装完express和express-generator之后，\n便可以成功使用express命令\n### 第二步：创建工程并启动express服务\n首先使用express创建一个名叫todo的工程，`-e`表示使用ejs作为模板引擎\n```bash\nexpress -e todo\n```\n创建工程后，需要进入该工程目录，利用npm install添加依赖\n```bash\ncdtodo\nnpm install\n```\n添加依赖之后，便可以启动该工程，启动成功的工程就已经运行在3000端口上\n```bash\nnpm start\n```\n这时候打开浏览器访问：localhost:3000,出现下面的界面即表示安装成功\n![text](/images/write-a-todo-1.png)\n## mongodb安装\n>MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。是Nosql的一种。\n\n### 第一步：下载\n官网下载地址：https://www.mongodb.com/download-center#community。选择与你操作系统对应的版本进行下载，安装即可。\n### 第二步：配置环境变量\n安装完成后，通过cmd进入到mongodb文件夹（即mongodb在你的电脑的安装文件夹）下的bin文件夹，就可以执行mongodb的命令。但如果每次执行mongdb的命令都要进入到bin文件夹下，岂不是很麻烦。所以我们可以将bin文件夹设置为环境变量。\n下载安装完成后的目录结构如下：将路径`d:/mongodb/bin/`(此路径是你安装mongodb的文件夹路径)，设置为环境变量即可。这样就直接可以命令行使用mongodb的命令，而无需进入到mongodb对应的文件夹。\n![text](/images/write-a-todo-2.png)\n### 第三步：配置mongodb数据库\n创建一个`mongodb.config`文件，用于配置 MongoDB数据库的dbpath（数据库存储路径）和logpath（日志文件存储路径）。为什么要设置这两个路径呢？因为mongodb每次启动服务的时候需要指定数据库存储路径和日志文件存储路径，如果没有指定的话，将无法正常启动数据库。mongodb不仅提供了通过配置文件的方式来设置dbpath和logpath，还可以通过`--dbpath`和`--logpath`的选项来配置路径。我们这里采用config文件的形式。\n`mongodb.config`文件内容如下\n```\n# 这里的路径应该换为你自己的mongodb路径\n##store data here\ndbpath=E:\\mongodb\\data\n \n##all output go here\nlogpath=E:\\mongodb\\log\\mongo.log\n```\n由于安装后的mongodb并不存在data和log这两个文件夹，因此我们需要在mongodb文件夹下手动创建这两个文件夹。不然在启动mongodb服务器的时候会提示找不到这两个文件夹。一切都设置好了之后，我们就可以通过下面的命令来启动mongodb服务器。\n```bash\nmongod.exe --config D:/mongo/mongo.config\n```\n看到下面的输出信息就说明启动mongodb数据库成功了。\n![text](/images/write-a-todo-3.png)\n这时候我们再打开新的命令行窗口，输入`mongo`，就可以看到当前连接的数据库信息\n![text](/images/write-a-todo-4.png)\n### 第四步：添加mongodb到Windows服务\n通过上面的配置和安装我们已经成功安装了mongodb并可以使用了。但是这样还存在着不方便的地方就是，如果你每次要在使用数据库的时候，需要通过`mongod.exe --config D:/mongo/mongo.config`手动启动数据库服务器。不过mongodb已经考虑到这一点了，已经提供了一个选项`--install`，将mongodb添加到Windows Service中。这样我们就可以通过设置Windows Service自动启动代替人工启动。\n执行下面的命令就可以将mongodb添加到Windows服务中：\n```bash\nmongod.exe --config D:/mongo/mongo.config --install\n```\n添加完成后，你就可以在Windows服务中看到\n![text](/images/write-a-todo-5.png)\n到这里你就可以开始捣腾mongodb数据库了。\n","source":"_posts/node/write-todo-with-express-and-mongodb-1.md","raw":"---\ntitle: 基于express4.x+mongodb+nodejs的TODO（一）：express+node+mongodb环境搭建\ndate: 2016-05-25 22:20:01\ntags:\n- nodejs\n---\n# 前言\n终于要开始学习nodejs了。学习一门新语言或者框架入门的最好的方式就是采用项目驱动学习，这样能快速入门，有代入感。而对于新手而言，最适合入门的项目就是TODO项目。因为通过TODO项目，你可以了解到该语言或者框架对于增、删、改、查是如何操作。熟悉这些操作将有助于你更快地熟悉和进一步学习语言或者框架。这篇文章将介绍如何使用express+nodejs+mongodb进行TODO项目的开发。\n# 功能列表\n* 用户可以添加、编辑以及删除TODO事项\n\n# 环境准备\n本文的开发环境均为windows。\n## Nodejs安装\n>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。\n\nwindows下安装Nodejs非常简单，到官网下载.msi文件安装即可。安装Nodejs的会自动安装NPM。地址：https://nodejs.org/en/\n## express 安装\n### 第一步：全局安装express框架\n>Express 是一种保持最低程度规模的灵活 Node.js Web 应用程序框架，为 Web 和移动应用程序提供一组强大的功能。\n\n```bash\nnpm install -g express\n```\nexpress安装成功之后，如果要通过命令查看express是否安装成功，会提示express不是内部或外部命令(注意：-V需要大写)\n```bash\nexpress -V\n```\n由于最新express框架4.0以上将命令工具分离出来了，你需要单独安装一个命令工具（项目地址:https://github.com/expressjs/generator）\n```bash\nnpm install -g express-generator\n```\n安装完express和express-generator之后，\n便可以成功使用express命令\n### 第二步：创建工程并启动express服务\n首先使用express创建一个名叫todo的工程，`-e`表示使用ejs作为模板引擎\n```bash\nexpress -e todo\n```\n创建工程后，需要进入该工程目录，利用npm install添加依赖\n```bash\ncdtodo\nnpm install\n```\n添加依赖之后，便可以启动该工程，启动成功的工程就已经运行在3000端口上\n```bash\nnpm start\n```\n这时候打开浏览器访问：localhost:3000,出现下面的界面即表示安装成功\n![text](/images/write-a-todo-1.png)\n## mongodb安装\n>MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。是Nosql的一种。\n\n### 第一步：下载\n官网下载地址：https://www.mongodb.com/download-center#community。选择与你操作系统对应的版本进行下载，安装即可。\n### 第二步：配置环境变量\n安装完成后，通过cmd进入到mongodb文件夹（即mongodb在你的电脑的安装文件夹）下的bin文件夹，就可以执行mongodb的命令。但如果每次执行mongdb的命令都要进入到bin文件夹下，岂不是很麻烦。所以我们可以将bin文件夹设置为环境变量。\n下载安装完成后的目录结构如下：将路径`d:/mongodb/bin/`(此路径是你安装mongodb的文件夹路径)，设置为环境变量即可。这样就直接可以命令行使用mongodb的命令，而无需进入到mongodb对应的文件夹。\n![text](/images/write-a-todo-2.png)\n### 第三步：配置mongodb数据库\n创建一个`mongodb.config`文件，用于配置 MongoDB数据库的dbpath（数据库存储路径）和logpath（日志文件存储路径）。为什么要设置这两个路径呢？因为mongodb每次启动服务的时候需要指定数据库存储路径和日志文件存储路径，如果没有指定的话，将无法正常启动数据库。mongodb不仅提供了通过配置文件的方式来设置dbpath和logpath，还可以通过`--dbpath`和`--logpath`的选项来配置路径。我们这里采用config文件的形式。\n`mongodb.config`文件内容如下\n```\n# 这里的路径应该换为你自己的mongodb路径\n##store data here\ndbpath=E:\\mongodb\\data\n \n##all output go here\nlogpath=E:\\mongodb\\log\\mongo.log\n```\n由于安装后的mongodb并不存在data和log这两个文件夹，因此我们需要在mongodb文件夹下手动创建这两个文件夹。不然在启动mongodb服务器的时候会提示找不到这两个文件夹。一切都设置好了之后，我们就可以通过下面的命令来启动mongodb服务器。\n```bash\nmongod.exe --config D:/mongo/mongo.config\n```\n看到下面的输出信息就说明启动mongodb数据库成功了。\n![text](/images/write-a-todo-3.png)\n这时候我们再打开新的命令行窗口，输入`mongo`，就可以看到当前连接的数据库信息\n![text](/images/write-a-todo-4.png)\n### 第四步：添加mongodb到Windows服务\n通过上面的配置和安装我们已经成功安装了mongodb并可以使用了。但是这样还存在着不方便的地方就是，如果你每次要在使用数据库的时候，需要通过`mongod.exe --config D:/mongo/mongo.config`手动启动数据库服务器。不过mongodb已经考虑到这一点了，已经提供了一个选项`--install`，将mongodb添加到Windows Service中。这样我们就可以通过设置Windows Service自动启动代替人工启动。\n执行下面的命令就可以将mongodb添加到Windows服务中：\n```bash\nmongod.exe --config D:/mongo/mongo.config --install\n```\n添加完成后，你就可以在Windows服务中看到\n![text](/images/write-a-todo-5.png)\n到这里你就可以开始捣腾mongodb数据库了。\n","slug":"node/write-todo-with-express-and-mongodb-1","published":1,"updated":"2016-05-25T14:28:00.860Z","_id":"ciomyqgje000atstze16gwq2y","comments":1,"layout":"post","photos":[],"link":""},{"title":"如何在安卓和iOS中清除微信浏览器的缓存","date":"2016-04-07T13:26:49.000Z","_content":"在做微信移动页面开发时，若需要清除缓存，对于Android和iOS平台的清除方法如下：\n# iOS\niOS的微信浏览器中自带刷新按钮。点击微信右上角的菜单->刷新，，即可刷新页面实现清除缓存。\n# Android\n不得不说，Android平台比较坑，没有刷新按钮。关掉应用再开启也不能保证百分百清除缓存。\n对于 Android 版微信，目前微信自动使用了 QQ浏览器的 X5 内核，如果上述方法不可以清掉缓存，可以执行如下操作：\n1、在任意聊天窗口发送：http://debugx5.qq.com\n2、打开这个网址，找到清理缓存，点击清除即可。\n![](http://7xr6yj.com1.z0.glb.clouddn.com/wechat-clean-cache.jpg)\n","source":"_posts/mobile/wechat-clean-cache.md","raw":"---\ntitle: 如何在安卓和iOS中清除微信浏览器的缓存\ndate: 2016-04-07 21:26:49\ntags:\n- 微信\n- 移动端\n---\n在做微信移动页面开发时，若需要清除缓存，对于Android和iOS平台的清除方法如下：\n# iOS\niOS的微信浏览器中自带刷新按钮。点击微信右上角的菜单->刷新，，即可刷新页面实现清除缓存。\n# Android\n不得不说，Android平台比较坑，没有刷新按钮。关掉应用再开启也不能保证百分百清除缓存。\n对于 Android 版微信，目前微信自动使用了 QQ浏览器的 X5 内核，如果上述方法不可以清掉缓存，可以执行如下操作：\n1、在任意聊天窗口发送：http://debugx5.qq.com\n2、打开这个网址，找到清理缓存，点击清除即可。\n![](http://7xr6yj.com1.z0.glb.clouddn.com/wechat-clean-cache.jpg)\n","slug":"mobile/wechat-clean-cache","published":1,"updated":"2016-05-06T15:07:55.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgji000dtstz0654bfgn"},{"title":"收集移动端代码","date":"2016-02-29T13:44:05.000Z","_content":"收集了移动端的一些代码，持续更新。\n<!-- more -->\n## 1、input输入框更改placeholder样式\n```cpp\n/* webkit solution*/\ninput :: -webkit-input-placeholder {\n    text-align: center;\n    color: #333;\n}\n/* mozilla solution*/\ninput:-moz-placeholder{\n    text-align: center;\n    color: #333;\n}\n```\n## 2、iOS系统去除input输入框自带的内阴影\n```cpp\ninput{\n    -webkit-appearance: none;\n}\n```\n### 3、去除数字输入框的小三角\n```cpp\n/* webkit*/\ninput::-webkit-outer-spin-button,\ninput:: -webkit-inner-spin-button{\n   -webikt-appearance: none;\n}\n/*mozilla */\ninput[type=\"numer\"]{\n    -moz-appearance: textfield;\n}\n```\n### 4、手机网页中点击链接自动拨打电话\n```\n<a href=”tel://110 ”>电话</a>\n```\n","source":"_posts/mobile/mobile-collect.md","raw":"---\ntitle: 收集移动端代码\ndate: 2016-02-29 21:44:05\ntags: 移动端\n---\n收集了移动端的一些代码，持续更新。\n<!-- more -->\n## 1、input输入框更改placeholder样式\n```cpp\n/* webkit solution*/\ninput :: -webkit-input-placeholder {\n    text-align: center;\n    color: #333;\n}\n/* mozilla solution*/\ninput:-moz-placeholder{\n    text-align: center;\n    color: #333;\n}\n```\n## 2、iOS系统去除input输入框自带的内阴影\n```cpp\ninput{\n    -webkit-appearance: none;\n}\n```\n### 3、去除数字输入框的小三角\n```cpp\n/* webkit*/\ninput::-webkit-outer-spin-button,\ninput:: -webkit-inner-spin-button{\n   -webikt-appearance: none;\n}\n/*mozilla */\ninput[type=\"numer\"]{\n    -moz-appearance: textfield;\n}\n```\n### 4、手机网页中点击链接自动拨打电话\n```\n<a href=”tel://110 ”>电话</a>\n```\n","slug":"mobile/mobile-collect","published":1,"updated":"2016-03-12T14:09:51.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgjn000htstztdnj89yv"},{"title":"JavaScript的数组详解","date":"2016-05-07T16:12:54.000Z","_content":"# 前言\n在一篇文章中看到学习技术一般两种方法论，一是项目驱动，狼吞虎咽般吸收知识，不过多关注细节；另外一种是求知驱动，反刍过程，在这个过程中，不应该放过任何你有疑问的知识。深究下去，搞明白具体是怎么回事，然后总结，分享。\n本着这个行为准则，上个礼拜在写代码中遇到了两个关于数组方法的问题，一时没有想起来，于是重新翻开犀牛书，重新复习、查缺补漏。\n# 学习前的提问\n1. 如何创建数组\n2. 数组的读和写\n3. 什么是稀疏数组、稠密数组\n4. 如何添加和删除数组元素\n5. 如何遍历数组\n6. ECMAScript3中的数组方法\n7. ECMAScript5中的数组方法\n\n## 创建数组\n##### 数组字面量\n通过数组字面量创建数组，只需要在方括号中将数组元素用逗号隔开即可。\n```javascript\nvar empty = [];\nvar array1 = [1,2,3,4,5];\nvar array2 =[,,];    //数组有2个元素，都是undefined，逗号数等于数组个数\n```\n##### 调用Array()构造函数\n调用构造函数可传入参数或者不传入参数\n* 不传入参数\n```javascript\nvar arr1 = new Array();\n```\n* 传入一个数值，指定数组长度\n```javascript\nvar arr2 = new Array(5);\n```\n* 显示指定两个或者多个数组元素或者数组的一个非数值元素\n```javascript\nvar arr2 = new Array(1,2,2,3,'test');\n```\n以这种方式，构造函数的参数将会成为数组的元素。使用数组字面量创建函数会比这种方式来得简单。\n## 数组元素的读和写\n数组可以通过**数组下标索引**来获取和设置数组元素的值。\n```javascript\n;\n(function() {\n    var underf = ['name', 2, 4];\n    console.log(underf[0]);    //name\n    console.log(underf[1]);    //2\n    console.log(underf[2]);    //4\n    console.log(underf[3]);    //undefined\n})();\n```\n其中当我们试图去访问一个不存在的下标的时候，数组并不会报错，而只是返回undefined。出现这种情况的原因是什么呢？让我们再来看个例子：\n```javascript\n;\n(function() {\n    var underf = ['name', 2, 4];\n    underf[-1.23] = 'name';\n    console.log(underf[-1.23]);    //name\n    console.log(underf.length);    //3    \n})();\n```\n当我们使用了不是非负整数的下标时，数组会将其当做一个常规的属性，而不是一个数组的元素。这是因为数组本身就是特殊的对象。下标索引本质也是一种对象的属性名。只不过当下标索引处于0~2的32次方-2的非负整数时，它才是数组的索引，通过下标索引设置数组的值的时候，数组才会自动更新其长度length的值。其余数字的都会被当做属性来对待。\n上面的这个例子中，\n`underf[-1.23] = 'name';`由于不是索引，所以将会创建一个名为\"-1.23\"值为\"name\"的属性。而此时数组的长度是不会发生变化的，因此\n`underf.lenght`的值依然为3\n之所以会出现这种情况，是因为数组本身就是对象的特殊形式。对象可以通过方括号的方式来访问属性，数组也可以。事实上数组的索引仅仅是对象属性名的一种特殊类型，这意味着JavaScript数组没有其他语言如Java中“越界”的概念。当试图查询任何对象中不存在的属性时，不会报错，只会得到undefined的值。\n\n## 稀疏数组\n**稀疏数组就是包含从0开始的不连续的索引的数组**。通常数组的length属性值代表数组中元素的个数。如果数组是稀疏的，那么length的属性值一个大于数组中元素的个数。\n可以通过Array(）构造函数和delete操作符创建或者生成稀疏数组。如下面的例子：\n```javascript\n    var arr1 = new Array(100);    //创建一个没有元素的数组，但是length为100\n    var arr2 = [];    //创建一个空的数组，length = 0\n    arr2[100] = 10;    //添加一个元素，但是设置length = 101\n    console.log(arr1.length);    //100\n    console.log(arr2.length);    //101\n```\n相反的稠密数组就是指从0开始索引是连续的数组。\n## 如何添加和删除数组元素\n##### 添加元素\n前面已经提到最简单的添加数组元素的方法：为新索引赋值。\n还有其他很多更高效的方法，将在下面详细介绍。\n##### 删除元素\n1、使用delete操作符删除数组元素\n```javascript\n(function() {\n    var underf = [1, 2, 4];\n    delete underf[0];\n    console.log(underf);    //[ , 2, 4 ]\n    console.log(underf.length);    //3\n})();\n```\n使用delete操作符将会产生稀疏数组。也就是原有的下标不变，数组的长度也不变。\n2、为属性赋值undefined\n```javascript\n;\n(function() {\n    var underf = [1, 2, 4];\n    underf[0] = undefined;\n    console.log(underf);    //[ undefined, 2, 4 ]\n    console.log(underf.length);    //3\n})();\n```\n其效果与delete相似，原来的下标依然不变，数组的长度也不会因此改变。\n**推荐使用赋值undefined的做法**，因为这种做法比delete高效。\n\n## 如何遍历数组\n1、for循环。最常用的遍历方法\n```javascript\n    var underf = [1, 2, 4,5,6];\n    for (var i = 0; i < underf.length; i++) {\n        console.log(underf[i]);\n    }\n```\n对于上述的遍历方式有个需要优化的地方，每次循环都要取数组的长度，这样不合理。因此改进了下，将数组长度保存在变量中\n```javascript\n    var underf = [1, 2, 4,5,6];\n    for (var i = 0， len = underf.length; i < len; i++) {\n        console.log(underf[i]);\n    }\n```\n上面的方法是基于数组是稠密数组以及所有数据都是合法数据。如果不是的话，则应该先检测、排除不合法数据。\n如果想要排除null、undefined和不存在的元素\n```javascript\n    var underf = [1, 2, 4,5,6];\n    for (var i = 0， len = underf.length; i < len; i++) {\n        if(!underf[i]) continue;\n        console.log(underf[i]);\n    }\n```\n如果想要排除undefined和不存在的元素\n```javascript\n    var underf = [1, 2, 4,5,6];\n    for (var i = 0， len = underf.length; i < len; i++) {\n        if(a[i] === undefined) continue;\n        console.log(underf[i]);\n    }\n```\n如果只想要排除不存在的元素，可以通过`in`操作符来判断对应的索引是否有元素\n```javascript\n    var underf = [1, 2, 4,5,6];\n    for (var i = 0， len = underf.length; i < len; i++) {\n        if(a[i] in underf) continue;\n        console.log(underf[i]);\n    }\n```\n2、使用ECMAScript5中提供的`forEach()`方法，下面将详细说明\n\n## ECMAScript3定义的数组的方法\n### join()\nArray.join()是数组中的所有元素转化为字符串并连接在一起，**最后返回生成的字符串**。\n```\n(function() {\n    var underf = [1, 2, 4,5,6]; \n   console.log(underf.join(\" \"));\t//1 2 4 5 6\n    console.log(underf.join(\"-\"));\t//1-2-4-5-6\n})();\n```\n### reverse()\nArray.reverse()是将数组的元素颠倒顺序，返回逆序的数组。\n```javascript\nvar arr = [1,2,3];\narr.reverse(arr);\nconsole.log(arr);    //[3,2,1]\n```\n### sort()\nArray.sort()是将数组中的元素排序并返回排序后的数组。当不带参数调用sort()时，数组以字母表顺序排序。\n```javascript\nvar underf = [1, 6, 1,2,3];\n    console.log(underf.sort());    //[ 1, 1, 2, 3, 6 ]\n})();\n```\nps：如果数组包含undefined元素，它们将会被排到数组的尾部。\n如果要自定义排序，需要传入一个比较函数。比较函数的规则是：如果第一个参数应该在前，比较函数应该返回一个小于0的数值。反之，则返回大于0的数值。如果两个值相等，则返回0；\n```\nvar underf = [111, 226, 11,22,33]; \n    console.log(underf.sort());\t//[ 11, 111, 22, 226, 33 ]\n    console.log(underf.sort(function(a,b){\n    \treturn a-b\n    }))\t\t//[ 11, 22, 33, 111, 226 ]\n```\n\n### concat()\nArray.concat()创建并返回一个新的数组，这个数组连接了原来的数组和参数。下面是示例：\n```javascript\n        var arr1 = [111, 226, 11,22,33]; \n    \tvar arr2 = arr1.concat('a');\n    \tconsole.log(arr2);\t//[ 111, 226, 11, 22, 33, 'a' ]\n```\n### slice()\nArray.slice()方法是返回指定数组中的一个片段或子数组。它有两个参数，分别指定了所要截取的片段的开始位置和结束位置（注意这里说的位置都是指下标）。返回的数组包含**第一个参数指定的位置和所有到但不含第二个参数指定的位置之间的所有数组元素**，也就是高数中所说的左闭右开的区间[start, end)。slice()存在以下三种情况\n**1、只有一个参数**\n返回的数组包括从开始位置到数组结尾的所有元素\n```javascript\n    var arr1 = [1, 2, 3, 4, 5, 6, 7];\n    var arr2 = arr1.slice(2);\n    console.log(arr2); //[ 3, 4, 5, 6, 7 ]\n```\n**2、两个参数都是整数**\n正常返回开始位置到结束位置所有的数组元素。如果第二个参数的位置超出数组长度，则效果等同于**只有一个参数**的情况，返回的是从开始位置到数组结尾的所有元素。\n```javascript\n    var arr1 = [1, 2, 3, 4, 5, 6, 7];\n    var arr2 = arr1.slice(2, 9);\n    var arr3 = arr1.slice(0,2);    //[1, 2]\n    console.log(arr2); //[ 3, 4, 5, 6, 7 ]\n```\n**3、参数带有负数**\n如果参数出现负数了，它表示**相对于数组中最后一个元素的位置**。比如-1指定了最后一个元素，-2指定了倒数第二个元素，-3指定了倒数第三个元素。\n```javascript\n    var arr1 = [1, 2, 3, 4, 5, 6, 7];\n    var arr2 = arr1.slice(0,-4);\n    console.log(arr2); //[ 1, 2, 3 ]\n\n    var arr3 = arr1.slice(0,-1);\n    console.log(arr3); //[ 1, 2, 3, 4, 5, 6 ]\n\n    var arr4 = arr1.slice(-3,-1);\n    console.log(arr4); //[ 5, 6]\n```\n\n### splice()\nArray.splice()是在数组中插入或删除的通用方法，这个方法可能是最强大的数组方法。它是会修改原来的数组，在插入或者删除点之后的数组元素会根据需要增加或减小它们的索引值，因此数组的其他部分仍然保持连续的。splice()返回的是包含删除元素的数组，如果没有删除任何元素，则返回一个空数组。\nspilce(index, num, aruments)，它有三个参数。分别是删除或插入的起始位置，删除的个数，要插入的数组元素。这么说似乎体现不出它的强大。我们可以从它的三个功能来学习它：\n##### 删除\n可以删除任意数量的项，只需要提供2个参数：要删除的第一项的位置和要删除的项数。\n例如：splice(0, 2)就会删除数组前两项。\n##### 插入\n可以向指定位置插入任意数量的项，只需提供3个参数：起始位置，0（要删除的项为0）和要插入的项。如果要插入多项，可以再传入第4个、第5个参数，以至任意多项。\n例如：splice(1, 0, 1,1,1,1)，就会往数组的第一个位置开始，插入4个1\n##### 替换\n可以向指定位置插入任意数量的项，且同时删除任意数量的项，实现替换的功能。只需要传入3个参数，起始位置，要删除的项数和要插入的任意数量的项。\n\n### push()和pop()\nJavaScript提供了push()和pop()两个方法，让数组拥有类似栈的功能（先入先出）。\npush()方法是在数组尾部添加一个或者多个元素，**并返回数组的新长度**。\npop()方法则相反，它删除数组的最后一个元素，**减小数组的长度并返回删除的值**。\n这两个方法都修改原来的数组。组合使用push()和pop()方法，就能够用JavaScript数组实现先进先出的栈。\n\n### shift()和unshift()\n这两个方法与push()和pop()类似，只不过它们是在数组的头部进行添加和删除操作。\nunshift()在数组的头部添加一个或多个元素，并将已存在的元素移动到更高索引的位置来获得足够的空间，**最后返回数组新长度**。\nshift()删除数组第一个元素并返回，然后把所有随后的元素下移一个位置，来填补数组头部的空缺。\n需要注意的是，当unshift()拥有多个参数时，参数时一次性插入到数组中，而非一个个插入的。所以插入的元素在元素中的顺序和它们在参数列表中的顺序是一样的。\n## toString()和toLocalString()\n这两个都是将数组的每个元素转换为字符串输出，保留逗号。和不加参数的join()一样。\n区别的是toLocalString()是toString()的本地化版本。\n## ECMAScript5中的数组方法 \nECMAScript5定义了9个新的数组方法来遍历、映射、过滤、检测、简化和搜索数据。\n这9个方法的第一个参数接收一个函数，并且对数组的每个元素调用一次该函数。在大多数情况下这个函数有三个参数：数组元素(value), 索引(index), 数组本身(array)。这些方法本身不会修改原始数组，但传递给这些方法的函数时可以修改原始数组。\n##### forEach()\nforEach()方法从头到尾遍历数组，为每个函数调用指定的函数。该方法没有返回值。\n```javascript\n    var arr1 = [1, 2, 3, 4, 5, 6, 7];\n    var sum = 0;\n    arr1.forEach(function(value) { //遍历数组将每个元素的值累加到sum\n        sum += value;\n    });\n    console.log(sum); //28\n\n    arr1.forEach(function(value, index, arry){\t//对数组的每个元素累加\n    \tarry[index] = value+2;\n    })\n    console.log(arr1);\t//[ 3, 4, 5, 6, 7, 8, 9 ]\n```\n##### map()\nmap()方法将调用的数组的每个元素传递给指定的函数，**并返回每次函数调用的结果组成的数组**，并不会修改原始数组。如果原始数组是稀疏数组，那么map()方法返回的也是稀疏数组，返回的数组具有相同的长度，相同的缺失元素。\n```javascript\n    var arr2 = [1, 2, 3, 4, 5, 6];\n    var arr3 = arr2.map(function(value) {\n        return value + value;\n    })\n    console.log(arr3);    //[ 2, 4, 6, 8, 10, 12 ]\n```\n\n##### filter()\n这个方法顾名思义，就是起到类似过滤器的作用。它用来对数组的每一项元素运行给定的函数（这个函数是用来执行逻辑判断的，返回true或者false），然后返回符合该函数判断逻辑的元素所构成的数组。\n```javascript\n    var arr4 = [1,2,3,4,5,6,7];\n    var arr4New = arr4.filter(function(value){\n    \treturn value > 4;\n    })\n    console.log(arr4New);\t//[ 5, 6, 7 ]    //返回数组中所有大于4的元素\n```\n##### every()和some()\n这两个方法是数组的逻辑判定：它们对数组元素应用指定的函数进行判定，返回true或者false。它们就像数学中的所有量词和存在量词。every()指数组所有的元素都满足判定函数才返回true。而some()指当数组中至少存在一个元素满足判定函数时返回true，而且当且仅当数组中的所有元素都不满足判定函数时才返回false；\n\n##### reduce()和reduceRight()\n这两个缩小数组的方法都会遍历数组的所有项，然后构建一个最终返回的值。区别的是，reduce()方法**从数组的第一个项开始，逐个遍历到最后**，而reduceRight()**从数组的最后一个项开始，向前遍历到第一项**。\nreduce()和reduceRight()都需要两个参数。第一个参数是 每个项执行化简操作的函数。第二个参数为可选项，是传递一个给函数的初始值。**对于非空数组，如果第二个参数没有指定，那么将使用数组的第一个元素作为初始值**\n比如想要对一个数组的元素求和与求积：\n```javascript\nvar arry = [1,2,3,4,5];\n//对数组的元素进行求和，第二个参数初始值可以为0\nvar sum = arrr.reduce(function(x, y){\n\treturn x+y;\n},0)\n\n//对数组元素进行求积，所以第二个参数要为1\nvar sum1 = arry.reduce(function(x, y){\n\treturn x*y;\n}, 1)\n```\n其中第一个参数也就是每个项都调用的函数接受4个参数：\n* 第一个参数：到目前为止的化简操作累积的结果。当第一次调用函数时，第一个函数是**初始值**\n* 第二个参数：当前值\n* 第三个参数：项的索引\n* 第四个参数：数组对象\n##### indexOf()和lastIndexOf()\n这两个方法是搜索给定的元素在数组中的位置，如果找到则返回该元素在数组中的位置，如果找不到则返回-1。如果存在多个相同值的元素，则返回第一次找到的元素的位置。\n这两个方法都接受两个参数：\n* 要查找的项\n* 查找起点位置的索引（可选）\n两个方法的区别在于：indexOf()是从数组的开头向后查找，而lastIndexOf()则是从数组的末尾向前开始查找。\n```javascript\nvar arry = [1,2,3,4,5,1];\nconsole.log(arry.indexOf(1));\t\t//a[0]=1\nconsole.log(arry.lastIndexOf(1));\t//a[5]=1\nconsole.log(arry.indexOf(8));\t\t//-1 没有该元素\n```\n那么问题来了，如果我们想要知道查找所有指定值在数组中的位置而不仅仅是第一个元素的位置，可以怎么做呢？\n我们可以利用indexOf()的第二个参数（查找起点位置的索引）来完成。\n```javascript\nfunction findAll(arry, x){\n\tvar results = [],\n\tlength = arry.length,\n\tpos=0;\n\twhile(pos<length){\n\t\tpos = arry.indexOf(x, pos);\n\t\tif(pos == -1){\n\t\t\tbreak;\n\t\t}\n\t\tresults.push(pos);\n\t\tpos++;\n\t}\n\treturn results;\n}\nvar arry = [1,2,3,1,1,4,5,1];\nconsole.log(findAll(arry,1));\t//[ 0, 3, 4, 7 ]\n```\n我们通过遍历数组，每个将找到元素的位置存入到数组中，下一次查找的起点位置就从上次的元素的位置开始。这样就记录下所有符号条件的元素的位置了。\n\n## 总结\nJavaScript中除了Object之外，Array引用类型恐怕是最常用的类型了。在没有深入学习之前，总是觉得数组不就那么一回事，so easy，根本不值得我花时间去仔细认真地学习。然而事实并不是这样的。这篇文章结束之后才认识到，之前对数组的认识是有多皮毛，很多关于数组各种方法的使用，注意点我一点都不知道。幸亏，我花时间学了下来了。以后要引以为戒，学习是个循序渐进的过程，是一步一个脚印的过程。戒骄戒躁，静心学习。","source":"_posts/javascript-array.md","raw":"---\ntitle: JavaScript的数组详解\ndate: 2016-05-08 00:12:54\ntags:\n- Javascript\n- Javascript学习笔记\n---\n# 前言\n在一篇文章中看到学习技术一般两种方法论，一是项目驱动，狼吞虎咽般吸收知识，不过多关注细节；另外一种是求知驱动，反刍过程，在这个过程中，不应该放过任何你有疑问的知识。深究下去，搞明白具体是怎么回事，然后总结，分享。\n本着这个行为准则，上个礼拜在写代码中遇到了两个关于数组方法的问题，一时没有想起来，于是重新翻开犀牛书，重新复习、查缺补漏。\n# 学习前的提问\n1. 如何创建数组\n2. 数组的读和写\n3. 什么是稀疏数组、稠密数组\n4. 如何添加和删除数组元素\n5. 如何遍历数组\n6. ECMAScript3中的数组方法\n7. ECMAScript5中的数组方法\n\n## 创建数组\n##### 数组字面量\n通过数组字面量创建数组，只需要在方括号中将数组元素用逗号隔开即可。\n```javascript\nvar empty = [];\nvar array1 = [1,2,3,4,5];\nvar array2 =[,,];    //数组有2个元素，都是undefined，逗号数等于数组个数\n```\n##### 调用Array()构造函数\n调用构造函数可传入参数或者不传入参数\n* 不传入参数\n```javascript\nvar arr1 = new Array();\n```\n* 传入一个数值，指定数组长度\n```javascript\nvar arr2 = new Array(5);\n```\n* 显示指定两个或者多个数组元素或者数组的一个非数值元素\n```javascript\nvar arr2 = new Array(1,2,2,3,'test');\n```\n以这种方式，构造函数的参数将会成为数组的元素。使用数组字面量创建函数会比这种方式来得简单。\n## 数组元素的读和写\n数组可以通过**数组下标索引**来获取和设置数组元素的值。\n```javascript\n;\n(function() {\n    var underf = ['name', 2, 4];\n    console.log(underf[0]);    //name\n    console.log(underf[1]);    //2\n    console.log(underf[2]);    //4\n    console.log(underf[3]);    //undefined\n})();\n```\n其中当我们试图去访问一个不存在的下标的时候，数组并不会报错，而只是返回undefined。出现这种情况的原因是什么呢？让我们再来看个例子：\n```javascript\n;\n(function() {\n    var underf = ['name', 2, 4];\n    underf[-1.23] = 'name';\n    console.log(underf[-1.23]);    //name\n    console.log(underf.length);    //3    \n})();\n```\n当我们使用了不是非负整数的下标时，数组会将其当做一个常规的属性，而不是一个数组的元素。这是因为数组本身就是特殊的对象。下标索引本质也是一种对象的属性名。只不过当下标索引处于0~2的32次方-2的非负整数时，它才是数组的索引，通过下标索引设置数组的值的时候，数组才会自动更新其长度length的值。其余数字的都会被当做属性来对待。\n上面的这个例子中，\n`underf[-1.23] = 'name';`由于不是索引，所以将会创建一个名为\"-1.23\"值为\"name\"的属性。而此时数组的长度是不会发生变化的，因此\n`underf.lenght`的值依然为3\n之所以会出现这种情况，是因为数组本身就是对象的特殊形式。对象可以通过方括号的方式来访问属性，数组也可以。事实上数组的索引仅仅是对象属性名的一种特殊类型，这意味着JavaScript数组没有其他语言如Java中“越界”的概念。当试图查询任何对象中不存在的属性时，不会报错，只会得到undefined的值。\n\n## 稀疏数组\n**稀疏数组就是包含从0开始的不连续的索引的数组**。通常数组的length属性值代表数组中元素的个数。如果数组是稀疏的，那么length的属性值一个大于数组中元素的个数。\n可以通过Array(）构造函数和delete操作符创建或者生成稀疏数组。如下面的例子：\n```javascript\n    var arr1 = new Array(100);    //创建一个没有元素的数组，但是length为100\n    var arr2 = [];    //创建一个空的数组，length = 0\n    arr2[100] = 10;    //添加一个元素，但是设置length = 101\n    console.log(arr1.length);    //100\n    console.log(arr2.length);    //101\n```\n相反的稠密数组就是指从0开始索引是连续的数组。\n## 如何添加和删除数组元素\n##### 添加元素\n前面已经提到最简单的添加数组元素的方法：为新索引赋值。\n还有其他很多更高效的方法，将在下面详细介绍。\n##### 删除元素\n1、使用delete操作符删除数组元素\n```javascript\n(function() {\n    var underf = [1, 2, 4];\n    delete underf[0];\n    console.log(underf);    //[ , 2, 4 ]\n    console.log(underf.length);    //3\n})();\n```\n使用delete操作符将会产生稀疏数组。也就是原有的下标不变，数组的长度也不变。\n2、为属性赋值undefined\n```javascript\n;\n(function() {\n    var underf = [1, 2, 4];\n    underf[0] = undefined;\n    console.log(underf);    //[ undefined, 2, 4 ]\n    console.log(underf.length);    //3\n})();\n```\n其效果与delete相似，原来的下标依然不变，数组的长度也不会因此改变。\n**推荐使用赋值undefined的做法**，因为这种做法比delete高效。\n\n## 如何遍历数组\n1、for循环。最常用的遍历方法\n```javascript\n    var underf = [1, 2, 4,5,6];\n    for (var i = 0; i < underf.length; i++) {\n        console.log(underf[i]);\n    }\n```\n对于上述的遍历方式有个需要优化的地方，每次循环都要取数组的长度，这样不合理。因此改进了下，将数组长度保存在变量中\n```javascript\n    var underf = [1, 2, 4,5,6];\n    for (var i = 0， len = underf.length; i < len; i++) {\n        console.log(underf[i]);\n    }\n```\n上面的方法是基于数组是稠密数组以及所有数据都是合法数据。如果不是的话，则应该先检测、排除不合法数据。\n如果想要排除null、undefined和不存在的元素\n```javascript\n    var underf = [1, 2, 4,5,6];\n    for (var i = 0， len = underf.length; i < len; i++) {\n        if(!underf[i]) continue;\n        console.log(underf[i]);\n    }\n```\n如果想要排除undefined和不存在的元素\n```javascript\n    var underf = [1, 2, 4,5,6];\n    for (var i = 0， len = underf.length; i < len; i++) {\n        if(a[i] === undefined) continue;\n        console.log(underf[i]);\n    }\n```\n如果只想要排除不存在的元素，可以通过`in`操作符来判断对应的索引是否有元素\n```javascript\n    var underf = [1, 2, 4,5,6];\n    for (var i = 0， len = underf.length; i < len; i++) {\n        if(a[i] in underf) continue;\n        console.log(underf[i]);\n    }\n```\n2、使用ECMAScript5中提供的`forEach()`方法，下面将详细说明\n\n## ECMAScript3定义的数组的方法\n### join()\nArray.join()是数组中的所有元素转化为字符串并连接在一起，**最后返回生成的字符串**。\n```\n(function() {\n    var underf = [1, 2, 4,5,6]; \n   console.log(underf.join(\" \"));\t//1 2 4 5 6\n    console.log(underf.join(\"-\"));\t//1-2-4-5-6\n})();\n```\n### reverse()\nArray.reverse()是将数组的元素颠倒顺序，返回逆序的数组。\n```javascript\nvar arr = [1,2,3];\narr.reverse(arr);\nconsole.log(arr);    //[3,2,1]\n```\n### sort()\nArray.sort()是将数组中的元素排序并返回排序后的数组。当不带参数调用sort()时，数组以字母表顺序排序。\n```javascript\nvar underf = [1, 6, 1,2,3];\n    console.log(underf.sort());    //[ 1, 1, 2, 3, 6 ]\n})();\n```\nps：如果数组包含undefined元素，它们将会被排到数组的尾部。\n如果要自定义排序，需要传入一个比较函数。比较函数的规则是：如果第一个参数应该在前，比较函数应该返回一个小于0的数值。反之，则返回大于0的数值。如果两个值相等，则返回0；\n```\nvar underf = [111, 226, 11,22,33]; \n    console.log(underf.sort());\t//[ 11, 111, 22, 226, 33 ]\n    console.log(underf.sort(function(a,b){\n    \treturn a-b\n    }))\t\t//[ 11, 22, 33, 111, 226 ]\n```\n\n### concat()\nArray.concat()创建并返回一个新的数组，这个数组连接了原来的数组和参数。下面是示例：\n```javascript\n        var arr1 = [111, 226, 11,22,33]; \n    \tvar arr2 = arr1.concat('a');\n    \tconsole.log(arr2);\t//[ 111, 226, 11, 22, 33, 'a' ]\n```\n### slice()\nArray.slice()方法是返回指定数组中的一个片段或子数组。它有两个参数，分别指定了所要截取的片段的开始位置和结束位置（注意这里说的位置都是指下标）。返回的数组包含**第一个参数指定的位置和所有到但不含第二个参数指定的位置之间的所有数组元素**，也就是高数中所说的左闭右开的区间[start, end)。slice()存在以下三种情况\n**1、只有一个参数**\n返回的数组包括从开始位置到数组结尾的所有元素\n```javascript\n    var arr1 = [1, 2, 3, 4, 5, 6, 7];\n    var arr2 = arr1.slice(2);\n    console.log(arr2); //[ 3, 4, 5, 6, 7 ]\n```\n**2、两个参数都是整数**\n正常返回开始位置到结束位置所有的数组元素。如果第二个参数的位置超出数组长度，则效果等同于**只有一个参数**的情况，返回的是从开始位置到数组结尾的所有元素。\n```javascript\n    var arr1 = [1, 2, 3, 4, 5, 6, 7];\n    var arr2 = arr1.slice(2, 9);\n    var arr3 = arr1.slice(0,2);    //[1, 2]\n    console.log(arr2); //[ 3, 4, 5, 6, 7 ]\n```\n**3、参数带有负数**\n如果参数出现负数了，它表示**相对于数组中最后一个元素的位置**。比如-1指定了最后一个元素，-2指定了倒数第二个元素，-3指定了倒数第三个元素。\n```javascript\n    var arr1 = [1, 2, 3, 4, 5, 6, 7];\n    var arr2 = arr1.slice(0,-4);\n    console.log(arr2); //[ 1, 2, 3 ]\n\n    var arr3 = arr1.slice(0,-1);\n    console.log(arr3); //[ 1, 2, 3, 4, 5, 6 ]\n\n    var arr4 = arr1.slice(-3,-1);\n    console.log(arr4); //[ 5, 6]\n```\n\n### splice()\nArray.splice()是在数组中插入或删除的通用方法，这个方法可能是最强大的数组方法。它是会修改原来的数组，在插入或者删除点之后的数组元素会根据需要增加或减小它们的索引值，因此数组的其他部分仍然保持连续的。splice()返回的是包含删除元素的数组，如果没有删除任何元素，则返回一个空数组。\nspilce(index, num, aruments)，它有三个参数。分别是删除或插入的起始位置，删除的个数，要插入的数组元素。这么说似乎体现不出它的强大。我们可以从它的三个功能来学习它：\n##### 删除\n可以删除任意数量的项，只需要提供2个参数：要删除的第一项的位置和要删除的项数。\n例如：splice(0, 2)就会删除数组前两项。\n##### 插入\n可以向指定位置插入任意数量的项，只需提供3个参数：起始位置，0（要删除的项为0）和要插入的项。如果要插入多项，可以再传入第4个、第5个参数，以至任意多项。\n例如：splice(1, 0, 1,1,1,1)，就会往数组的第一个位置开始，插入4个1\n##### 替换\n可以向指定位置插入任意数量的项，且同时删除任意数量的项，实现替换的功能。只需要传入3个参数，起始位置，要删除的项数和要插入的任意数量的项。\n\n### push()和pop()\nJavaScript提供了push()和pop()两个方法，让数组拥有类似栈的功能（先入先出）。\npush()方法是在数组尾部添加一个或者多个元素，**并返回数组的新长度**。\npop()方法则相反，它删除数组的最后一个元素，**减小数组的长度并返回删除的值**。\n这两个方法都修改原来的数组。组合使用push()和pop()方法，就能够用JavaScript数组实现先进先出的栈。\n\n### shift()和unshift()\n这两个方法与push()和pop()类似，只不过它们是在数组的头部进行添加和删除操作。\nunshift()在数组的头部添加一个或多个元素，并将已存在的元素移动到更高索引的位置来获得足够的空间，**最后返回数组新长度**。\nshift()删除数组第一个元素并返回，然后把所有随后的元素下移一个位置，来填补数组头部的空缺。\n需要注意的是，当unshift()拥有多个参数时，参数时一次性插入到数组中，而非一个个插入的。所以插入的元素在元素中的顺序和它们在参数列表中的顺序是一样的。\n## toString()和toLocalString()\n这两个都是将数组的每个元素转换为字符串输出，保留逗号。和不加参数的join()一样。\n区别的是toLocalString()是toString()的本地化版本。\n## ECMAScript5中的数组方法 \nECMAScript5定义了9个新的数组方法来遍历、映射、过滤、检测、简化和搜索数据。\n这9个方法的第一个参数接收一个函数，并且对数组的每个元素调用一次该函数。在大多数情况下这个函数有三个参数：数组元素(value), 索引(index), 数组本身(array)。这些方法本身不会修改原始数组，但传递给这些方法的函数时可以修改原始数组。\n##### forEach()\nforEach()方法从头到尾遍历数组，为每个函数调用指定的函数。该方法没有返回值。\n```javascript\n    var arr1 = [1, 2, 3, 4, 5, 6, 7];\n    var sum = 0;\n    arr1.forEach(function(value) { //遍历数组将每个元素的值累加到sum\n        sum += value;\n    });\n    console.log(sum); //28\n\n    arr1.forEach(function(value, index, arry){\t//对数组的每个元素累加\n    \tarry[index] = value+2;\n    })\n    console.log(arr1);\t//[ 3, 4, 5, 6, 7, 8, 9 ]\n```\n##### map()\nmap()方法将调用的数组的每个元素传递给指定的函数，**并返回每次函数调用的结果组成的数组**，并不会修改原始数组。如果原始数组是稀疏数组，那么map()方法返回的也是稀疏数组，返回的数组具有相同的长度，相同的缺失元素。\n```javascript\n    var arr2 = [1, 2, 3, 4, 5, 6];\n    var arr3 = arr2.map(function(value) {\n        return value + value;\n    })\n    console.log(arr3);    //[ 2, 4, 6, 8, 10, 12 ]\n```\n\n##### filter()\n这个方法顾名思义，就是起到类似过滤器的作用。它用来对数组的每一项元素运行给定的函数（这个函数是用来执行逻辑判断的，返回true或者false），然后返回符合该函数判断逻辑的元素所构成的数组。\n```javascript\n    var arr4 = [1,2,3,4,5,6,7];\n    var arr4New = arr4.filter(function(value){\n    \treturn value > 4;\n    })\n    console.log(arr4New);\t//[ 5, 6, 7 ]    //返回数组中所有大于4的元素\n```\n##### every()和some()\n这两个方法是数组的逻辑判定：它们对数组元素应用指定的函数进行判定，返回true或者false。它们就像数学中的所有量词和存在量词。every()指数组所有的元素都满足判定函数才返回true。而some()指当数组中至少存在一个元素满足判定函数时返回true，而且当且仅当数组中的所有元素都不满足判定函数时才返回false；\n\n##### reduce()和reduceRight()\n这两个缩小数组的方法都会遍历数组的所有项，然后构建一个最终返回的值。区别的是，reduce()方法**从数组的第一个项开始，逐个遍历到最后**，而reduceRight()**从数组的最后一个项开始，向前遍历到第一项**。\nreduce()和reduceRight()都需要两个参数。第一个参数是 每个项执行化简操作的函数。第二个参数为可选项，是传递一个给函数的初始值。**对于非空数组，如果第二个参数没有指定，那么将使用数组的第一个元素作为初始值**\n比如想要对一个数组的元素求和与求积：\n```javascript\nvar arry = [1,2,3,4,5];\n//对数组的元素进行求和，第二个参数初始值可以为0\nvar sum = arrr.reduce(function(x, y){\n\treturn x+y;\n},0)\n\n//对数组元素进行求积，所以第二个参数要为1\nvar sum1 = arry.reduce(function(x, y){\n\treturn x*y;\n}, 1)\n```\n其中第一个参数也就是每个项都调用的函数接受4个参数：\n* 第一个参数：到目前为止的化简操作累积的结果。当第一次调用函数时，第一个函数是**初始值**\n* 第二个参数：当前值\n* 第三个参数：项的索引\n* 第四个参数：数组对象\n##### indexOf()和lastIndexOf()\n这两个方法是搜索给定的元素在数组中的位置，如果找到则返回该元素在数组中的位置，如果找不到则返回-1。如果存在多个相同值的元素，则返回第一次找到的元素的位置。\n这两个方法都接受两个参数：\n* 要查找的项\n* 查找起点位置的索引（可选）\n两个方法的区别在于：indexOf()是从数组的开头向后查找，而lastIndexOf()则是从数组的末尾向前开始查找。\n```javascript\nvar arry = [1,2,3,4,5,1];\nconsole.log(arry.indexOf(1));\t\t//a[0]=1\nconsole.log(arry.lastIndexOf(1));\t//a[5]=1\nconsole.log(arry.indexOf(8));\t\t//-1 没有该元素\n```\n那么问题来了，如果我们想要知道查找所有指定值在数组中的位置而不仅仅是第一个元素的位置，可以怎么做呢？\n我们可以利用indexOf()的第二个参数（查找起点位置的索引）来完成。\n```javascript\nfunction findAll(arry, x){\n\tvar results = [],\n\tlength = arry.length,\n\tpos=0;\n\twhile(pos<length){\n\t\tpos = arry.indexOf(x, pos);\n\t\tif(pos == -1){\n\t\t\tbreak;\n\t\t}\n\t\tresults.push(pos);\n\t\tpos++;\n\t}\n\treturn results;\n}\nvar arry = [1,2,3,1,1,4,5,1];\nconsole.log(findAll(arry,1));\t//[ 0, 3, 4, 7 ]\n```\n我们通过遍历数组，每个将找到元素的位置存入到数组中，下一次查找的起点位置就从上次的元素的位置开始。这样就记录下所有符号条件的元素的位置了。\n\n## 总结\nJavaScript中除了Object之外，Array引用类型恐怕是最常用的类型了。在没有深入学习之前，总是觉得数组不就那么一回事，so easy，根本不值得我花时间去仔细认真地学习。然而事实并不是这样的。这篇文章结束之后才认识到，之前对数组的认识是有多皮毛，很多关于数组各种方法的使用，注意点我一点都不知道。幸亏，我花时间学了下来了。以后要引以为戒，学习是个循序渐进的过程，是一步一个脚印的过程。戒骄戒躁，静心学习。","slug":"javascript-array","published":1,"updated":"2016-05-07T16:16:12.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgjr000jtstzqrh2p617"},{"title":"【你不知道的JavasSript(上)读书笔记】第1章：作用域","date":"2016-03-12T14:11:54.000Z","_content":"该系列是《你不知道的JavaScript（上）》的读书笔记。记录成文字，加深学习印象。\n<!-- more -->\n# 一、JavaScript编译原理\n传统的语言编译一般经历三个过程：\n* 分词/词法分析\n* 解析/语法分析\n* 代码生成\n而JavaScript引擎则要复杂得多了。简单来说就是任何JavaScript代码在执行前都要进行**编译**（通常在代码执行前）。\n# 二、理解作用域\n要理解作用域之前需要了解下什么是作用域，它有什么作用？同时还需要了解JavaScript引擎和编译器是什么？\n* 引擎\n    从头到尾负责整个JavaScript程序的编译及执行过程。\n* 编译器\n    负责语法分析及代码生成\n* 作用域\n   负责收集并维护由所有声明的标识符（及变量）组成的一系列**查询**，并实施一套**规则**，确定当前执行的代码对这些标识符的**访问权限**（简而言之就是规定了谁有权限访问哪些变量）。\n现在以`var a = 2`这个简单的变量命名过程来分析，JavaScript引擎会将其看做两步`var a;`和`a = 2`两步进行。详见下面的流程图\n![JavaScript变量编译流程图](http://7xr6yj.com1.z0.glb.clouddn.com/hexo_JavaScript%E5%8F%98%E9%87%8F%E7%BC%96%E8%AF%91.png)\n总结：变量的赋值操作会执行两个动作，首先编译器会在当前作用域声明一个变量（如果之前没有声明过），然后在运行时引擎会在作用域查找该变量，如果能够找到便对它进行赋值。\n### 关于变量查找的类型\n编译器在编译过程，会对变量进行查询。一种是LHS查询，另外一种查找的类型是RHS。\n* LHS 当变量出现在赋值操作的左侧时进行LHS查询 （赋值操作的目标是谁）\n* RHS 当变量出现在赋值操作的非左侧时，进行RHS查询（谁是赋值操作的源头，取到这个变量的源值）\n试着找出下面的例子各有多少个LHS和RHS\n```javascript\nfunction foo(a){\n    var b = a;\n    return b+a;\n}\nvar c = foo(2);\n```\n_答案在结尾_\n# 三、作用域嵌套\n所谓作用域嵌套就是当一个块或函数嵌套在另外一个块或函数中，就发生了作用域的嵌套。因此在当前作用域无法找到该变量时，就会往外层嵌套作用域中继续寻找，直到找到该变量或者抵达最外层的作用域（也就是全局作用域）为止。\n# 四、异常\n前面提到的LHS和RHS两种查询，如何区分它们是非常重要的一件事。\n因为在变量尚未声明之前，二者的查询行为是不一样的。如下面例子\n```javascript\nfunction foo(a){\n    console.log(b+a);\n    b = a;\n}\nfoo(2);\n```\n想一下，输出的值应该是什么？\n答案：`Uncaught ReferenceError: b is not defined(…)`，结果会报错。因为`b`并没有被定义，因此引擎就抛出`ReferenceError`异常。\n为什么会导致这样的结果呢？这是因为在对变量`b`进行RHS查询的时候，如果在作用域中没有找到该变量，也就是说明这是一个“未声明”的变量，这时候引擎就会抛出`ReferenceError`异常。\n相比较之下，如果是对变量`b`进行LHS查询的时候，如果在全局作用域也没有找到该变量的话，**全局作用域便会自动创建该变量**，前提是在非严格模式下。**这就是LHS和RHS的两种查询类型的区别**。\n同样，在JavaScript中，也有两种异常类型。一种就是刚刚说到的`ReferenceError`，另外一种则是`TypeError`。那这二者有什么区别吗？\n* `ReferenceError`指的是同作用域判别失败相关，简单说就是在作用域找不到该变量。\n* `TypeError`指的是作用域判别成功，但对结果的操作是非法或者不合理的。简单说就是在作用域找到该变量，但是该变量的值不符合。\n\n**前面问题的答案**\nLHS\n* `c=`\n* `a=2`\n* `b=`。\nRHS\n* `foo(2)`\n* `=a`\n* `a`（return的时候要去查找a的值）   \n* `b`（return的时候要去查找b的值）","source":"_posts/javascript/you-donot-konw-javascript-reading-notes.md","raw":"---\ntitle: 【你不知道的JavasSript(上)读书笔记】第1章：作用域\ndate: 2016-03-12 22:11:54\ntags:\n- JavaScript\n- JavaScript学习笔记\n---\n该系列是《你不知道的JavaScript（上）》的读书笔记。记录成文字，加深学习印象。\n<!-- more -->\n# 一、JavaScript编译原理\n传统的语言编译一般经历三个过程：\n* 分词/词法分析\n* 解析/语法分析\n* 代码生成\n而JavaScript引擎则要复杂得多了。简单来说就是任何JavaScript代码在执行前都要进行**编译**（通常在代码执行前）。\n# 二、理解作用域\n要理解作用域之前需要了解下什么是作用域，它有什么作用？同时还需要了解JavaScript引擎和编译器是什么？\n* 引擎\n    从头到尾负责整个JavaScript程序的编译及执行过程。\n* 编译器\n    负责语法分析及代码生成\n* 作用域\n   负责收集并维护由所有声明的标识符（及变量）组成的一系列**查询**，并实施一套**规则**，确定当前执行的代码对这些标识符的**访问权限**（简而言之就是规定了谁有权限访问哪些变量）。\n现在以`var a = 2`这个简单的变量命名过程来分析，JavaScript引擎会将其看做两步`var a;`和`a = 2`两步进行。详见下面的流程图\n![JavaScript变量编译流程图](http://7xr6yj.com1.z0.glb.clouddn.com/hexo_JavaScript%E5%8F%98%E9%87%8F%E7%BC%96%E8%AF%91.png)\n总结：变量的赋值操作会执行两个动作，首先编译器会在当前作用域声明一个变量（如果之前没有声明过），然后在运行时引擎会在作用域查找该变量，如果能够找到便对它进行赋值。\n### 关于变量查找的类型\n编译器在编译过程，会对变量进行查询。一种是LHS查询，另外一种查找的类型是RHS。\n* LHS 当变量出现在赋值操作的左侧时进行LHS查询 （赋值操作的目标是谁）\n* RHS 当变量出现在赋值操作的非左侧时，进行RHS查询（谁是赋值操作的源头，取到这个变量的源值）\n试着找出下面的例子各有多少个LHS和RHS\n```javascript\nfunction foo(a){\n    var b = a;\n    return b+a;\n}\nvar c = foo(2);\n```\n_答案在结尾_\n# 三、作用域嵌套\n所谓作用域嵌套就是当一个块或函数嵌套在另外一个块或函数中，就发生了作用域的嵌套。因此在当前作用域无法找到该变量时，就会往外层嵌套作用域中继续寻找，直到找到该变量或者抵达最外层的作用域（也就是全局作用域）为止。\n# 四、异常\n前面提到的LHS和RHS两种查询，如何区分它们是非常重要的一件事。\n因为在变量尚未声明之前，二者的查询行为是不一样的。如下面例子\n```javascript\nfunction foo(a){\n    console.log(b+a);\n    b = a;\n}\nfoo(2);\n```\n想一下，输出的值应该是什么？\n答案：`Uncaught ReferenceError: b is not defined(…)`，结果会报错。因为`b`并没有被定义，因此引擎就抛出`ReferenceError`异常。\n为什么会导致这样的结果呢？这是因为在对变量`b`进行RHS查询的时候，如果在作用域中没有找到该变量，也就是说明这是一个“未声明”的变量，这时候引擎就会抛出`ReferenceError`异常。\n相比较之下，如果是对变量`b`进行LHS查询的时候，如果在全局作用域也没有找到该变量的话，**全局作用域便会自动创建该变量**，前提是在非严格模式下。**这就是LHS和RHS的两种查询类型的区别**。\n同样，在JavaScript中，也有两种异常类型。一种就是刚刚说到的`ReferenceError`，另外一种则是`TypeError`。那这二者有什么区别吗？\n* `ReferenceError`指的是同作用域判别失败相关，简单说就是在作用域找不到该变量。\n* `TypeError`指的是作用域判别成功，但对结果的操作是非法或者不合理的。简单说就是在作用域找到该变量，但是该变量的值不符合。\n\n**前面问题的答案**\nLHS\n* `c=`\n* `a=2`\n* `b=`。\nRHS\n* `foo(2)`\n* `=a`\n* `a`（return的时候要去查找a的值）   \n* `b`（return的时候要去查找b的值）","slug":"javascript/you-donot-konw-javascript-reading-notes","published":1,"updated":"2016-04-04T07:57:46.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgjw000otstzd60ihkyu"},{"title":"【你不知道的JavasSript(上)读书笔记】第2章：词法作用域","date":"2016-03-14T16:54:54.000Z","_content":"该系列是《你不知道的JavaScript（上）》的读书笔记。记录成文字，加深学习印象。\n<!-- more -->\n# 什么是词法作用域\n词法作用域就是定义在词法阶段的作用域。是不是很难理解呢、换句话说就是，词法作用域意味着**作用域由书写代码时函数的位置**来决定的。如果还不能理解的话，先以一个简单的例子来说明：\n```javascript\n    function fn1(a) {\n        var b = a * 2;\n\n        function fn2(c) {\n        \tconsole.log(a, b, c);\n        }\n        fn2(b * 3);\n    }\n    fn1(2);\t// 2, 4 ,12\n```\n上面这个例子包含着三个作用域\n* 全局作用域\n* fn1的作用域\n* fn2的作用域\n根据它们定义的位置，这三个作用域应该是逐级包含的关系。\n\n如果上面这个例子可以理解的话，那么再来看一个相对复杂一点的例子：\n```javascript\n    function foo() {\n        console.log(a);\n    }\n\n    function bar() {\n        var a = 3;\n        foo();\n    }\n    var a = 2;\n    bar(); // 2\n```\n最终的输出结果是`2`。可能会有人觉得应该输出`3`的，但是为什么却是输出`2`呢？\n根据前面所提到的词法作用域指的是**作用域由书写代码时函数的位置来决定的，而不是代码执行引用的位置**。只要理解了这个概念，就能明白了上面的输出结果了。\n函数`foo`是在全局作用域下定义的，因此它的作用域是属于全局作用域的子作用域。函数`bar`也是一样，属于全局作用域的子作用域。\n虽然函数`foo`在函数`bar`中执行了(二者并不存在父子作用域的关系)，但是函数`fn`此时的父级作用域仍然是全局作用域。因此当引擎执行`console.log(a)`的声明时，会对变量`a`进行RHS查询。引擎在`foo`当前作用域寻找不到`a`，便往上级作用域（对`foo`而言便是全局作用域）寻找，在上级作用域找到了`a=2`，因此就输出了`2`。\n这也就是JavaScript没有动态作用域的原因。如果JavaScript支持动态作用域，那么最后的输出结果应该是`3`，而不是`2`。","source":"_posts/javascript/you-donot-konw-javascript-reading-notes-2.md","raw":"---\ntitle: 【你不知道的JavasSript(上)读书笔记】第2章：词法作用域\ndate: 2016-03-15 00:54:54\ntags:\n- JavaScript\n- JavaScript学习笔记\n---\n该系列是《你不知道的JavaScript（上）》的读书笔记。记录成文字，加深学习印象。\n<!-- more -->\n# 什么是词法作用域\n词法作用域就是定义在词法阶段的作用域。是不是很难理解呢、换句话说就是，词法作用域意味着**作用域由书写代码时函数的位置**来决定的。如果还不能理解的话，先以一个简单的例子来说明：\n```javascript\n    function fn1(a) {\n        var b = a * 2;\n\n        function fn2(c) {\n        \tconsole.log(a, b, c);\n        }\n        fn2(b * 3);\n    }\n    fn1(2);\t// 2, 4 ,12\n```\n上面这个例子包含着三个作用域\n* 全局作用域\n* fn1的作用域\n* fn2的作用域\n根据它们定义的位置，这三个作用域应该是逐级包含的关系。\n\n如果上面这个例子可以理解的话，那么再来看一个相对复杂一点的例子：\n```javascript\n    function foo() {\n        console.log(a);\n    }\n\n    function bar() {\n        var a = 3;\n        foo();\n    }\n    var a = 2;\n    bar(); // 2\n```\n最终的输出结果是`2`。可能会有人觉得应该输出`3`的，但是为什么却是输出`2`呢？\n根据前面所提到的词法作用域指的是**作用域由书写代码时函数的位置来决定的，而不是代码执行引用的位置**。只要理解了这个概念，就能明白了上面的输出结果了。\n函数`foo`是在全局作用域下定义的，因此它的作用域是属于全局作用域的子作用域。函数`bar`也是一样，属于全局作用域的子作用域。\n虽然函数`foo`在函数`bar`中执行了(二者并不存在父子作用域的关系)，但是函数`fn`此时的父级作用域仍然是全局作用域。因此当引擎执行`console.log(a)`的声明时，会对变量`a`进行RHS查询。引擎在`foo`当前作用域寻找不到`a`，便往上级作用域（对`foo`而言便是全局作用域）寻找，在上级作用域找到了`a=2`，因此就输出了`2`。\n这也就是JavaScript没有动态作用域的原因。如果JavaScript支持动态作用域，那么最后的输出结果应该是`3`，而不是`2`。","slug":"javascript/you-donot-konw-javascript-reading-notes-2","published":1,"updated":"2016-03-17T13:06:33.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgk3000ttstz6q0pwww9"},{"title":"【JavaScript高程学习笔记】面向对象的程序设计之对象","date":"2016-02-25T16:45:53.000Z","_content":"本篇文章是学习《Javascript高级程序设计》中关于对象这一部分的学习笔记。\n<!-- more -->\n# 学习内容\n* 理解并创建对象\n* 理解继承\n# 一、理解对象\n对象本质是一组散列表由key-value值组成。而value可以是数据或者函数。可以使用**对象字面量**方法创建对象。\n```javascript\nvar person = {\n    name: 'superman',\n    age: 29,\n    sayName: function(){\n        alert(this.name);    \n    }\n}\n```\n*对象优化建议：*\n\n* **不使用delete操作符，如需要删除属性，直接对属性进行`null`赋值。因为在FF和chrome中，`null`赋值会快99%。**\n* **不要添加属性。定义好对象后，不要随便给对象添加属性，而是一开始就应该定义好对象的结构。这样的运行速度会快很多（FF快100%，Chrome快89%）。**\n\n# 二、创建对象\n创建对象有以下几种模式：\n* 工厂模式\n* 构造函数模式\n* 原型模式\n* 组合使用构造函数模式和原型模式\n* 动态原型模式\n* 寄生构造函数模式\n* 稳妥构造函数模式\n**要求能熟练掌握每种模式的写法，以及他们之间的区别。**\n## 1、工厂模式\n工厂模式是软件工厂领域一种广为人知的设计模式。特点是抽象了创建具体对象的过程。**工厂模式创建函数的例子**：\n```javascript\n//工厂模式\nfunction createPerson(name,age){\n    var obj = new Object(); //需要显式创建对象，并在最后返回该对象\n    obj.name = name;\n    obj.age = age;\n    obj.sayName = function(){\n            alert(this.name);\n    }\n    return obj; //返回该对象\n}\nvar person = createPerson(); //实例化\n```\n工厂模式解决了创建多个相似对象的问题，却没有解决对象识别的问题(即怎么知道一个对象的类型)。因此出现了构造函数模式。\n## 2、构造函数模式\n就好比Object和Array这种原生的构造函数，可以使用构造函数来创建对象。因此也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。**构造函数模式的例子**：\n```javascript\n//构造函数模式\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n    this.sayName = function(){\n        alert(this.name);\n    }\n}\n//实例化\nvar person = new Person();\n```\n*构造函数与工厂模式的区别*\n* 无需显式创建对象；\n* 没有return语句 ；\n* 直接将属性和方法赋给了this对象。\n\n*使用 `new`调用构造函数会经历以下四个步骤*：\n* 创建一个新对象；\n* 将构造函数的作用域赋给新对象（因此this就指向了这个新对象）\n* 执行构造函数中的代码（为这个新对象添加属性）\n* 返回新对象\n\n*构造函数存在的问题*\n使用构造函数时，每个方法都要在每个实例上重新创建一遍。这样会导致创建了多个完成相同任务的function。没有这个必要。因此有了原型模式来解决构造函数所产生的这些问题。\n## 3、原型模式\n我们创建的每个函数都有一个 `prototype(原型)`属性，这个属性是*一个指针，指向一个对象*，而这个对象的用途是包含可以由特定类型的*所有实例共享的属性和方法*。因此为了解决构造函数模式存在的问题，我们可以将通用的方法添加到prototype中，如下面的例子：\n```javascript\n//原型模式\nfunction Person(){\n}\nPerson.prototype = {\n     name : 'superman',\n     age : 29,\n     sayName : function(){\n        alert(this.name);\n    }     \n}\nvar person1 = new Person();\nvar person2 = new Person();\nconsole.log(person1.sayName == person2.sayName); // true\n```\n通过原型模式创建的对象，由于`sayName()`函数是加到`Person.prototype`上，所有的Person对象实例的`sayName()`都是共享的，因此都属于同一个实例。\n*原型对象存在的问题*：\n1、它省略了为构造函数传递初始化参数这一环节，结果所有实例在默认情况下都取得相同的值。\n2、最大的问题是由于其共享的本性所导致的。由于原型中的属性都是被实例共享的，在属性为基本值的时候倒不会产生太大的问题。但如果属性是引用类型的时候，问题就凸显了。以下面的例子说明：\n```javascript\nfuntion Person(){\n}\nPerson.prototype = {\n    constructor: Person,\n    name: 'superman',\n    friends: ['superman', 'spiderman'],\n    sayName : function(){\n        alert(this.name);\n    }  \n};\nvar person1 = new Person();\nvar person2 = new Person();\nperson1.friends.push('Van'); //由于friends方法被所有实例共享，因此任何一个实例操作这个方法，都会影响到所有的实例调用这个方法。\nconsole.log(person1.friends);     //superman, spiderman, Van\nconsole.log(person2.friends);     //superman, spiderman, Van\nconsole.log(person1.friends === person2.friends);  // true;\n```\n这就是原型模式最大的问题。任何实例对原型上的方法进行操作都会影响的到所有实例对该方法的调用。\n因此引入了下面的这种模式：**组合使用构造函数模式和原型模式**\n## 4、组合使用构造函数模式和原型模式\n这种模式是创建自定义类型的最常见方式。构造函数用于定义实例属性，原型模式用于定义方法和共享的属性。这样模式的优点便是，每个实例都会有自己的一份**实例属性的副本**，但同时又**共享着对方法的引用**，**最大限度地节省了内存**。同时这种模式还支持向构造函数传递参数，可谓急两种模式之长。如下面例子：\n```javascript\nfuntion Person(name, age){\n    this.name = name;\n    this.age = age;\n    this.friends = [\"a\", \"b\"];\n}\nPerson.prototype = {\n    constructor: person,\n    sayName: function(){\n        alert(this.name);\n}\n}\n```\n这种构造函数和原型混成的模式，是目前使用最广泛的一种创建自定义类型的方法。\n\n## 5、动态原型模式\n所谓动态原型模式就是**把所有的信息都封装在构造函数中，而通过在构造函数中初始化原型**，又保持了同时使用构造函数和原型的优点。如下面例子：\n```javascript\n function Person(name, age){\n    //属性\n    this.name = name;\n    this.age = age;\n    //方法\n    if(typeof this.sayName !=  \"function\"){ //通过判断某个应该存在的方法是否有效，来决定是否需要初始化原型。\n        Person.prototype.sayName = function(){\n            alert(this.name);\n        }\n    }\n}\nvar friend = new Person('Nicholas', 29);\nfriend.sayName();          //Nicholas\n```\n动态原型模式可谓非常完美！仅在方法不存在时，才会将它添加到原型中。\n## 6、寄生构造函数模式\n写法与工厂模式一模一样，区别是在创建实例的时候，是通过`new`来创建，与构造函数的实例对象方法一致。这种模式可以在特殊情况下用来为对象创建构造函数。如下面例子：我们可以创建一个具有额外特殊方法的特殊数组。\n```javascript\nfunctio SpecialArray(){\n    //创建数组\n    var values = new Array();\n    // 添加值\n    values.push.apply(values, arguments);\n    //添加方法\n    values,toPipedString = funtion(){\n        return this.join(\"|\");\n    }\n    return values;\n}\nvar colors = new SpecialArray(\"red\", \"blue\", \"black\");\nalert(colors,toPipedString());    //\"red|blue|green\"\n```\n## 7、稳妥构造函数模式\n所谓稳妥对象，指的是没有公共属性，而且其方法也不引用this对象。\n稳妥对象适用场景：一些安全环境或者在防止数据被其他应用篡改。如下面例子：\n```javacript\nfunction Person(){   \n    //创建要返回对象\n    var o = new Object();\n    //定义私有变量和函数\n    o.sayName = function(){\n        alert(name);    \n    }\n    return o;\n}\n\nvar person = Person(); //不使用new来实例化对象，跟工厂模式一样\nfriend.sayName();\n```\n\n\n","source":"_posts/javascript/javascript-learning-object.md","raw":"---\ntitle: 【JavaScript高程学习笔记】面向对象的程序设计之对象\ndate: 2016-02-26 00:45:53\ntags: \n- JavaScript学习笔记\n- 面向对象\n- 对象\n---\n本篇文章是学习《Javascript高级程序设计》中关于对象这一部分的学习笔记。\n<!-- more -->\n# 学习内容\n* 理解并创建对象\n* 理解继承\n# 一、理解对象\n对象本质是一组散列表由key-value值组成。而value可以是数据或者函数。可以使用**对象字面量**方法创建对象。\n```javascript\nvar person = {\n    name: 'superman',\n    age: 29,\n    sayName: function(){\n        alert(this.name);    \n    }\n}\n```\n*对象优化建议：*\n\n* **不使用delete操作符，如需要删除属性，直接对属性进行`null`赋值。因为在FF和chrome中，`null`赋值会快99%。**\n* **不要添加属性。定义好对象后，不要随便给对象添加属性，而是一开始就应该定义好对象的结构。这样的运行速度会快很多（FF快100%，Chrome快89%）。**\n\n# 二、创建对象\n创建对象有以下几种模式：\n* 工厂模式\n* 构造函数模式\n* 原型模式\n* 组合使用构造函数模式和原型模式\n* 动态原型模式\n* 寄生构造函数模式\n* 稳妥构造函数模式\n**要求能熟练掌握每种模式的写法，以及他们之间的区别。**\n## 1、工厂模式\n工厂模式是软件工厂领域一种广为人知的设计模式。特点是抽象了创建具体对象的过程。**工厂模式创建函数的例子**：\n```javascript\n//工厂模式\nfunction createPerson(name,age){\n    var obj = new Object(); //需要显式创建对象，并在最后返回该对象\n    obj.name = name;\n    obj.age = age;\n    obj.sayName = function(){\n            alert(this.name);\n    }\n    return obj; //返回该对象\n}\nvar person = createPerson(); //实例化\n```\n工厂模式解决了创建多个相似对象的问题，却没有解决对象识别的问题(即怎么知道一个对象的类型)。因此出现了构造函数模式。\n## 2、构造函数模式\n就好比Object和Array这种原生的构造函数，可以使用构造函数来创建对象。因此也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。**构造函数模式的例子**：\n```javascript\n//构造函数模式\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n    this.sayName = function(){\n        alert(this.name);\n    }\n}\n//实例化\nvar person = new Person();\n```\n*构造函数与工厂模式的区别*\n* 无需显式创建对象；\n* 没有return语句 ；\n* 直接将属性和方法赋给了this对象。\n\n*使用 `new`调用构造函数会经历以下四个步骤*：\n* 创建一个新对象；\n* 将构造函数的作用域赋给新对象（因此this就指向了这个新对象）\n* 执行构造函数中的代码（为这个新对象添加属性）\n* 返回新对象\n\n*构造函数存在的问题*\n使用构造函数时，每个方法都要在每个实例上重新创建一遍。这样会导致创建了多个完成相同任务的function。没有这个必要。因此有了原型模式来解决构造函数所产生的这些问题。\n## 3、原型模式\n我们创建的每个函数都有一个 `prototype(原型)`属性，这个属性是*一个指针，指向一个对象*，而这个对象的用途是包含可以由特定类型的*所有实例共享的属性和方法*。因此为了解决构造函数模式存在的问题，我们可以将通用的方法添加到prototype中，如下面的例子：\n```javascript\n//原型模式\nfunction Person(){\n}\nPerson.prototype = {\n     name : 'superman',\n     age : 29,\n     sayName : function(){\n        alert(this.name);\n    }     \n}\nvar person1 = new Person();\nvar person2 = new Person();\nconsole.log(person1.sayName == person2.sayName); // true\n```\n通过原型模式创建的对象，由于`sayName()`函数是加到`Person.prototype`上，所有的Person对象实例的`sayName()`都是共享的，因此都属于同一个实例。\n*原型对象存在的问题*：\n1、它省略了为构造函数传递初始化参数这一环节，结果所有实例在默认情况下都取得相同的值。\n2、最大的问题是由于其共享的本性所导致的。由于原型中的属性都是被实例共享的，在属性为基本值的时候倒不会产生太大的问题。但如果属性是引用类型的时候，问题就凸显了。以下面的例子说明：\n```javascript\nfuntion Person(){\n}\nPerson.prototype = {\n    constructor: Person,\n    name: 'superman',\n    friends: ['superman', 'spiderman'],\n    sayName : function(){\n        alert(this.name);\n    }  \n};\nvar person1 = new Person();\nvar person2 = new Person();\nperson1.friends.push('Van'); //由于friends方法被所有实例共享，因此任何一个实例操作这个方法，都会影响到所有的实例调用这个方法。\nconsole.log(person1.friends);     //superman, spiderman, Van\nconsole.log(person2.friends);     //superman, spiderman, Van\nconsole.log(person1.friends === person2.friends);  // true;\n```\n这就是原型模式最大的问题。任何实例对原型上的方法进行操作都会影响的到所有实例对该方法的调用。\n因此引入了下面的这种模式：**组合使用构造函数模式和原型模式**\n## 4、组合使用构造函数模式和原型模式\n这种模式是创建自定义类型的最常见方式。构造函数用于定义实例属性，原型模式用于定义方法和共享的属性。这样模式的优点便是，每个实例都会有自己的一份**实例属性的副本**，但同时又**共享着对方法的引用**，**最大限度地节省了内存**。同时这种模式还支持向构造函数传递参数，可谓急两种模式之长。如下面例子：\n```javascript\nfuntion Person(name, age){\n    this.name = name;\n    this.age = age;\n    this.friends = [\"a\", \"b\"];\n}\nPerson.prototype = {\n    constructor: person,\n    sayName: function(){\n        alert(this.name);\n}\n}\n```\n这种构造函数和原型混成的模式，是目前使用最广泛的一种创建自定义类型的方法。\n\n## 5、动态原型模式\n所谓动态原型模式就是**把所有的信息都封装在构造函数中，而通过在构造函数中初始化原型**，又保持了同时使用构造函数和原型的优点。如下面例子：\n```javascript\n function Person(name, age){\n    //属性\n    this.name = name;\n    this.age = age;\n    //方法\n    if(typeof this.sayName !=  \"function\"){ //通过判断某个应该存在的方法是否有效，来决定是否需要初始化原型。\n        Person.prototype.sayName = function(){\n            alert(this.name);\n        }\n    }\n}\nvar friend = new Person('Nicholas', 29);\nfriend.sayName();          //Nicholas\n```\n动态原型模式可谓非常完美！仅在方法不存在时，才会将它添加到原型中。\n## 6、寄生构造函数模式\n写法与工厂模式一模一样，区别是在创建实例的时候，是通过`new`来创建，与构造函数的实例对象方法一致。这种模式可以在特殊情况下用来为对象创建构造函数。如下面例子：我们可以创建一个具有额外特殊方法的特殊数组。\n```javascript\nfunctio SpecialArray(){\n    //创建数组\n    var values = new Array();\n    // 添加值\n    values.push.apply(values, arguments);\n    //添加方法\n    values,toPipedString = funtion(){\n        return this.join(\"|\");\n    }\n    return values;\n}\nvar colors = new SpecialArray(\"red\", \"blue\", \"black\");\nalert(colors,toPipedString());    //\"red|blue|green\"\n```\n## 7、稳妥构造函数模式\n所谓稳妥对象，指的是没有公共属性，而且其方法也不引用this对象。\n稳妥对象适用场景：一些安全环境或者在防止数据被其他应用篡改。如下面例子：\n```javacript\nfunction Person(){   \n    //创建要返回对象\n    var o = new Object();\n    //定义私有变量和函数\n    o.sayName = function(){\n        alert(name);    \n    }\n    return o;\n}\n\nvar person = Person(); //不使用new来实例化对象，跟工厂模式一样\nfriend.sayName();\n```\n\n\n","slug":"javascript/javascript-learning-object","published":1,"updated":"2016-05-07T16:15:56.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgk7000wtstz04zii0cr"},{"title":"【JavaScript高程学习笔记】面向对象的程序设计之继承","date":"2016-03-05T17:27:43.000Z","_content":"本篇文章是学习《Javascript高级程序设计》中关于继承这一部分的学习笔记。\n<!-- more -->\n#继承\n许多OO语言都支持两种继承方式：接口继承和实现继承。而ECMAScript只支持**实现继承**，而且实现继承主要是依靠原型链来实现的。\n## 一、原型链\nECMAScript中继承的基本思想是利用原型让一个引用类型继承另外一个引用类型的属性和方法。\n让我们简单回顾一下原型、构造函数和实例之间的关系。\n每个构造函数都有一个原型对象`Prototype`，原型对象包含一个指向构造函数的指针，即`constructor`属性，这个属性指向的是`prototype`属性所在的函数（构造函数）。而构造函数的实例则包含一个指向原型对象的内部指针。\n那么如果让原型对象等于另一个类型的实例，则此时原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另外一个构造函数的指针。假如另外一个原型又是另外一个类型的实例，那么上述关系依然成立，如此层层推进，就构成原型链。如下面的例子：\n```javascript\n\tfunction Animal(){ //采用构造函数模式创建对象\n\t\tthis.live = true;\n\t\tthis.run = function(){\n\t\t\tconsole.log('I can run');\n\t\t}\n\t}\n\tAnimal.prototype = {\n\t\tconstructor: Animal,\n\t\teat: function(){\n\t\t\tconsole.log('I can eat');\n\t\t}\n\t}\n\tfunction Human(){\n\t\tthis.isHuman = true;\n\t}\n\tHuman.prototype = new Animal(); //将父类Animal的实例赋给子类Human的原型对象实现继承\n\n\tfunction Boy(){\n\t\tthis.sex = 'boy';\n\t}\n\tBoy.prototype = new Human();\t//将父类Human的实例赋给子类Boy的原型对象实现继承,子类 Boy就继承了Human以及Animal\n\tvar human = new Human();\n\tvar boy = new Boy();\n\tconsole.log(human)\n\tconsole.log(boy);\t// \n\tboy.run();    \t// I can run\n```\n**1、原型链搜索机制**\n从打印结果，如下图所示，可以看出，Boy的继承原型链，Human->Animal->Object（因为所有的对象都继承于Object）。所以Boy对象在执行run()方法的时候，能输出“I can run”的结果。而boy能找到run方法是基于`原型链搜索机制`。当boy调用run()方法时，首先会先在Boy的实例去寻找该方法或者属性。如果找不到该方法或属性，则会继续搜索实例的原型。如果再找不到，就继续往原型的原型寻找。在找不到的情况下，会一直搜索到原型链的末端才会停止，一般是Object对象。\n\n**2、确定原型和实例的关系**\n有两种方式可以确定原型和实例之间的关系。\n* instanceof操作符\n* isPrototypeOf()方法\n```javascript\n        console.log(boy instanceof Object); //true\n\tconsole.log(boy instanceof Animal); //true\n\tconsole.log(boy instanceof Human); //true\n\n\tconsole.log(Object.prototype.isPrototypeOf(boy)); //true\n\tconsole.log(Animal.prototype.isPrototypeOf(boy)); //true\n\tconsole.log(Human.prototype.isPrototypeOf(boy)); //true\n```\n**3、重写父类方法或者添加新方法**\n如果需要重写父类方法或者添加新方法，一定要放在**替换原型的语句之后**，而且在重写父类方法或者添加新方法的时候，**不能使用对象字面量创建**。因为如果使用对象字面量创建，就相当于重新创建了原型链，会导致原有的原型链失效。\n```javascript\n    function Animal(){ //采用构造函数模式创建对象\n\t\tthis.live = true;\n\t\tthis.run = function(){\n\t\t\tconsole.log('I can run');\n\t\t}\n\t}\n\tAnimal.prototype = {\n\t\tconstructor: Animal,\n\t\teat: function(){\n\t\t\tconsole.log('I can eat');\n\t\t}\n\t}\n\tfunction Human(){\n\t\tthis.isHuman = true;\n\t}\n\tHuman.prototype = new Animal(); //将父类Animal的实例赋给子类Human的原型对象实现继承\n\n\tHuman.prototype.eat = function(){\t//重写父类方法，语句要放在原型替换之后。\n\t\tconsole.log(\"I can eat override\");\n\t}\n\n\tHuman.prototype.speak = function(){  //添加新方法，且不能使用对象字面量添加方法\n\t\tconsole.log('Human can speak');\n\t}\n\tHuman.prototype = {\t //不能使用对象字面量添加\n\t\tspeak: function(){  \n\t\tconsole.log('Human can speak');\n\t}\n```\n**4、原型链存在的问题**\n跟之前创建对象的原型模式一样，正是由于原型共享被所有实例共享的特性，导致了在听过原型继承的时候，父类的属性是子类的原型，因此所有子类的实例对父类的属性操作时，都会影响到子类所有实例。如下面例子：\n```javascript\n    function Animal(){ //采用构造函数模式创建对象\n\t\tthis.live = true;\n\t\tthis.gender = [''];\n\t\tthis.run = function(){\n\t\t\tconsole.log('I can run');\n\t\t}\n\t}\n    \tAnimal.prototype = {\n\t\tconstructor: Animal,\n\t\teat: function(){\n\t\t\tconsole.log('I can eat');\n\t\t}\n\t}\n\tfunction Human(){\n\t\tthis.isHuman = true;\n\t}\n\tHuman.prototype = new Animal(); //将父类Animal的实例赋给子类Human的原型对象实现继承\n        var human1 = new Human();\n        var human1 = new Human();\n        human1.gender.push('male');\n        console.log(human2.gender);     //此时输出 male\n```\n这个例子中，human1对父类（即Human的原型）的gender属性添加了一个值“male”,由于原型的共享性，导致了Human的另外一个实例human2调用gender属性输出的值是刚刚human1添加过值的。\n原型链的第二个问题：在创建子类实例的时候，无法在不影响所有子类实例的情况下，向父类的构造函数传递参数。\n## 2、继承的方法\n### 1、借用构造函数\n实现思想：在子类内部调用超类构造函数，使用apply（）和call()\n```\nfunction SuperType(name){\n    this.color = ['red', 'blue', 'white'];\n    this.getName = function(){\n        console.log(name);\n    }\n}\nfunction SubType(){\n    //继承了SuperType\n    SuperType.call(this, 'Superman');\n}\n```\n使用借用构造函数继承可以保证了父类的属性和方法对每个子类而言都是独立的。同时还支持传递参数。\n但是该方法依然存在着问题，由于是通过在子类内部实例化父类构造函数的方式来实现继承，应该函数的复用就无从谈起。而且在父类原型中定义的方法，对于子类而言也是不可见的，结果导致所有类型都只能使用构造函数模式。因此很少单独使用借用构造函数模式。\n\n### 2、组合继承\n组合继承也称伪经典继承，是将借用构造函数和原型链的技术组合到一块。这种方式是最常用的继承模式。\n实现思路：使用原型链对**原型属性**和**原型方法**的继承，而通过借用构造函数来实现对**实例属性**的继承。如下面例子\n```javascript\nfunction SuperType(name){\n    this.name = name;\n    this.colors = ['red', 'blue', 'green'];\n}\nSuperType.prototype.sayName = function(){\n    alert(this.name);\n}\nfunction SubType(name, age){\n    SuperType.call(this, name);\n    this.age = age;\n}\n//继承方法\nSubType.prototype = new SuperType();\n\nSubType.prototype.sayAge = function(){\n    console.log(this.age);\n}\nvar sub1 = new SubType('superman1', '1');\nvar sub2 = new SubType('superman2', '2');\nsub1.colors.push('black');\nconsole.log(sub1.colors);    // ['red', 'blue', 'green', 'black']\nsub1.sayName();    //superman1\n\nsub2.colors.push('green');\nconsole.log(sub2.colors);    // ['red', 'blue', 'green', 'green']\nsub2.sayName();    //superman2\n```\n通过这种方式，即可以让子类的实例分别拥有自己的属性，又可以使用同样的方法。\n### 3、原型式继承\n实现思路：借助原型可以基于已有的对象创建新对象。如下面例子：\n```javascript\nfunction object(o){\n    function F(){\n        F.prototype = o;\n        return new F();\n    }\n}\nvar person = {\n    name: 'superman',\n    age: 22,\n    friends: ['1', '2', '3', '4']\n}\nvar anotherPerson = object(person);\n```\n### 4、寄生式继承\n### 5、寄生组合式继承\n\n\n","source":"_posts/javascript/javascript-inherit.md","raw":"---\ntitle: 【JavaScript高程学习笔记】面向对象的程序设计之继承\ndate: 2016-03-06 01:27:43\ntags:\n- JavaScript学习笔记\n- 面向对象\n- 继承\n---\n本篇文章是学习《Javascript高级程序设计》中关于继承这一部分的学习笔记。\n<!-- more -->\n#继承\n许多OO语言都支持两种继承方式：接口继承和实现继承。而ECMAScript只支持**实现继承**，而且实现继承主要是依靠原型链来实现的。\n## 一、原型链\nECMAScript中继承的基本思想是利用原型让一个引用类型继承另外一个引用类型的属性和方法。\n让我们简单回顾一下原型、构造函数和实例之间的关系。\n每个构造函数都有一个原型对象`Prototype`，原型对象包含一个指向构造函数的指针，即`constructor`属性，这个属性指向的是`prototype`属性所在的函数（构造函数）。而构造函数的实例则包含一个指向原型对象的内部指针。\n那么如果让原型对象等于另一个类型的实例，则此时原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另外一个构造函数的指针。假如另外一个原型又是另外一个类型的实例，那么上述关系依然成立，如此层层推进，就构成原型链。如下面的例子：\n```javascript\n\tfunction Animal(){ //采用构造函数模式创建对象\n\t\tthis.live = true;\n\t\tthis.run = function(){\n\t\t\tconsole.log('I can run');\n\t\t}\n\t}\n\tAnimal.prototype = {\n\t\tconstructor: Animal,\n\t\teat: function(){\n\t\t\tconsole.log('I can eat');\n\t\t}\n\t}\n\tfunction Human(){\n\t\tthis.isHuman = true;\n\t}\n\tHuman.prototype = new Animal(); //将父类Animal的实例赋给子类Human的原型对象实现继承\n\n\tfunction Boy(){\n\t\tthis.sex = 'boy';\n\t}\n\tBoy.prototype = new Human();\t//将父类Human的实例赋给子类Boy的原型对象实现继承,子类 Boy就继承了Human以及Animal\n\tvar human = new Human();\n\tvar boy = new Boy();\n\tconsole.log(human)\n\tconsole.log(boy);\t// \n\tboy.run();    \t// I can run\n```\n**1、原型链搜索机制**\n从打印结果，如下图所示，可以看出，Boy的继承原型链，Human->Animal->Object（因为所有的对象都继承于Object）。所以Boy对象在执行run()方法的时候，能输出“I can run”的结果。而boy能找到run方法是基于`原型链搜索机制`。当boy调用run()方法时，首先会先在Boy的实例去寻找该方法或者属性。如果找不到该方法或属性，则会继续搜索实例的原型。如果再找不到，就继续往原型的原型寻找。在找不到的情况下，会一直搜索到原型链的末端才会停止，一般是Object对象。\n\n**2、确定原型和实例的关系**\n有两种方式可以确定原型和实例之间的关系。\n* instanceof操作符\n* isPrototypeOf()方法\n```javascript\n        console.log(boy instanceof Object); //true\n\tconsole.log(boy instanceof Animal); //true\n\tconsole.log(boy instanceof Human); //true\n\n\tconsole.log(Object.prototype.isPrototypeOf(boy)); //true\n\tconsole.log(Animal.prototype.isPrototypeOf(boy)); //true\n\tconsole.log(Human.prototype.isPrototypeOf(boy)); //true\n```\n**3、重写父类方法或者添加新方法**\n如果需要重写父类方法或者添加新方法，一定要放在**替换原型的语句之后**，而且在重写父类方法或者添加新方法的时候，**不能使用对象字面量创建**。因为如果使用对象字面量创建，就相当于重新创建了原型链，会导致原有的原型链失效。\n```javascript\n    function Animal(){ //采用构造函数模式创建对象\n\t\tthis.live = true;\n\t\tthis.run = function(){\n\t\t\tconsole.log('I can run');\n\t\t}\n\t}\n\tAnimal.prototype = {\n\t\tconstructor: Animal,\n\t\teat: function(){\n\t\t\tconsole.log('I can eat');\n\t\t}\n\t}\n\tfunction Human(){\n\t\tthis.isHuman = true;\n\t}\n\tHuman.prototype = new Animal(); //将父类Animal的实例赋给子类Human的原型对象实现继承\n\n\tHuman.prototype.eat = function(){\t//重写父类方法，语句要放在原型替换之后。\n\t\tconsole.log(\"I can eat override\");\n\t}\n\n\tHuman.prototype.speak = function(){  //添加新方法，且不能使用对象字面量添加方法\n\t\tconsole.log('Human can speak');\n\t}\n\tHuman.prototype = {\t //不能使用对象字面量添加\n\t\tspeak: function(){  \n\t\tconsole.log('Human can speak');\n\t}\n```\n**4、原型链存在的问题**\n跟之前创建对象的原型模式一样，正是由于原型共享被所有实例共享的特性，导致了在听过原型继承的时候，父类的属性是子类的原型，因此所有子类的实例对父类的属性操作时，都会影响到子类所有实例。如下面例子：\n```javascript\n    function Animal(){ //采用构造函数模式创建对象\n\t\tthis.live = true;\n\t\tthis.gender = [''];\n\t\tthis.run = function(){\n\t\t\tconsole.log('I can run');\n\t\t}\n\t}\n    \tAnimal.prototype = {\n\t\tconstructor: Animal,\n\t\teat: function(){\n\t\t\tconsole.log('I can eat');\n\t\t}\n\t}\n\tfunction Human(){\n\t\tthis.isHuman = true;\n\t}\n\tHuman.prototype = new Animal(); //将父类Animal的实例赋给子类Human的原型对象实现继承\n        var human1 = new Human();\n        var human1 = new Human();\n        human1.gender.push('male');\n        console.log(human2.gender);     //此时输出 male\n```\n这个例子中，human1对父类（即Human的原型）的gender属性添加了一个值“male”,由于原型的共享性，导致了Human的另外一个实例human2调用gender属性输出的值是刚刚human1添加过值的。\n原型链的第二个问题：在创建子类实例的时候，无法在不影响所有子类实例的情况下，向父类的构造函数传递参数。\n## 2、继承的方法\n### 1、借用构造函数\n实现思想：在子类内部调用超类构造函数，使用apply（）和call()\n```\nfunction SuperType(name){\n    this.color = ['red', 'blue', 'white'];\n    this.getName = function(){\n        console.log(name);\n    }\n}\nfunction SubType(){\n    //继承了SuperType\n    SuperType.call(this, 'Superman');\n}\n```\n使用借用构造函数继承可以保证了父类的属性和方法对每个子类而言都是独立的。同时还支持传递参数。\n但是该方法依然存在着问题，由于是通过在子类内部实例化父类构造函数的方式来实现继承，应该函数的复用就无从谈起。而且在父类原型中定义的方法，对于子类而言也是不可见的，结果导致所有类型都只能使用构造函数模式。因此很少单独使用借用构造函数模式。\n\n### 2、组合继承\n组合继承也称伪经典继承，是将借用构造函数和原型链的技术组合到一块。这种方式是最常用的继承模式。\n实现思路：使用原型链对**原型属性**和**原型方法**的继承，而通过借用构造函数来实现对**实例属性**的继承。如下面例子\n```javascript\nfunction SuperType(name){\n    this.name = name;\n    this.colors = ['red', 'blue', 'green'];\n}\nSuperType.prototype.sayName = function(){\n    alert(this.name);\n}\nfunction SubType(name, age){\n    SuperType.call(this, name);\n    this.age = age;\n}\n//继承方法\nSubType.prototype = new SuperType();\n\nSubType.prototype.sayAge = function(){\n    console.log(this.age);\n}\nvar sub1 = new SubType('superman1', '1');\nvar sub2 = new SubType('superman2', '2');\nsub1.colors.push('black');\nconsole.log(sub1.colors);    // ['red', 'blue', 'green', 'black']\nsub1.sayName();    //superman1\n\nsub2.colors.push('green');\nconsole.log(sub2.colors);    // ['red', 'blue', 'green', 'green']\nsub2.sayName();    //superman2\n```\n通过这种方式，即可以让子类的实例分别拥有自己的属性，又可以使用同样的方法。\n### 3、原型式继承\n实现思路：借助原型可以基于已有的对象创建新对象。如下面例子：\n```javascript\nfunction object(o){\n    function F(){\n        F.prototype = o;\n        return new F();\n    }\n}\nvar person = {\n    name: 'superman',\n    age: 22,\n    friends: ['1', '2', '3', '4']\n}\nvar anotherPerson = object(person);\n```\n### 4、寄生式继承\n### 5、寄生组合式继承\n\n\n","slug":"javascript/javascript-inherit","published":1,"updated":"2016-05-07T16:15:51.945Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgkf0012tstzf0mt9nyj"},{"title":"深入理解变量声明提升和函数声明提升","date":"2016-03-05T07:08:35.000Z","_content":"最近做题目遇到了关于变量声明提升和函数声明提升的知识点，觉得掌握得不是非常好，因此特地又翻开了犀牛书，重新深入学习，并整理成文章。\n<!-- more -->\n# 变量声明提升\n## 1、变量定义\n可以使用var定义变量，变量如果没有赋值，那变量的初始值为`undefined`。\n## 2、变量作用域\n变量作用域指变量起作用的范围。变量分为全局变量和局部变量。全局变量在全局都拥有定义；而局部变量只能在函数内有效。\n在函数体内，同名的局部变量或者参数的优先级会高于全局变量。也就是说，如果函数内存在和全局变量同名的局部变量或者参数，那么全局变量将会被局部变量覆盖。\n**所有不使用var定义的变量都视为全局变量**\n## 3、函数作用域和声明提前\nJavaScript的函数作用是指在函数内声明的所有变量在函数体内始终是有定义的，也就是说**变量在声明之前已经可用**，所有这特性称为`声明提前（hoisting）`，即JavaScript函数里的所有声明（只是声明，但不涉及赋值）都被提前到函数体的顶部，而变量赋值操作留在原来的位置。如下面例子：\n_注释：`声明提前`是在JavaScript引擎的预编译时进行，是在代码开始运行之前。_\n```javascript\nvar scope = 'global';\nfunction f(){\n    console.log(scope);\n    var scope = 'local';\n    console.log('scope');\n}\n```\n由于函数内声明提升，所以上面的代码实际上是这样的\n```javascript\nvar scope = 'global';\nfunction f(){\n    var scope;    //变量声明提升到函数顶部\n    console.log(scope);\n    scope = 'local';    //变量初始化依然保留在原来的位置\n    console.log(scope);\n}\n```\n经过这样变形之后，答案就就非常明显了。由于scope在第一个console.log(scope)语句之前就已经定义了，但是并没有赋值，因此此时scope的指是`undefined`.第二个console.log(scope)语句之前，scope已经完成赋值为'local'，所以输出的结果是`local`。\n\n# 函数声明提升\n## 1、函数的两种创建方式\n* 函数声明\n* 函数表达式\n\n**函数声明语法**\n```javascript\nf('superman');\nfunction f(name){\n    console.log(name);\n}\n```\n运行上面的程序，控制台能打印出`supemran`。\n**函数表达式语法**\n```javascript\nf('superman');\nvar f= function(name){\n    console.log(name);\n}\n```\n\n运行上面的代码，会报错`Uncaught ReferenceError: f is not defined(…)`,错误信息显示说f没有被定义。\n 为什么同样的代码，函数声明和函数表达式存在着差异呢？\n这是因为，函数声明有一个非常重要的特征：`函数声明提升`，函数声明语句将会被提升到外部脚本或者外部函数作用域的顶部（是不是跟变量提升非常类似）。正是因为这个特征，所以可以把函数声明放在调用它的语句后面。如下面例子，最终的输出结果应该是什么？：\n```javascript    \nvar getName = function(){\n    console.log(2);\n}\nfunction getName (){\n    console.log(1);\n}\ngetName();\n```\n可能会有人觉得最后输出的结果是`1`。让我们来分析一下，这个例子涉及到了`变量声明提升`和`函数声明提升`。正如前面说到的函数声明提升，函数声明`function getName(){}`的声明会被提前到顶部。而函数表达式`var getName = function(){}`则表现出变量声明提升。因此在这种情况下，getName也是一个变量，因此这个变量的声明也将提升到底部，而变量的赋值依然保留在原来的位置。需要注意的是，**函数优先，虽然函数声明和变量声明都会被提升，但是函数会首先被提升，然后才是变量。**因此上面的函数可以转换成下面的样子:\n```javascript\nfunction getName(){    //函数声明提升到顶部\n    console.log(1);\n}\nvar getName;    //变量声明提升\n\ngetName = function(){    //变量赋值依然保留在原来的位置\n    console.log(2);\n}\ngetName();    // 最终输出：2\n```\n所以最终的输出结果是：`2`。在原来的例子中，函数声明虽然是在函数表达式后面，但由于函数声明提升到顶部，因此后面getName又被函数表达式的赋值操作给覆盖了，所以输出`2`。\n\n\n\n\n\n\n\n\n\n","source":"_posts/javascript/javascript-hoisting.md","raw":"---\ntitle: 深入理解变量声明提升和函数声明提升\ndate: 2016-03-05 15:08:35\ntags:\n- JavaScript学习笔记\n---\n最近做题目遇到了关于变量声明提升和函数声明提升的知识点，觉得掌握得不是非常好，因此特地又翻开了犀牛书，重新深入学习，并整理成文章。\n<!-- more -->\n# 变量声明提升\n## 1、变量定义\n可以使用var定义变量，变量如果没有赋值，那变量的初始值为`undefined`。\n## 2、变量作用域\n变量作用域指变量起作用的范围。变量分为全局变量和局部变量。全局变量在全局都拥有定义；而局部变量只能在函数内有效。\n在函数体内，同名的局部变量或者参数的优先级会高于全局变量。也就是说，如果函数内存在和全局变量同名的局部变量或者参数，那么全局变量将会被局部变量覆盖。\n**所有不使用var定义的变量都视为全局变量**\n## 3、函数作用域和声明提前\nJavaScript的函数作用是指在函数内声明的所有变量在函数体内始终是有定义的，也就是说**变量在声明之前已经可用**，所有这特性称为`声明提前（hoisting）`，即JavaScript函数里的所有声明（只是声明，但不涉及赋值）都被提前到函数体的顶部，而变量赋值操作留在原来的位置。如下面例子：\n_注释：`声明提前`是在JavaScript引擎的预编译时进行，是在代码开始运行之前。_\n```javascript\nvar scope = 'global';\nfunction f(){\n    console.log(scope);\n    var scope = 'local';\n    console.log('scope');\n}\n```\n由于函数内声明提升，所以上面的代码实际上是这样的\n```javascript\nvar scope = 'global';\nfunction f(){\n    var scope;    //变量声明提升到函数顶部\n    console.log(scope);\n    scope = 'local';    //变量初始化依然保留在原来的位置\n    console.log(scope);\n}\n```\n经过这样变形之后，答案就就非常明显了。由于scope在第一个console.log(scope)语句之前就已经定义了，但是并没有赋值，因此此时scope的指是`undefined`.第二个console.log(scope)语句之前，scope已经完成赋值为'local'，所以输出的结果是`local`。\n\n# 函数声明提升\n## 1、函数的两种创建方式\n* 函数声明\n* 函数表达式\n\n**函数声明语法**\n```javascript\nf('superman');\nfunction f(name){\n    console.log(name);\n}\n```\n运行上面的程序，控制台能打印出`supemran`。\n**函数表达式语法**\n```javascript\nf('superman');\nvar f= function(name){\n    console.log(name);\n}\n```\n\n运行上面的代码，会报错`Uncaught ReferenceError: f is not defined(…)`,错误信息显示说f没有被定义。\n 为什么同样的代码，函数声明和函数表达式存在着差异呢？\n这是因为，函数声明有一个非常重要的特征：`函数声明提升`，函数声明语句将会被提升到外部脚本或者外部函数作用域的顶部（是不是跟变量提升非常类似）。正是因为这个特征，所以可以把函数声明放在调用它的语句后面。如下面例子，最终的输出结果应该是什么？：\n```javascript    \nvar getName = function(){\n    console.log(2);\n}\nfunction getName (){\n    console.log(1);\n}\ngetName();\n```\n可能会有人觉得最后输出的结果是`1`。让我们来分析一下，这个例子涉及到了`变量声明提升`和`函数声明提升`。正如前面说到的函数声明提升，函数声明`function getName(){}`的声明会被提前到顶部。而函数表达式`var getName = function(){}`则表现出变量声明提升。因此在这种情况下，getName也是一个变量，因此这个变量的声明也将提升到底部，而变量的赋值依然保留在原来的位置。需要注意的是，**函数优先，虽然函数声明和变量声明都会被提升，但是函数会首先被提升，然后才是变量。**因此上面的函数可以转换成下面的样子:\n```javascript\nfunction getName(){    //函数声明提升到顶部\n    console.log(1);\n}\nvar getName;    //变量声明提升\n\ngetName = function(){    //变量赋值依然保留在原来的位置\n    console.log(2);\n}\ngetName();    // 最终输出：2\n```\n所以最终的输出结果是：`2`。在原来的例子中，函数声明虽然是在函数表达式后面，但由于函数声明提升到顶部，因此后面getName又被函数表达式的赋值操作给覆盖了，所以输出`2`。\n\n\n\n\n\n\n\n\n\n","slug":"javascript/javascript-hoisting","published":1,"updated":"2016-03-12T15:50:41.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgkk0017tstzv6nc7g49"},{"title":"【读书笔记】JavaScript闭包的理解","date":"2016-03-19T16:41:34.000Z","_content":"以前一直都不能完全理解闭包的概念，于是就专门学习了下闭包，整理成这篇文章。\n<!-- more -->\n在学习JavaScript中，有一个概念一直困扰着我，它就是**闭包**。今天就彻底学习学习什么是闭包。\n参考资料：\n阮一峰老师的闭包教程: http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n# 为什么会有闭包？\n由于JavaScript的变量作用域的特点，函数内部作用域可以访问外部作用域的变量，而外部作用域却无权访问内部作用域的局部变量。那如果我们想要在函数作用域外访问到函数内部的变量时，该怎么办。\n因此解决的办法就是在函数的内部再创建一个函数，这样就可以在内部函数中访问函数的内部变量，这时候再将内部函数作为返回值的话，那么就可以在函数外去访问到函数的内部变量。这就是**函数的闭包**。\n# 什么是闭包？\n先来看看对于函数的闭包，经典的书籍都是怎么定义的：\n**闭包是指有权访问另外一个函数作用域中的变量的函数。**-----《JavaScript高级程序设计（第3版）》\n**函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中被称为闭包。**-----《JavaScript权威指南（第6版）》\n**当函数可以记住并访问所有的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。**-----《你不知道的JavaScript（上）》\n发现了没有，上面三个关于**闭包**虽然描述的方式不同，但是对闭包定义的本质是相同的：**闭包就是能够读取其他函数内部变量的函数**。\n阮老师将定义更加简洁得定义为：**定义在一个函数内部的函数**（由于在JavaScript中，只有函数内部的子函数才可以读取函数内部的变量）。\n先来看一个简单的例子，清晰地展示了闭包：\n```javascript\nfunction foo(){\n    var a = 2;\n    function bar(){\n        console.log(a);\n    }\n    return bar;\n}\nvar baz = foo();\nbaz.bar();    //2 ——这就是闭包的效果，在foo()函数作用域却能访问到函数内部变量a的值\n```\n# 闭包有什么用途\n1. 匿名自执行函数\n2. 缓存\n3. 实现封装\n4. 实现面向对象中的对象\n\n_关于闭包的用途，下一篇文章将详细介绍。_\n# 闭包注意事项\n## 1、闭包性能问题 \n由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存。过度使用闭包可能导致内存占用过多。\n虽然V8等优化后的JavaScript引擎会尝试回收被闭包占用的内存。但也应避免大量使用闭包。\n## 2、闭包与变量\nJavaScript作用域导致了一个副作用，即闭包只能取得包含函数中的任何变量的最后一个值。闭包保存的是整个变量对象，而不是某个特殊的变量。如下面的例子：\n```javascript\nfunction createFunctions(){\n\tvar result = new Array();\n\tfor(var i = 0; i< 10; i ++){\n\t\tresult[i] = function(){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn result;\n}\nconsole.log(createFunctions()[1]());    //10，其实数组的每个值都是输出10\n```\n这个函数返回了一个数组，从表面上看，每个函数都应该返回自己的索引值，但实际上却是每个函数都返回了10。这是为什么呢？\n因为每个函数的作用域链中都包含着createFunctions()函数的活动对象，所以它们引用的都是同一个变量i。当createFunctions()函数返回后，变量i的值是10，此时每个函数都引用这保存变量i的统一变量对象，所以每个函数内部i的值都是10。\n我们可以通过创建另外一个匿名函数来解决这个问题，如下所示\n```javascript\nfunction createFunctions() {\n    var result = new Array();\n    for (var i = 0; i < 10; i++) {\n        result[i] = function(num) {\n            return function(){\n            \treturn num;\n            };\n        }(i);\n    }\n    return result;\n}\n```\n改进之后，我们并没有直接将闭包赋值给数组，而是定义了一个匿名函数，并将立即执行该函数的结果赋值给数组。而这个匿名函数有一个参数，也就是最终函数要返回的值。在调用每个匿名函数时，我们传入变量i。在这个匿名函数内部，又创建并返回了一个访问num的闭包，这样一来，result数组中的每个函数都有自己的num变量的一个副本，因此就可以各自不同的值。\n## 3、闭包与this对象\n我们都知道`this`对象是基于函数运行时的执行环境绑定的，在全局函数中，`this`等于`window`。但是在匿名函数中，其执行环境具有全局局限性，因此'this'通常指的是'window'。来比较下下面两个例子：\n```javascript\nvar name = 'The window';\nvar object = {\n    name: 'My Object',\n    getNameFunc: function() {\n        return function() {\n            return this.name;\n        }\n    }\n}\nconsole.log(object.getNameFunc()()); //The window\n```\n```javascript\nvar name = 'The window';\nvar object = {\n    name: 'My Object',\n    getNameFunc: function() {\n        var self = this;\n        return function() {\n            return self.name;\n        }\n    }\n}\nconsole.log(object.getNameFunc()()); //My Object\n```\n\n# 闭包小测\n\n```javascript\n    function fun(n, o) {\n        console.log(o);\n        return {\n            fun: function(m) {\n                return fun(m, n);\n            }\n        };\n    }\nvar a = fun(0);  a.fun(1);  a.fun(2);  a.fun(3);//undefined,?,?,?\nvar b = fun(0).fun(1).fun(2).fun(3);//undefined,?,?,?\nvar c = fun(0).fun(1);  c.fun(2);  c.fun(3);//undefined,?,?,?\n问着三行，a、b、c分别输出什么\n```\n答案请[猛戳](http://www.cnblogs.com/xxcanghai/p/4991870.html)\n参考资料：大部分人都会做错的经典JS闭包面试题 http://www.cnblogs.com/xxcanghai/p/4991870.html\n\n\n\n","source":"_posts/javascript/javascript-closure.md","raw":"---\ntitle: 【读书笔记】JavaScript闭包的理解\ndate: 2016-03-20 00:41:34\ntags:\n- JavaScript学习笔记\n---\n以前一直都不能完全理解闭包的概念，于是就专门学习了下闭包，整理成这篇文章。\n<!-- more -->\n在学习JavaScript中，有一个概念一直困扰着我，它就是**闭包**。今天就彻底学习学习什么是闭包。\n参考资料：\n阮一峰老师的闭包教程: http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n# 为什么会有闭包？\n由于JavaScript的变量作用域的特点，函数内部作用域可以访问外部作用域的变量，而外部作用域却无权访问内部作用域的局部变量。那如果我们想要在函数作用域外访问到函数内部的变量时，该怎么办。\n因此解决的办法就是在函数的内部再创建一个函数，这样就可以在内部函数中访问函数的内部变量，这时候再将内部函数作为返回值的话，那么就可以在函数外去访问到函数的内部变量。这就是**函数的闭包**。\n# 什么是闭包？\n先来看看对于函数的闭包，经典的书籍都是怎么定义的：\n**闭包是指有权访问另外一个函数作用域中的变量的函数。**-----《JavaScript高级程序设计（第3版）》\n**函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中被称为闭包。**-----《JavaScript权威指南（第6版）》\n**当函数可以记住并访问所有的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。**-----《你不知道的JavaScript（上）》\n发现了没有，上面三个关于**闭包**虽然描述的方式不同，但是对闭包定义的本质是相同的：**闭包就是能够读取其他函数内部变量的函数**。\n阮老师将定义更加简洁得定义为：**定义在一个函数内部的函数**（由于在JavaScript中，只有函数内部的子函数才可以读取函数内部的变量）。\n先来看一个简单的例子，清晰地展示了闭包：\n```javascript\nfunction foo(){\n    var a = 2;\n    function bar(){\n        console.log(a);\n    }\n    return bar;\n}\nvar baz = foo();\nbaz.bar();    //2 ——这就是闭包的效果，在foo()函数作用域却能访问到函数内部变量a的值\n```\n# 闭包有什么用途\n1. 匿名自执行函数\n2. 缓存\n3. 实现封装\n4. 实现面向对象中的对象\n\n_关于闭包的用途，下一篇文章将详细介绍。_\n# 闭包注意事项\n## 1、闭包性能问题 \n由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存。过度使用闭包可能导致内存占用过多。\n虽然V8等优化后的JavaScript引擎会尝试回收被闭包占用的内存。但也应避免大量使用闭包。\n## 2、闭包与变量\nJavaScript作用域导致了一个副作用，即闭包只能取得包含函数中的任何变量的最后一个值。闭包保存的是整个变量对象，而不是某个特殊的变量。如下面的例子：\n```javascript\nfunction createFunctions(){\n\tvar result = new Array();\n\tfor(var i = 0; i< 10; i ++){\n\t\tresult[i] = function(){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn result;\n}\nconsole.log(createFunctions()[1]());    //10，其实数组的每个值都是输出10\n```\n这个函数返回了一个数组，从表面上看，每个函数都应该返回自己的索引值，但实际上却是每个函数都返回了10。这是为什么呢？\n因为每个函数的作用域链中都包含着createFunctions()函数的活动对象，所以它们引用的都是同一个变量i。当createFunctions()函数返回后，变量i的值是10，此时每个函数都引用这保存变量i的统一变量对象，所以每个函数内部i的值都是10。\n我们可以通过创建另外一个匿名函数来解决这个问题，如下所示\n```javascript\nfunction createFunctions() {\n    var result = new Array();\n    for (var i = 0; i < 10; i++) {\n        result[i] = function(num) {\n            return function(){\n            \treturn num;\n            };\n        }(i);\n    }\n    return result;\n}\n```\n改进之后，我们并没有直接将闭包赋值给数组，而是定义了一个匿名函数，并将立即执行该函数的结果赋值给数组。而这个匿名函数有一个参数，也就是最终函数要返回的值。在调用每个匿名函数时，我们传入变量i。在这个匿名函数内部，又创建并返回了一个访问num的闭包，这样一来，result数组中的每个函数都有自己的num变量的一个副本，因此就可以各自不同的值。\n## 3、闭包与this对象\n我们都知道`this`对象是基于函数运行时的执行环境绑定的，在全局函数中，`this`等于`window`。但是在匿名函数中，其执行环境具有全局局限性，因此'this'通常指的是'window'。来比较下下面两个例子：\n```javascript\nvar name = 'The window';\nvar object = {\n    name: 'My Object',\n    getNameFunc: function() {\n        return function() {\n            return this.name;\n        }\n    }\n}\nconsole.log(object.getNameFunc()()); //The window\n```\n```javascript\nvar name = 'The window';\nvar object = {\n    name: 'My Object',\n    getNameFunc: function() {\n        var self = this;\n        return function() {\n            return self.name;\n        }\n    }\n}\nconsole.log(object.getNameFunc()()); //My Object\n```\n\n# 闭包小测\n\n```javascript\n    function fun(n, o) {\n        console.log(o);\n        return {\n            fun: function(m) {\n                return fun(m, n);\n            }\n        };\n    }\nvar a = fun(0);  a.fun(1);  a.fun(2);  a.fun(3);//undefined,?,?,?\nvar b = fun(0).fun(1).fun(2).fun(3);//undefined,?,?,?\nvar c = fun(0).fun(1);  c.fun(2);  c.fun(3);//undefined,?,?,?\n问着三行，a、b、c分别输出什么\n```\n答案请[猛戳](http://www.cnblogs.com/xxcanghai/p/4991870.html)\n参考资料：大部分人都会做错的经典JS闭包面试题 http://www.cnblogs.com/xxcanghai/p/4991870.html\n\n\n\n","slug":"javascript/javascript-closure","published":1,"updated":"2016-03-19T16:43:27.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgkn0019tstztqdf26xp"},{"title":"深入理解JavaScript中的call和apply","date":"2016-04-20T15:20:35.000Z","_content":"本文利用主动提问的学习方法来学习JavaScript中的call和apply\n<!-- more -->\n#  学习之前的主动提问\n昨天get的新技能，通过主动提问来学习。\n![](http://7xr6yj.com1.z0.glb.clouddn.com/aritcle-review-insight-3.png)\n## call和apply是什么\n`call`和`apply`都是属于Function.prototype的一个方法。它是在JavaScript引擎内实现的，因为是原型上的方法，因此对于每个Function对象的实例，都共享这两个方法。\n## call和apply有什么作用\n根据MDN上对于JavaScript.call()的定义\n> call()方法在使用一个指定的this值和若干个指定的参数值的前提下调用某个函数或方法\n\n`apply`和`call`作用一样。也就是说它们具有动态改变函数运行时的上下文，可以将一个函数的对象上下文从初始的上下文改变为由指定的this值所指定的对象。\n## call和apply的用法\n`apply`和`call`的作用与用法几乎一样，它们的区别就在于方法**传递的参数不同**。`call()`传递的是参数是任意的，而`apply()`传递的参数必须为数组\n### call()语法\n> fun.call(thisArg[, arg1[, arg2[, ...]]])\n\n#### thisArg\n在fun函数运行时指定的this值，需要注意的是，指定的this值并不一定是该函数执行时真正的this值，如果这个函数处于**非严格模式下**，则指定为null和undefined的this值会指定指向全局对象（在浏览器中则是window对象），同时值为原始值（Number，string，boolean）的this值会指向该原始值的自动包装对象。\n\n#### arg1, arg2, arg3, ...\n传递给fun函数的指定的参数列表\n### apply()语法\n> fun.call(thisArg[ arg1, arg2,...])\n\n## call和apply的用法\ntalk is cheap，show me the code。让我们先抛开上面复杂的解释，通过代码来解释。写一个hello world:\n```javascript\n;(function () {\n\tvar  printA = {\n\t\tprint: function(p1, p2){\n\t\tconsole.log(p1 +\" \"+ p2);\n\t\t}\n\t}\n\t\n\tvar printB = {\n\t\tprint: function(p1,p2){\n\t\t\tprintA.print.call(this, p1, p2);\t\n\t\t}\t\n\t}\n\tprintB.print('hello', 'worldB');\t//hello worldB\n})();\n```\n最后的输出结果是hello worldB。很显然，在printB.print方法中，并没有输出结果的console.log()语句，但是在printB.print函数内部，通过printA.print.call()的方式，借用了printA.print方法。\ncall就是借用别人的方法、对象来调用，就像调用自己的方法一样。\n## call和apply的应用场景\n这里引用Mozilla的例子\n### 使用call方法调用父构造函数\n```javascript\nfunction Product(name, price) {\n\t  this.name = name;\n\t  this.price = price;\n\n\t  if (price < 0) {\n\t    throw RangeError('Cannot create product ' +\n\t                      this.name + ' with a negative price');\n\t  }\n\n\t  return this;\n\t}\n\n\tfunction Food(name, price) {\n\t  Product.call(this, name, price);\n\t  this.category = 'food';\n\t}\n\n\tFood.prototype = Object.create(Product.prototype);\n\tFood.prototype.constructor = Food; // Reset the constructor from Product to Food\n\n\tfunction Toy(name, price) {\n\t  Product.call(this, name, price);\n\t  this.category = 'toy';\n\t}\n\n\tToy.prototype = Object.create(Product.prototype);\n\tToy.prototype.constructor = Toy; // Reset the constructor from Product to Toy\n\n\tvar cheese = new Food('feta', 5);\n\tvar fun = new Toy('robot', 40);\n```\n### 使用call方法调用匿名函数\n在下例中的for循环体内，我们创建了一个匿名函数，然后通过调用该函数的call方法，将每个数组元素作为指定的this值执行了那个匿名函数。这个匿名函数的主要目的是给每个数组元素对象添加一个print方法，这个print方法可以打印出各元素在数组中的正确索引号。当然，这里不是必须得让数组元素作为this值传入那个匿名函数（普通参数就可以），目的是为了演示call的用法。\n```javascript\nvar animals = [\n  {species: 'Lion', name: 'King'},\n  {species: 'Whale', name: 'Fail'}\n];\n \nfor (var i = 0; i < animals.length; i++) {\n  (function (i) {\n    this.print = function () {\n      console.log('#' + i  + ' ' + this.species + ': ' + this.name);\n    }\n    this.print();\n  }).call(animals[i], i);\n}\n```\n\n### 使用call方法调用匿名函数并且指定上下文的'this'\n在下面的例子中，当调用 greet 方法的时候，该方法的 this 值会绑定到 i 对象。\n\n```javascript\nfunction greet() {\n  var reply = [this.person, 'Is An Awesome', this.role].join(' ');\n  console.log(reply);\n}\n \nvar i = {\n  person: 'Douglas Crockford', role: 'Javascript Developer'\n};\n \ngreet.call(i); // Douglas Crockford Is An Awesome Javascript Developer\n```\n\n## 参考资料\n>关于javascript中apply()和call()方法的区别：http://www.cnblogs.com/fighting_cp/archive/2010/09/20/1831844.html\n>Function.prototype.call():：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call","source":"_posts/javascript/javascirpt-call-method.md","raw":"---\ntitle: 深入理解JavaScript中的call和apply\ndate: 2016-04-20 23:20:35\ntags:\n- JavaScript\n- JavaScript学习笔记\n---\n本文利用主动提问的学习方法来学习JavaScript中的call和apply\n<!-- more -->\n#  学习之前的主动提问\n昨天get的新技能，通过主动提问来学习。\n![](http://7xr6yj.com1.z0.glb.clouddn.com/aritcle-review-insight-3.png)\n## call和apply是什么\n`call`和`apply`都是属于Function.prototype的一个方法。它是在JavaScript引擎内实现的，因为是原型上的方法，因此对于每个Function对象的实例，都共享这两个方法。\n## call和apply有什么作用\n根据MDN上对于JavaScript.call()的定义\n> call()方法在使用一个指定的this值和若干个指定的参数值的前提下调用某个函数或方法\n\n`apply`和`call`作用一样。也就是说它们具有动态改变函数运行时的上下文，可以将一个函数的对象上下文从初始的上下文改变为由指定的this值所指定的对象。\n## call和apply的用法\n`apply`和`call`的作用与用法几乎一样，它们的区别就在于方法**传递的参数不同**。`call()`传递的是参数是任意的，而`apply()`传递的参数必须为数组\n### call()语法\n> fun.call(thisArg[, arg1[, arg2[, ...]]])\n\n#### thisArg\n在fun函数运行时指定的this值，需要注意的是，指定的this值并不一定是该函数执行时真正的this值，如果这个函数处于**非严格模式下**，则指定为null和undefined的this值会指定指向全局对象（在浏览器中则是window对象），同时值为原始值（Number，string，boolean）的this值会指向该原始值的自动包装对象。\n\n#### arg1, arg2, arg3, ...\n传递给fun函数的指定的参数列表\n### apply()语法\n> fun.call(thisArg[ arg1, arg2,...])\n\n## call和apply的用法\ntalk is cheap，show me the code。让我们先抛开上面复杂的解释，通过代码来解释。写一个hello world:\n```javascript\n;(function () {\n\tvar  printA = {\n\t\tprint: function(p1, p2){\n\t\tconsole.log(p1 +\" \"+ p2);\n\t\t}\n\t}\n\t\n\tvar printB = {\n\t\tprint: function(p1,p2){\n\t\t\tprintA.print.call(this, p1, p2);\t\n\t\t}\t\n\t}\n\tprintB.print('hello', 'worldB');\t//hello worldB\n})();\n```\n最后的输出结果是hello worldB。很显然，在printB.print方法中，并没有输出结果的console.log()语句，但是在printB.print函数内部，通过printA.print.call()的方式，借用了printA.print方法。\ncall就是借用别人的方法、对象来调用，就像调用自己的方法一样。\n## call和apply的应用场景\n这里引用Mozilla的例子\n### 使用call方法调用父构造函数\n```javascript\nfunction Product(name, price) {\n\t  this.name = name;\n\t  this.price = price;\n\n\t  if (price < 0) {\n\t    throw RangeError('Cannot create product ' +\n\t                      this.name + ' with a negative price');\n\t  }\n\n\t  return this;\n\t}\n\n\tfunction Food(name, price) {\n\t  Product.call(this, name, price);\n\t  this.category = 'food';\n\t}\n\n\tFood.prototype = Object.create(Product.prototype);\n\tFood.prototype.constructor = Food; // Reset the constructor from Product to Food\n\n\tfunction Toy(name, price) {\n\t  Product.call(this, name, price);\n\t  this.category = 'toy';\n\t}\n\n\tToy.prototype = Object.create(Product.prototype);\n\tToy.prototype.constructor = Toy; // Reset the constructor from Product to Toy\n\n\tvar cheese = new Food('feta', 5);\n\tvar fun = new Toy('robot', 40);\n```\n### 使用call方法调用匿名函数\n在下例中的for循环体内，我们创建了一个匿名函数，然后通过调用该函数的call方法，将每个数组元素作为指定的this值执行了那个匿名函数。这个匿名函数的主要目的是给每个数组元素对象添加一个print方法，这个print方法可以打印出各元素在数组中的正确索引号。当然，这里不是必须得让数组元素作为this值传入那个匿名函数（普通参数就可以），目的是为了演示call的用法。\n```javascript\nvar animals = [\n  {species: 'Lion', name: 'King'},\n  {species: 'Whale', name: 'Fail'}\n];\n \nfor (var i = 0; i < animals.length; i++) {\n  (function (i) {\n    this.print = function () {\n      console.log('#' + i  + ' ' + this.species + ': ' + this.name);\n    }\n    this.print();\n  }).call(animals[i], i);\n}\n```\n\n### 使用call方法调用匿名函数并且指定上下文的'this'\n在下面的例子中，当调用 greet 方法的时候，该方法的 this 值会绑定到 i 对象。\n\n```javascript\nfunction greet() {\n  var reply = [this.person, 'Is An Awesome', this.role].join(' ');\n  console.log(reply);\n}\n \nvar i = {\n  person: 'Douglas Crockford', role: 'Javascript Developer'\n};\n \ngreet.call(i); // Douglas Crockford Is An Awesome Javascript Developer\n```\n\n## 参考资料\n>关于javascript中apply()和call()方法的区别：http://www.cnblogs.com/fighting_cp/archive/2010/09/20/1831844.html\n>Function.prototype.call():：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call","slug":"javascript/javascirpt-call-method","published":1,"updated":"2016-05-07T16:15:40.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgkq001btstz6dtq6nkp"},{"title":"【面试总结】2016-4-3-宅米面试总结","date":"2016-04-04T08:48:13.000Z","_content":"经过几场面试后发现，面试官对于你如何学习新框架的过程都比较有兴趣，因为这可以考察出一个人的学习能力。以下是宅米面试过程的一些记录。\n<!-- more -->\n## 1.说说你是如何学习AngularJS\n主要是考查学习能力，通过你对一门新框架的学习方式来判断你的学习能力。\n我的回答：先是通过基本基本的书籍（如《AngularJS权威教程》）去入门，然后上手做项目。在做项目的过程中，遇到问题就查看官网api文档。再根据具体的知识，去翻阅不同的书籍进行补充（如《AngularJS Essentials》、《AngularJS Up & Running》）\n在入门之后，再阅读《AngularJS深度剖析与最佳实践》深入理解AngularJS，同时通过各种论坛收集并了解有关AngularJS的一些类库并使用（如按需加载库：ocLazyLoad）\n## 2.在AngularJS开发中遇到哪些坑？如何解决？\n关于AngularJS开发中遇到的坑已经整理成文章，详见[关于AngularJS的一些坑](http://superman66.github.io/2016/04/04/angular-collect/)\n\n## 3.脏检查机制，哪些事件会引起脏检查？点击一个函数是否会引起脏检查？\n我的回答：大概描述了“脏检查”机制的原理，并回答了input值变化会引起脏检查。但是对于ng-click是否会引起dirth check 却不知道。\n### 1、脏检查机制原理\n“脏检查”是AngularJS中最核心的机制之一，它是实现双向绑定、MVVM模式的重要基础。用一句话来概括“脏检查机制”：\nAngularJS将双向绑定转换为一堆watch表达式，然后递归检查这些watch表达式的结果是否变了，如果变了，则执行相应的watch函数。等到Model的值不再变化，也就不会再有watcher函数被触发，一个完整的digest循环就结束了。这时，浏览器就会重新渲染DOM来体现model的改变。\n### 2、哪些事件会引起脏检查？\n* Model的值发生改变\n* `ngClick`、`ngSubmit`、`ngChange`等事件指令，`$http`、`$resource`这类外部Ajax数据获取的回调函数以及`$timeout`、`$interval`\n\n## 4.知道angular2吗？（考察行业新技术的了解）\n\n大概了解过，但并未具体开始深入学习。\n\n## 5、微信开发中遇到哪些坑？是如何解决的？（踩坑过程是一次提升的过程，因此总结你踩坑的过程就显得非常重要）\n\n用户在js-sdk签名完成之前如果进行分享操作，将会导致分享设置的失效？\n解决办法：在未签名成功之前，隐藏右上角的菜单。\n# 总结\n记得公司一位大神说过，每个人都应该去经历面试。因为在一个环境待久了，自我意识很容易膨胀，陷入坐井观天的状态，无法意识到自身的不足。因此出去面试可以让你发现自己知识体系中薄弱的地方。在面试结束后，找出这些薄弱的地方，再一一去学习、巩固。这样的过程对于个人成长是很有帮助的。\n去宅米的面试应该是我面试的第4家公司了。经历过前面三次面试的磨练，这次面试自己还是存在比较大的信心。因为前一天晚上接到面试通知后，得知他们的项目前端也是采用AngularJS框架，便去他们的网站查看项目结构、代码等，做到心中有数（还发现了一个他们微信端网站存的问题，在面试中指出来，并提出了解决方案）。同时也做了一些相应的面试准备。因此在整个面试过程中进行得非常顺利。\n","source":"_posts/interview/zhaimi-interview-summary.md","raw":"---\ntitle: 【面试总结】2016-4-3-宅米面试总结\ndate: 2016-04-04 16:48:13\ntags: 面试总结\n---\n经过几场面试后发现，面试官对于你如何学习新框架的过程都比较有兴趣，因为这可以考察出一个人的学习能力。以下是宅米面试过程的一些记录。\n<!-- more -->\n## 1.说说你是如何学习AngularJS\n主要是考查学习能力，通过你对一门新框架的学习方式来判断你的学习能力。\n我的回答：先是通过基本基本的书籍（如《AngularJS权威教程》）去入门，然后上手做项目。在做项目的过程中，遇到问题就查看官网api文档。再根据具体的知识，去翻阅不同的书籍进行补充（如《AngularJS Essentials》、《AngularJS Up & Running》）\n在入门之后，再阅读《AngularJS深度剖析与最佳实践》深入理解AngularJS，同时通过各种论坛收集并了解有关AngularJS的一些类库并使用（如按需加载库：ocLazyLoad）\n## 2.在AngularJS开发中遇到哪些坑？如何解决？\n关于AngularJS开发中遇到的坑已经整理成文章，详见[关于AngularJS的一些坑](http://superman66.github.io/2016/04/04/angular-collect/)\n\n## 3.脏检查机制，哪些事件会引起脏检查？点击一个函数是否会引起脏检查？\n我的回答：大概描述了“脏检查”机制的原理，并回答了input值变化会引起脏检查。但是对于ng-click是否会引起dirth check 却不知道。\n### 1、脏检查机制原理\n“脏检查”是AngularJS中最核心的机制之一，它是实现双向绑定、MVVM模式的重要基础。用一句话来概括“脏检查机制”：\nAngularJS将双向绑定转换为一堆watch表达式，然后递归检查这些watch表达式的结果是否变了，如果变了，则执行相应的watch函数。等到Model的值不再变化，也就不会再有watcher函数被触发，一个完整的digest循环就结束了。这时，浏览器就会重新渲染DOM来体现model的改变。\n### 2、哪些事件会引起脏检查？\n* Model的值发生改变\n* `ngClick`、`ngSubmit`、`ngChange`等事件指令，`$http`、`$resource`这类外部Ajax数据获取的回调函数以及`$timeout`、`$interval`\n\n## 4.知道angular2吗？（考察行业新技术的了解）\n\n大概了解过，但并未具体开始深入学习。\n\n## 5、微信开发中遇到哪些坑？是如何解决的？（踩坑过程是一次提升的过程，因此总结你踩坑的过程就显得非常重要）\n\n用户在js-sdk签名完成之前如果进行分享操作，将会导致分享设置的失效？\n解决办法：在未签名成功之前，隐藏右上角的菜单。\n# 总结\n记得公司一位大神说过，每个人都应该去经历面试。因为在一个环境待久了，自我意识很容易膨胀，陷入坐井观天的状态，无法意识到自身的不足。因此出去面试可以让你发现自己知识体系中薄弱的地方。在面试结束后，找出这些薄弱的地方，再一一去学习、巩固。这样的过程对于个人成长是很有帮助的。\n去宅米的面试应该是我面试的第4家公司了。经历过前面三次面试的磨练，这次面试自己还是存在比较大的信心。因为前一天晚上接到面试通知后，得知他们的项目前端也是采用AngularJS框架，便去他们的网站查看项目结构、代码等，做到心中有数（还发现了一个他们微信端网站存的问题，在面试中指出来，并提出了解决方案）。同时也做了一些相应的面试准备。因此在整个面试过程中进行得非常顺利。\n","slug":"interview/zhaimi-interview-summary","published":1,"updated":"2016-04-04T09:14:35.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgku001etstzhc70xcsj"},{"title":"Hexo博客搭建教程（四）：Hexo优化与个性化","date":"2016-02-23T14:24:11.000Z","_content":"前面的文章介绍了如何打造一个属于自己的博客。但是这个博客还只是拥有基本的功能。对于一个站点而言，我们还需要很多功能来完善它，比如需要网站访问统计数据，网站评论功能等。这篇文章将从以下几个方面介绍如何自定义你的博客。\n* 添加统计代码\n* 添加多说评论功能\n* 如何添加本地图片\n<!-- more -->\n# 添加统计代码\n无数据，不运营。对于一个站点而言，网站的访问数据十分重要，数据分析是网站运营的一部分。虽然这只是一个博客，但我们也可以将其当做一个网站来运营。\n要想统计网站的访问数据，一般通过第三方数据分析网站，添加相应的统计代码来进行数据统计。由于google analytics会出现被墙的原因以及统计数据不够及时（一般需要第二天才能看到报表），因此我采用了[CNZZ数据专家](http://www.cnzz.com/)的数据统计功能。（至于为啥不用百度统计，由于百度全家桶实在是呵呵。。。）。\n## 获得CNZZ统计代码\n没有账号的自行去注册。注册完，填写你的博客站点信息之后，拿到CNZZ提供的统计代码。\n## 编辑 `themes/yilia/_config.yml`文件\n```yml\ncnzz_tongji: true  # 开启cnzz统计\ngoogle_analytics: ''\n```\n## 新建`cnzz_tongji.ejs`文件\n在`themes/yilia/layout/_partial/`文件夹下新建文件`cnzz_tongji.ejs`，文件内容如下:\n```ejs\n<% if(theme.cnzz_tongji) {%>\n\t<script type=\"text/javascript\"> \n\t//cnzz analytics code\n\t</script>\n<%}%>\n```\n## 将`cnzz_tongji.ejs`添加到`head.ejs`\n打开位于`themes/yilia/layout/_partial/`文件夹下的`head.ejs`，在`</head>`之前添加以下代码，将统计代码添加到页面中\n```ejs\n<%- partial/cnzz_tongji%>\n```\n添加后便可以去[CNZZ数据专家](http://www.cnzz.com/)查看博客的访问数据统计了。\n\n# 添加多说评论功能\n##登录多说，获取key，并将key添加到配置文件中\n如下图：箭头所指的就是你的多说的key(注意:后面的.duoshuo.com不需要)\n![](http://7xr6yj.com1.z0.glb.clouddn.com/hexo_duoshuo_example.png)\n将你的域名填写到`themes/yilia/_config.yml`中\n```\n#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key\n#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论\nduoshuo: your-key\n```\n\n# 添加本地图片\n对于source文件下的内容，hexo会在public文件夹下生成相应的内容。所以要想插入本地图片到博客中，只需要在`source`文件夹下新建`images`文件夹，把要插入的图片放入该文件夹即可。\n假设图片的路径为:`images/pic.png`,在文章中就可以这么来引用：\n`![text](/images/pic.png)`\n这样就可以在文章中插入本地图片了。\n\n","source":"_posts/hexo/hexo-guide-4.md","raw":"---\ntitle: Hexo博客搭建教程（四）：Hexo优化与个性化\ndate: 2016-02-23 22:24:11\ntags: Hexo\n---\n前面的文章介绍了如何打造一个属于自己的博客。但是这个博客还只是拥有基本的功能。对于一个站点而言，我们还需要很多功能来完善它，比如需要网站访问统计数据，网站评论功能等。这篇文章将从以下几个方面介绍如何自定义你的博客。\n* 添加统计代码\n* 添加多说评论功能\n* 如何添加本地图片\n<!-- more -->\n# 添加统计代码\n无数据，不运营。对于一个站点而言，网站的访问数据十分重要，数据分析是网站运营的一部分。虽然这只是一个博客，但我们也可以将其当做一个网站来运营。\n要想统计网站的访问数据，一般通过第三方数据分析网站，添加相应的统计代码来进行数据统计。由于google analytics会出现被墙的原因以及统计数据不够及时（一般需要第二天才能看到报表），因此我采用了[CNZZ数据专家](http://www.cnzz.com/)的数据统计功能。（至于为啥不用百度统计，由于百度全家桶实在是呵呵。。。）。\n## 获得CNZZ统计代码\n没有账号的自行去注册。注册完，填写你的博客站点信息之后，拿到CNZZ提供的统计代码。\n## 编辑 `themes/yilia/_config.yml`文件\n```yml\ncnzz_tongji: true  # 开启cnzz统计\ngoogle_analytics: ''\n```\n## 新建`cnzz_tongji.ejs`文件\n在`themes/yilia/layout/_partial/`文件夹下新建文件`cnzz_tongji.ejs`，文件内容如下:\n```ejs\n<% if(theme.cnzz_tongji) {%>\n\t<script type=\"text/javascript\"> \n\t//cnzz analytics code\n\t</script>\n<%}%>\n```\n## 将`cnzz_tongji.ejs`添加到`head.ejs`\n打开位于`themes/yilia/layout/_partial/`文件夹下的`head.ejs`，在`</head>`之前添加以下代码，将统计代码添加到页面中\n```ejs\n<%- partial/cnzz_tongji%>\n```\n添加后便可以去[CNZZ数据专家](http://www.cnzz.com/)查看博客的访问数据统计了。\n\n# 添加多说评论功能\n##登录多说，获取key，并将key添加到配置文件中\n如下图：箭头所指的就是你的多说的key(注意:后面的.duoshuo.com不需要)\n![](http://7xr6yj.com1.z0.glb.clouddn.com/hexo_duoshuo_example.png)\n将你的域名填写到`themes/yilia/_config.yml`中\n```\n#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key\n#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论\nduoshuo: your-key\n```\n\n# 添加本地图片\n对于source文件下的内容，hexo会在public文件夹下生成相应的内容。所以要想插入本地图片到博客中，只需要在`source`文件夹下新建`images`文件夹，把要插入的图片放入该文件夹即可。\n假设图片的路径为:`images/pic.png`,在文章中就可以这么来引用：\n`![text](/images/pic.png)`\n这样就可以在文章中插入本地图片了。\n\n","slug":"hexo/hexo-guide-4","published":1,"updated":"2016-05-04T14:56:20.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgkz001htstzp4sel9i4"},{"title":"Hexo博客搭建教程（三）：Hexo博客代码版本控制","date":"2016-02-22T14:03:43.000Z","_content":"由于Hexo只会将生成后的public文件夹部署到github上，导致无法对博客进行代码版本控制。同时如果需要备份代码的话，只能通过其他手段来实现。\n本文介绍了如何利用github分支对代码进行版本控制，同时起到备份代码的作用。\n<!-- more -->\n# 解决思路\n实现Hexo博客代码版本控制以及备份的思路如下：\n通过新建一个`source`分支用于专门存放hexo代码。原先的`master`分支依然不变，作为hexo 部署的分支。\n每次在部署后，再把代码提交到`source`分支。\n# 实现步骤\n## 1、本地创建git 仓库\n```bash\ngit init\n```\n## 2、添加远程库\n```bash\ngit remote add origin <git repository url>\n```\n## 3、创建source分支\n```bash\ngit checkout -b source\n```\n## 4、提交文件及分支，并push到远程仓库\n```bash\ngit add *\ngit commit -m 'message'\ngit push origin source \n```\n其中`source`为分支名称。\n\n这样就建立了代码版本控制分支。之后只要将博客在部署到github之后，将代码push到`source`分支上。代码如下：\n```bash\ngit add *\ngit commit -m \"udpate site\"\ngit push origin source\n```\n# 问题记录\n如果你使用了第三方主题，在进行代码提交的时候，是无法将第三方主题提交到你的github repository中，会出现 `untracked content`的提示。\n这是因为第三方主题本身也是一个git项目。你无法将别人的git项目直接通过add 和commit的方式提交到你自己的git repository。\n也就说，你无法提交处于 `untracked`状态的文件。\n解决办法：\n* 添加 `submodule`的方式，将主题作为submodule提交到你的git repository\n* 删除主题文件夹下的`.git`文件夹。如果这时候还不能提交，可以新建个文件夹，随便命名，将主题文件夹内的东西复制到新建的文件夹。再通过`git add`提交就可以了。","source":"_posts/hexo/hexo-guide-3.md","raw":"---\ntitle: Hexo博客搭建教程（三）：Hexo博客代码版本控制\ndate: 2016-02-22 22:03:43\ntags: Hexo\n---\n由于Hexo只会将生成后的public文件夹部署到github上，导致无法对博客进行代码版本控制。同时如果需要备份代码的话，只能通过其他手段来实现。\n本文介绍了如何利用github分支对代码进行版本控制，同时起到备份代码的作用。\n<!-- more -->\n# 解决思路\n实现Hexo博客代码版本控制以及备份的思路如下：\n通过新建一个`source`分支用于专门存放hexo代码。原先的`master`分支依然不变，作为hexo 部署的分支。\n每次在部署后，再把代码提交到`source`分支。\n# 实现步骤\n## 1、本地创建git 仓库\n```bash\ngit init\n```\n## 2、添加远程库\n```bash\ngit remote add origin <git repository url>\n```\n## 3、创建source分支\n```bash\ngit checkout -b source\n```\n## 4、提交文件及分支，并push到远程仓库\n```bash\ngit add *\ngit commit -m 'message'\ngit push origin source \n```\n其中`source`为分支名称。\n\n这样就建立了代码版本控制分支。之后只要将博客在部署到github之后，将代码push到`source`分支上。代码如下：\n```bash\ngit add *\ngit commit -m \"udpate site\"\ngit push origin source\n```\n# 问题记录\n如果你使用了第三方主题，在进行代码提交的时候，是无法将第三方主题提交到你的github repository中，会出现 `untracked content`的提示。\n这是因为第三方主题本身也是一个git项目。你无法将别人的git项目直接通过add 和commit的方式提交到你自己的git repository。\n也就说，你无法提交处于 `untracked`状态的文件。\n解决办法：\n* 添加 `submodule`的方式，将主题作为submodule提交到你的git repository\n* 删除主题文件夹下的`.git`文件夹。如果这时候还不能提交，可以新建个文件夹，随便命名，将主题文件夹内的东西复制到新建的文件夹。再通过`git add`提交就可以了。","slug":"hexo/hexo-guide-3","published":1,"updated":"2016-02-23T15:24:06.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgl3001ktstzei9boz8b"},{"title":"Hexo博客搭建教程（二）：Hexo博客的配置、使用","date":"2016-02-21T14:41:24.000Z","_content":"本文主要介绍如何对Hexo博客站点进行个性化的设置、如何安装主题以及主题的设置。\n\n<!-- more -->\n经过上一篇文章，我们已经学会如何搭建Hexo博客以及将博客部署到github上了。这篇文章主要讲如何对自己的博客站点进行个性化配置以及如何发表新文章。\n博客的配置一个是站点的配置:`d:\\hexo\\_config.yml`，一个是主题的配置:`d:\\hexo\\themes\\yilia\\_config.yml`\n## 站点的配置\n```yml\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: Superman的博客 #站定的名称\nsubtitle: 超人不会飞 #站点的副标题\ndescription: 超人前端学习博客 #站点的描述\nauthor: Superman \nemail: supermanchc@gmail.com\nlanguage: zh-Hans # 语言 使用中文需要使用zh-Hans\ntimezone:  #默认操作系统的时间\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n##url 在没有绑定域名前，不需要填写\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory 目录格式，不修改\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing 写作布局，不修改\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n# Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文\n## 2: Enable pagination\n## 1: Disable pagination\n## 0: Fully Disable\narchive: 1\ncategory: 1\ntag: 1\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 5\npagination_dir: page\n\n# Extensions 配置主题\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yilia\n\n# Deployment 配置部署github站点，改为自己的github repository\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/superman66/superman66.github.io.git\n  branch: master\n```\n## 安装新主题\nHexo此时用的是默认的主题，如果需要更换主题，可以去[主题市场](https://github.com/tommy351/hexo/wiki/Themes)挑选自己喜爱的主题。这里以安装`yilia`主题为例。\n#### 安装\n\n``` bash\n$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n```\n\n#### 配置\n\n修改hexo根目录下 `_config.yml` 的themes: \n```yml\n# Extensions 配置主题\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yilia\n```\n\n#### 更新\n\n``` bash\ncd themes/yilia\ngit pull\n```\n## 配置主题\n这样就为你的博客站点安装了新的主题。接下来对主题进行配置\n主题配置文件在主目录下的`_config.yml`：\n```\n# Header\nmenu:\n  主页: /\n  所有文章: /archives\n  # 随笔: /tags/随笔\n\n# SubNav\nsubnav:\n  github: \"#\"\n  weibo: \"#\"\n  rss: \"#\"\n  zhihu: \"#\"\n  #douban: \"#\"\n  #mail: \"#\"\n  #facebook: \"#\"\n  #google: \"#\"\n  #twitter: \"#\"\n  #linkedin: \"#\"\n\nrss: /atom.xml\n\n# Content\nexcerpt_link: more\nfancybox: true\nmathjax: true\n\n# Miscellaneous\ngoogle_analytics: ''\nfavicon: /favicon.png\n\n#你的头像url\navatar: \"\"\n#是否开启分享\nshare: true\n#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key\n#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论\nduoshuo: true\n#是否开启云标签\ntagcloud: true\n\n#是否开启友情链接\n#不开启——\n#friends: false\n#开启——\nfriends:\n  奥巴马的博客: http://localhost:4000/\n  卡卡的美丽传说: http://localhost:4000/\n  本泽马的博客: http://localhost:4000/\n  吉格斯的博客: http://localhost:4000/\n  习大大大不同: http://localhost:4000/\n  托蒂的博客: http://localhost:4000/\n\n#是否开启“关于我”。\n#不开启——\n#aboutme: false\n#开启——\naboutme: 我是谁，我从哪里来，我到哪里去？我就是我，是颜色不一样的吃货…\n```\n\n","source":"_posts/hexo/hexo-guide-2.md","raw":"---\ntitle: Hexo博客搭建教程（二）：Hexo博客的配置、使用\ndate: 2016-02-21 22:41:24\ntags: Hexo\n---\n本文主要介绍如何对Hexo博客站点进行个性化的设置、如何安装主题以及主题的设置。\n\n<!-- more -->\n经过上一篇文章，我们已经学会如何搭建Hexo博客以及将博客部署到github上了。这篇文章主要讲如何对自己的博客站点进行个性化配置以及如何发表新文章。\n博客的配置一个是站点的配置:`d:\\hexo\\_config.yml`，一个是主题的配置:`d:\\hexo\\themes\\yilia\\_config.yml`\n## 站点的配置\n```yml\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: Superman的博客 #站定的名称\nsubtitle: 超人不会飞 #站点的副标题\ndescription: 超人前端学习博客 #站点的描述\nauthor: Superman \nemail: supermanchc@gmail.com\nlanguage: zh-Hans # 语言 使用中文需要使用zh-Hans\ntimezone:  #默认操作系统的时间\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n##url 在没有绑定域名前，不需要填写\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory 目录格式，不修改\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing 写作布局，不修改\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n# Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文\n## 2: Enable pagination\n## 1: Disable pagination\n## 0: Fully Disable\narchive: 1\ncategory: 1\ntag: 1\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 5\npagination_dir: page\n\n# Extensions 配置主题\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yilia\n\n# Deployment 配置部署github站点，改为自己的github repository\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/superman66/superman66.github.io.git\n  branch: master\n```\n## 安装新主题\nHexo此时用的是默认的主题，如果需要更换主题，可以去[主题市场](https://github.com/tommy351/hexo/wiki/Themes)挑选自己喜爱的主题。这里以安装`yilia`主题为例。\n#### 安装\n\n``` bash\n$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n```\n\n#### 配置\n\n修改hexo根目录下 `_config.yml` 的themes: \n```yml\n# Extensions 配置主题\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yilia\n```\n\n#### 更新\n\n``` bash\ncd themes/yilia\ngit pull\n```\n## 配置主题\n这样就为你的博客站点安装了新的主题。接下来对主题进行配置\n主题配置文件在主目录下的`_config.yml`：\n```\n# Header\nmenu:\n  主页: /\n  所有文章: /archives\n  # 随笔: /tags/随笔\n\n# SubNav\nsubnav:\n  github: \"#\"\n  weibo: \"#\"\n  rss: \"#\"\n  zhihu: \"#\"\n  #douban: \"#\"\n  #mail: \"#\"\n  #facebook: \"#\"\n  #google: \"#\"\n  #twitter: \"#\"\n  #linkedin: \"#\"\n\nrss: /atom.xml\n\n# Content\nexcerpt_link: more\nfancybox: true\nmathjax: true\n\n# Miscellaneous\ngoogle_analytics: ''\nfavicon: /favicon.png\n\n#你的头像url\navatar: \"\"\n#是否开启分享\nshare: true\n#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key\n#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论\nduoshuo: true\n#是否开启云标签\ntagcloud: true\n\n#是否开启友情链接\n#不开启——\n#friends: false\n#开启——\nfriends:\n  奥巴马的博客: http://localhost:4000/\n  卡卡的美丽传说: http://localhost:4000/\n  本泽马的博客: http://localhost:4000/\n  吉格斯的博客: http://localhost:4000/\n  习大大大不同: http://localhost:4000/\n  托蒂的博客: http://localhost:4000/\n\n#是否开启“关于我”。\n#不开启——\n#aboutme: false\n#开启——\naboutme: 我是谁，我从哪里来，我到哪里去？我就是我，是颜色不一样的吃货…\n```\n\n","slug":"hexo/hexo-guide-2","published":1,"updated":"2016-02-22T14:07:48.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgl8001mtstzhgdkxrdd"},{"title":"Hexo博客搭建教程（一）：Hexo介绍及搭建","date":"2016-02-21T13:33:34.000Z","_content":"终于有了自己的github博客了。记录下搭建Github.io博客的过程以及当中所遇到的坑。\n\n<!-- more -->\n# Hexo是什么\nHexo是一个基于nodejs快速、简洁且高效的博客框架。可以方便的生成静态网页文件托管到github pages。具有超快渲染速度、支持GitHub Flavored Markdown语法、一键部署等优点，同时还拥有强大的插件系统，方便用户进行定制化开发。\n# Hexo 安装\n本教程只针对windows用户。\n## 安装前提\n在安装Hexo之前，请先安装\n* Node.js\n* Git\n\n## 安装 Git\n下载[msysgit](https://git-for-windows.github.io/)进行安装即可。\n## 安装 Nodejs\n在windows下安装nodejs非常简单，直接去[官网](https://nodejs.org/)下载进行安装即可。\n## 安装 Hexo\nHexo安装也很简单。在Git和Node.js都安装后，直接使用npm进行安装即可\n```bash\nnpm install -g hexo-cli\n```\n## 创建Hexo文件夹\n在你喜爱的文件夹下，如（`D:\\hexo`）,右键选择`git bash`,执行以下命令。便会自动新建所有的文件\n```bash\nhexo init\n```\n## 安装所依赖的包\n```bash\nnpm install\n```\n## 本地查看\n到这一步，你已经在本地安装了Hexo博客。你可以通过以下的命令在本地查看博客。\n### 生成静态文件\n```bash\nhexo generate\n```\n### 运行服务\n```bash\nhexo server\n```\n此时在浏览器中输入`localhost:4000`，便可以看到博客了。至此，本地博客已经搭建好了。但是此时博客还只是在本地，别人是无法访问的。\n\n# Github部署\n## 注册Github账号\n有账号的人跳过，没有的话[注册](https://github.com/)下也很简单。\n## 创建 repository\n在个人github主页右下角点击 `New repository`,创建一个新的repository。\n新的repository的名字应该跟你github账号的名字一样。比如我的github账号是`superman66`，\n那么新的repository的名字就应该为`superman66.github.io`。\n## 部署\n进入博客所在的文件夹(如`D:\\hexo`)，找到_config.yml文件，修改以下的配置，将下面的`superman66`都换成你自己的账户名。\n```\ndeploy:\n  type: git\n  repository: https://github.com/superman66/superman66.github.io.git\n  branch: master\n```\n*注意：hexo 3.0以下，type要写成 `github`*\n这个参数是用来配置网站一键部署的。让你只需要一条命令就可以将网站部署到服务器上。\n配置文件修改之后，执行一下命令便可以完成部署了。\n```bash\nhexo generate\nhexo deploy\n```\n\n### hexo常用命令\n* `hexo new \"post_name\"`用于生成新的文章；\n* `hexo generate`用于生成静态文件；\n* `hexo server` 用于启动本地服务；\n* `hexo deploy`用于将生成的静态文件部署到repository上。\n\n同时这四个命令还支持简写\n `hexo g` === `hexo generate`\n `hexo s` === `hexo server`\n `hexo d` === `hexo deploy`\n `hexo n` === `hexo new`\n 至此，你已经将本地的博客部署到github上。你可以通过username.github.io(`username`换成你自己的账户名)来访问你的博客了 \n\n ## 问题记录\n 在部署过程中，执行`hexo d`进行部署的时候，出现以下的错误\n **`hexo bash: /dev/tty: No such device or address`**\n ### 解决办法：\n 安装github for Window，点击这里进行[下载](https://github-windows.s3.amazonaws.com/GitHubSetup.exe),使用git shell再执行`hexo d`命令进行部署即可。\n **ps:由于github for windows 在国内安装很容易失败，自己尝试了很久也都没装上。不过网上已经有人提供了github for windows离线版，有兴趣的人可以前往[下载](http://www.cnblogs.com/fantacity/p/4347472.html)**\n ### 问题的原因：\n google找到的说法是，由于window安装的git版本问题导致的。\n","source":"_posts/hexo/hexo-guide-1.md","raw":"---\ntitle: Hexo博客搭建教程（一）：Hexo介绍及搭建\ndate: 2016-02-21 21:33:34\ntags: Hexo\n---\n终于有了自己的github博客了。记录下搭建Github.io博客的过程以及当中所遇到的坑。\n\n<!-- more -->\n# Hexo是什么\nHexo是一个基于nodejs快速、简洁且高效的博客框架。可以方便的生成静态网页文件托管到github pages。具有超快渲染速度、支持GitHub Flavored Markdown语法、一键部署等优点，同时还拥有强大的插件系统，方便用户进行定制化开发。\n# Hexo 安装\n本教程只针对windows用户。\n## 安装前提\n在安装Hexo之前，请先安装\n* Node.js\n* Git\n\n## 安装 Git\n下载[msysgit](https://git-for-windows.github.io/)进行安装即可。\n## 安装 Nodejs\n在windows下安装nodejs非常简单，直接去[官网](https://nodejs.org/)下载进行安装即可。\n## 安装 Hexo\nHexo安装也很简单。在Git和Node.js都安装后，直接使用npm进行安装即可\n```bash\nnpm install -g hexo-cli\n```\n## 创建Hexo文件夹\n在你喜爱的文件夹下，如（`D:\\hexo`）,右键选择`git bash`,执行以下命令。便会自动新建所有的文件\n```bash\nhexo init\n```\n## 安装所依赖的包\n```bash\nnpm install\n```\n## 本地查看\n到这一步，你已经在本地安装了Hexo博客。你可以通过以下的命令在本地查看博客。\n### 生成静态文件\n```bash\nhexo generate\n```\n### 运行服务\n```bash\nhexo server\n```\n此时在浏览器中输入`localhost:4000`，便可以看到博客了。至此，本地博客已经搭建好了。但是此时博客还只是在本地，别人是无法访问的。\n\n# Github部署\n## 注册Github账号\n有账号的人跳过，没有的话[注册](https://github.com/)下也很简单。\n## 创建 repository\n在个人github主页右下角点击 `New repository`,创建一个新的repository。\n新的repository的名字应该跟你github账号的名字一样。比如我的github账号是`superman66`，\n那么新的repository的名字就应该为`superman66.github.io`。\n## 部署\n进入博客所在的文件夹(如`D:\\hexo`)，找到_config.yml文件，修改以下的配置，将下面的`superman66`都换成你自己的账户名。\n```\ndeploy:\n  type: git\n  repository: https://github.com/superman66/superman66.github.io.git\n  branch: master\n```\n*注意：hexo 3.0以下，type要写成 `github`*\n这个参数是用来配置网站一键部署的。让你只需要一条命令就可以将网站部署到服务器上。\n配置文件修改之后，执行一下命令便可以完成部署了。\n```bash\nhexo generate\nhexo deploy\n```\n\n### hexo常用命令\n* `hexo new \"post_name\"`用于生成新的文章；\n* `hexo generate`用于生成静态文件；\n* `hexo server` 用于启动本地服务；\n* `hexo deploy`用于将生成的静态文件部署到repository上。\n\n同时这四个命令还支持简写\n `hexo g` === `hexo generate`\n `hexo s` === `hexo server`\n `hexo d` === `hexo deploy`\n `hexo n` === `hexo new`\n 至此，你已经将本地的博客部署到github上。你可以通过username.github.io(`username`换成你自己的账户名)来访问你的博客了 \n\n ## 问题记录\n 在部署过程中，执行`hexo d`进行部署的时候，出现以下的错误\n **`hexo bash: /dev/tty: No such device or address`**\n ### 解决办法：\n 安装github for Window，点击这里进行[下载](https://github-windows.s3.amazonaws.com/GitHubSetup.exe),使用git shell再执行`hexo d`命令进行部署即可。\n **ps:由于github for windows 在国内安装很容易失败，自己尝试了很久也都没装上。不过网上已经有人提供了github for windows离线版，有兴趣的人可以前往[下载](http://www.cnblogs.com/fantacity/p/4347472.html)**\n ### 问题的原因：\n google找到的说法是，由于window安装的git版本问题导致的。\n","slug":"hexo/hexo-guide-1","published":1,"updated":"2016-04-04T07:05:14.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqglc001otstzhtn1o3ak"},{"title":"Git规范","date":"2016-04-09T13:41:17.000Z","_content":"经过半年的开发，现在公司内部已逐渐形成比较规范的Git规范，从分支到工作流程到发布打Tag，都形成了一套规范。特此总结下。\n# Git规范\n主要从以下三个方面介绍Git规范：\n* 分支模型\n* 工作流程\n    * Feature(新需求开发流程)\n    * Bugfix（Bug修复流程）\n* Tag规范\n# 分支模型\n 每个项目都必须要有master、dev分支。\n每个开发人员拥有一个属于自己的分支，如superman。\n如果多人共同开发一个功能，那么可以共享一个分支。\n## master分支\nmaster分支只能存在**release版本**的代码，并需要对每个release**打对应的tag**。\n## dev分支\ndev分支由master分支checkout，它的作用主要是日常开发合并代码，并与master分支做合并。\n## 开发人员自己的分支\n开发人员自己的分支，从dev分支checkout，是自己负责的功能分支的上游。\n\n# 工作流程\n开发人员在进行开发或者修复bug之前，必须要先从dev分支上拉取最新的代码。\n## Feature（新需求开发流程）\n当有新需求需要开发的时：\n1. 每个开发人员在自己的分支上checkout一个新的feature分支，如在superman的分支checkout；\n2. 在新的feature分支上进行开发；\n3. 新功能开发完毕后合并到自己的分支；\n4. 所有的人员的分支合并到dev分支，并进行测试；\n5. 测试通过后，合并到master分支，并打tag（tag示例：`REG_20160408_01`）。\n\n## Bugfix（Bug修复流程）\n这里又区分线上的Bug和开发测试阶段的Bug\n### 线上的Bug\n1. 开发人员从master分支chekcout一个新的bugfix分支，命名为：dev_bugfix（如有必，可以添加日期后缀dev_bugfix_20160409）；\n2. 开发人员在该分支上进行Bug修复；\n3. Bug修复后，提交测试；\n4. 测试通过后，合并到master分支，并打tag（tag示例：`REG_20160409_01`，如果是紧急程度非常高的Bug，可用`HOTFIX_20160409_01`）；\n5. 将master分支合并到dev分支，确保dev分支拥有master分支最新的代码。\n\n### 开发测试阶段的Bug\n1. 根据Bug所属的功能分支，分配到对应的开发人员；\n2. 开发人员直接在新feature所属的分支上进行Bug修复；\n3. Bug修复后，合并到自己的分支上，再合并到dev分支上；\n4. 提交测试。\n\n# Tag命名规范\n## 格式：`前缀_日期_序号`\n* 前缀：表示项目的各个阶段\n    * DEV：表示开发阶段，不可发布线上版本，一般用于开发完成后提测打的tag\n    * REG：表示常规发布，可以发布线上版本\n    * HOT：表示紧急修复，经测试通过后可以发布线上版本\n    * QUICK：表示纯web形式的发布，不涉及db变化\n* 日期：一般为当天的日期\n* 序号：两位数字，从01开始递增。因为一天内可能会有多个tag。\n示例：`REG_20160408_01`\n\n","source":"_posts/git/git-standard.md","raw":"---\ntitle: Git规范\ndate: 2016-04-09 21:41:17\ntags:\n- Git\n- Git规范\n---\n经过半年的开发，现在公司内部已逐渐形成比较规范的Git规范，从分支到工作流程到发布打Tag，都形成了一套规范。特此总结下。\n# Git规范\n主要从以下三个方面介绍Git规范：\n* 分支模型\n* 工作流程\n    * Feature(新需求开发流程)\n    * Bugfix（Bug修复流程）\n* Tag规范\n# 分支模型\n 每个项目都必须要有master、dev分支。\n每个开发人员拥有一个属于自己的分支，如superman。\n如果多人共同开发一个功能，那么可以共享一个分支。\n## master分支\nmaster分支只能存在**release版本**的代码，并需要对每个release**打对应的tag**。\n## dev分支\ndev分支由master分支checkout，它的作用主要是日常开发合并代码，并与master分支做合并。\n## 开发人员自己的分支\n开发人员自己的分支，从dev分支checkout，是自己负责的功能分支的上游。\n\n# 工作流程\n开发人员在进行开发或者修复bug之前，必须要先从dev分支上拉取最新的代码。\n## Feature（新需求开发流程）\n当有新需求需要开发的时：\n1. 每个开发人员在自己的分支上checkout一个新的feature分支，如在superman的分支checkout；\n2. 在新的feature分支上进行开发；\n3. 新功能开发完毕后合并到自己的分支；\n4. 所有的人员的分支合并到dev分支，并进行测试；\n5. 测试通过后，合并到master分支，并打tag（tag示例：`REG_20160408_01`）。\n\n## Bugfix（Bug修复流程）\n这里又区分线上的Bug和开发测试阶段的Bug\n### 线上的Bug\n1. 开发人员从master分支chekcout一个新的bugfix分支，命名为：dev_bugfix（如有必，可以添加日期后缀dev_bugfix_20160409）；\n2. 开发人员在该分支上进行Bug修复；\n3. Bug修复后，提交测试；\n4. 测试通过后，合并到master分支，并打tag（tag示例：`REG_20160409_01`，如果是紧急程度非常高的Bug，可用`HOTFIX_20160409_01`）；\n5. 将master分支合并到dev分支，确保dev分支拥有master分支最新的代码。\n\n### 开发测试阶段的Bug\n1. 根据Bug所属的功能分支，分配到对应的开发人员；\n2. 开发人员直接在新feature所属的分支上进行Bug修复；\n3. Bug修复后，合并到自己的分支上，再合并到dev分支上；\n4. 提交测试。\n\n# Tag命名规范\n## 格式：`前缀_日期_序号`\n* 前缀：表示项目的各个阶段\n    * DEV：表示开发阶段，不可发布线上版本，一般用于开发完成后提测打的tag\n    * REG：表示常规发布，可以发布线上版本\n    * HOT：表示紧急修复，经测试通过后可以发布线上版本\n    * QUICK：表示纯web形式的发布，不涉及db变化\n* 日期：一般为当天的日期\n* 序号：两位数字，从01开始递增。因为一天内可能会有多个tag。\n示例：`REG_20160408_01`\n\n","slug":"git/git-standard","published":1,"updated":"2016-05-06T15:07:28.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqglg001qtstzzay3ocjq"},{"title":"随笔系列","date":"2016-02-21T06:38:42.000Z","_content":"# 随笔\n待完善。。。","source":"_posts/essays/write.md","raw":"---\ntitle: 随笔系列\ndate: 2016-02-21 14:38:42\ntags: 随笔\n---\n# 随笔\n待完善。。。","slug":"essays/write","published":1,"updated":"2016-02-21T13:44:14.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqglk001vtstzm2hsxm93"},{"title":"2016阅读书单","date":"2016-04-30T14:58:19.000Z","_content":"记录2016阅读过的书籍\n<!-- more -->\n# 2016-04-阅读列表\n## 《暗时间》\n详见暗时间读书笔记[查看笔记](http://supemran66.github.io/2016/04/30/essays/darktime-reading-note/)\n# 2016-03-阅读列表\n## 《高危地带》\n一本讲述了埃博拉病毒的产生以及历史。对埃博拉这种强大的病毒有了比较全面的认识，原来这世界上还存在着比艾滋病还厉害的病毒。同样是目前尚无医学治疗方法的病毒，艾滋病和埃博拉比较起来可是温柔得太多太多。艾滋病会有潜伏期，而且艾滋病只是攻击人身体的免疫系统，对人类其它器官并不会产生致命性伤害。而埃博拉病毒则不同，发病期短至5到7天，同时埃博拉会攻击人类的肝脏等器官，感染者将承受巨大的痛苦并死去。\n## 《你不知道的JavaScript（上）》\n作为JavaScript界风头很大的新书，又怎么能错过呢？看到早读课的“21天阅读行动”的书单中包含这本书，但是还是没有去报名参加。自己默默根据自身情况进行选择性阅读，主要集中在第一部分：作用域和闭包，以及第二部分第一章：关于this。\n虽然进度不快，但每一章都看得非常仔细并做了读书笔记。非常不错的一本书，特别是关于javascript的作用域这部分的内容，用非常易懂的语言解释了内在的原理。如果你对js的作用域和变量提升相关问题还有困惑，那么你应该阅读这本书了。\n* 【你不知道的JavasSript(上)读书笔记】第1章：作用域（[查看笔记](http://superman66.github.io/2016/03/12/you-donot-konw-javascript-reading-notes/)）\n* 【你不知道的JavasSript(上)读书笔记】第2章：词法作用域（[查看笔记](http://superman66.github.io/2016/03/15/you-donot-konw-javascript-reading-notes-2/)）\n## 《JavaScript高级程序设计（第三版）》\nJavaScript的经典之作，依然采用按需阅读+读书笔记方式进行学习。主要学习了`面向对象程序设计`和`事件`这两章。`面对对象程序设计`这一章讲得非常详细，深入理解了创建对象的8种方式，以及理解了JavaScript中关于原型链继承的问题。\n* 【JavaScript高程学习笔记】面向对象的程序设计之继承（[查看笔记](http://superman66.github.io/2016/03/06/javascript-inherit/)）\n* 【JavaScript高程学习笔记】面向对象的程序设计之对象（[查看笔记](http://superman66.github.io/2016/02/26/javascript-learning-object)）\n## 《JavaScript权威指南》\n这本书的权威性就不用多说了。确实是一本质量非常高的书。结合上面两本书，深入学习了作用域和变量提升。\n* 深入理解变量声明提升和函数声明提升([查看笔记](http://superman66.github.io/2016/03/05/javascript-hoisting/))\n# 2016-02-阅读列表\n## 《把时间当朋友》- 很不错的一本关于时间与精力的书。\n\n书中有个观点非常有意思：利用黄金分割法来规划你的时间。如果你一天可以规划的时间有10个小时，那么大概用6.18小时去工作学习，剩下的大约3.82小时去享受欢乐。我们总想着一直保持高效率的运转，但这是不切实际的。所以不妨试试这个方法来规划你的时间。\n\n## 《当我跑步时，我谈些什么》- 村上春树的经典之作\n\n喜欢就一个理由，不喜欢却有千千万万的借口。为什么我现在还没有开始跑步呢，可能是自己还没找到一个可以为之坚持的理由吧！\n\n## 《高效程序员的45个习惯》- 论程序猿的自我修养\n\n程序猿学习应该是迭代和增量式学习。每天用一定时间来学习新技术，不需要很多时间，但要经常进行。记录新的技术，在计划时间学习。ps:这不就是互联网的节奏嘛，快速迭代，小步快跑。\n\n## 《小强升职记》 - 这名字无力吐槽了，但是不能以貌取人\n\n\n实操性非常强的一本书，感谢这本书让我获得了行动计划的习惯。当然了，书中还提到很多非常行之有效的办法，只不过我没学到。\n\n## 《程序员跳槽全攻略》 - 其实是我想跳槽了\n\n\n就算是不想跳槽的程序猿也值得看一看。因为总有一天你也会面临跳槽的问题。\n\n## 《人类简史》 - 别被名字吓到了，内容和文字非常浅显易懂！\n\n“现代人类的各种破坏大自然的行为，被很多人称呼是“自然的毁灭”。然而，这其实并不能算是“毁灭”，而只是“改变”。自然是无法“毁灭”的。6500万年前，一颗陨石让恐龙灭绝，但却为哺乳类动物开启了一条康庄大道。今天，人类正在让许多物种灭绝，甚至可能包括自己。但即使如此，还是有某些生物过得生龙活虎。举例来说，老鼠和蟑螂可说是正在全盛时期。如果今天发生核灾而让世界末日降临，这些顽强的动物很有可能就会从闷烧的废墟里爬出来，准备好继续将自己的DNA传给千代万代。或许，现在的6500万年后，会有一群高智商的老鼠心怀感激地回顾人类造成的这场灾难，就像我们现在感谢那颗杀死恐龙的陨石一般。” 细思极恐！\n","source":"_posts/essays/reading-list-2016.md","raw":"---\ntitle: 2016阅读书单\ndate: 2016-04-30 22:58:19\ntags:\n- 阅读书单\n- 随笔\n---\n记录2016阅读过的书籍\n<!-- more -->\n# 2016-04-阅读列表\n## 《暗时间》\n详见暗时间读书笔记[查看笔记](http://supemran66.github.io/2016/04/30/essays/darktime-reading-note/)\n# 2016-03-阅读列表\n## 《高危地带》\n一本讲述了埃博拉病毒的产生以及历史。对埃博拉这种强大的病毒有了比较全面的认识，原来这世界上还存在着比艾滋病还厉害的病毒。同样是目前尚无医学治疗方法的病毒，艾滋病和埃博拉比较起来可是温柔得太多太多。艾滋病会有潜伏期，而且艾滋病只是攻击人身体的免疫系统，对人类其它器官并不会产生致命性伤害。而埃博拉病毒则不同，发病期短至5到7天，同时埃博拉会攻击人类的肝脏等器官，感染者将承受巨大的痛苦并死去。\n## 《你不知道的JavaScript（上）》\n作为JavaScript界风头很大的新书，又怎么能错过呢？看到早读课的“21天阅读行动”的书单中包含这本书，但是还是没有去报名参加。自己默默根据自身情况进行选择性阅读，主要集中在第一部分：作用域和闭包，以及第二部分第一章：关于this。\n虽然进度不快，但每一章都看得非常仔细并做了读书笔记。非常不错的一本书，特别是关于javascript的作用域这部分的内容，用非常易懂的语言解释了内在的原理。如果你对js的作用域和变量提升相关问题还有困惑，那么你应该阅读这本书了。\n* 【你不知道的JavasSript(上)读书笔记】第1章：作用域（[查看笔记](http://superman66.github.io/2016/03/12/you-donot-konw-javascript-reading-notes/)）\n* 【你不知道的JavasSript(上)读书笔记】第2章：词法作用域（[查看笔记](http://superman66.github.io/2016/03/15/you-donot-konw-javascript-reading-notes-2/)）\n## 《JavaScript高级程序设计（第三版）》\nJavaScript的经典之作，依然采用按需阅读+读书笔记方式进行学习。主要学习了`面向对象程序设计`和`事件`这两章。`面对对象程序设计`这一章讲得非常详细，深入理解了创建对象的8种方式，以及理解了JavaScript中关于原型链继承的问题。\n* 【JavaScript高程学习笔记】面向对象的程序设计之继承（[查看笔记](http://superman66.github.io/2016/03/06/javascript-inherit/)）\n* 【JavaScript高程学习笔记】面向对象的程序设计之对象（[查看笔记](http://superman66.github.io/2016/02/26/javascript-learning-object)）\n## 《JavaScript权威指南》\n这本书的权威性就不用多说了。确实是一本质量非常高的书。结合上面两本书，深入学习了作用域和变量提升。\n* 深入理解变量声明提升和函数声明提升([查看笔记](http://superman66.github.io/2016/03/05/javascript-hoisting/))\n# 2016-02-阅读列表\n## 《把时间当朋友》- 很不错的一本关于时间与精力的书。\n\n书中有个观点非常有意思：利用黄金分割法来规划你的时间。如果你一天可以规划的时间有10个小时，那么大概用6.18小时去工作学习，剩下的大约3.82小时去享受欢乐。我们总想着一直保持高效率的运转，但这是不切实际的。所以不妨试试这个方法来规划你的时间。\n\n## 《当我跑步时，我谈些什么》- 村上春树的经典之作\n\n喜欢就一个理由，不喜欢却有千千万万的借口。为什么我现在还没有开始跑步呢，可能是自己还没找到一个可以为之坚持的理由吧！\n\n## 《高效程序员的45个习惯》- 论程序猿的自我修养\n\n程序猿学习应该是迭代和增量式学习。每天用一定时间来学习新技术，不需要很多时间，但要经常进行。记录新的技术，在计划时间学习。ps:这不就是互联网的节奏嘛，快速迭代，小步快跑。\n\n## 《小强升职记》 - 这名字无力吐槽了，但是不能以貌取人\n\n\n实操性非常强的一本书，感谢这本书让我获得了行动计划的习惯。当然了，书中还提到很多非常行之有效的办法，只不过我没学到。\n\n## 《程序员跳槽全攻略》 - 其实是我想跳槽了\n\n\n就算是不想跳槽的程序猿也值得看一看。因为总有一天你也会面临跳槽的问题。\n\n## 《人类简史》 - 别被名字吓到了，内容和文字非常浅显易懂！\n\n“现代人类的各种破坏大自然的行为，被很多人称呼是“自然的毁灭”。然而，这其实并不能算是“毁灭”，而只是“改变”。自然是无法“毁灭”的。6500万年前，一颗陨石让恐龙灭绝，但却为哺乳类动物开启了一条康庄大道。今天，人类正在让许多物种灭绝，甚至可能包括自己。但即使如此，还是有某些生物过得生龙活虎。举例来说，老鼠和蟑螂可说是正在全盛时期。如果今天发生核灾而让世界末日降临，这些顽强的动物很有可能就会从闷烧的废墟里爬出来，准备好继续将自己的DNA传给千代万代。或许，现在的6500万年后，会有一群高智商的老鼠心怀感激地回顾人类造成的这场灾难，就像我们现在感谢那颗杀死恐龙的陨石一般。” 细思极恐！\n","slug":"essays/reading-list-2016","published":1,"updated":"2016-04-30T15:41:35.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqglo001ytstzwkgpmgns"},{"title":"关于离职的思考","date":"2016-04-07T13:35:32.000Z","_content":"　　在拿到了宅米的offer之后，便向上司提出了离职了。这是我在添米提的第二次离职。相比较上一次，这次的提出离职的过程让我思考颇多，跟上司，跟CEO直接对话沟通。也跟爸爸、姐姐交流了我的想法和困惑。思考能不断成长，记录总结则能巩固你的思考结果。 \n　　提出离职后，先是被上司谈话了。真的是晓之以情动之以理，希望我能留下来。作为一名资深程序员，大公司和创业公司都待过的他，给出的建议确实非常得中肯。其中他提到如何看待跳槽的本质我觉得非常有道理。对于不同的人跳槽是有不同的目的。如果你是为了钱而跳槽，那么跳槽的本质就要回归到钱上面了。薪资只是一个衡量的维度，并不能因为对方的薪资看起来比较高，就觉得性价比更高。但其实不然，更应该比较的是你的时薪。他以一个很典型的例子举例说明了这个问题： \n　　“有两份工作A和B，A月薪10k，但是很轻松，有比较多的时间可以自我成长；B月薪有15k，但是工作时间久，经常晚上和周末加班。如果比较月薪的话，B似乎占有优势，但是我们将A、B工作分别转换成时薪再来对比一下。这里假设A每日工作8个小时，每周工作5天，每个月算4周，时薪为(8x5x4)/10000 = 62.5；B则是996（早上9点到晚上9点，每周上6天），时薪为 （12x6x4）/15000 = 52”。通过比较时薪就可以看出来，其实B工作的时薪并没有比A工作高。因此在跳槽的时候，如果更看重薪资的涨幅的话，那么你就不应该作为时薪的比较。默默算了下自己的时薪只有53元/小时，还得继续努力！ \n　　上司谈话结束后，又接着被CEO约谈了。先是一番好话说尽，然后加薪，比对方公司给的多（能被挽留说明你有存在的价值）。谈完薪资后，CEO就开始在传授着一些人生道理。果然听君一席话胜读十年书。CEO很少给我们灌心灵鸡汤，反而一直都是在灌输着心灵毒药，让我们认清现实的世界。其中几点我感触颇深：\n\n认清你自己 \n　　虽然说任何时候认清自己都不算晚，但是如果你在28岁就认清自己要走的道理和在35岁认清可有着巨大的差别。28岁的你可以无牵绊得去追逐自己的内心，但是35岁的你如果想要继续follow your heart，可能就显得力不从心了。所以越早认清你自己要走的道理越好。从技术角度出发，有两种典型的职业发展轨迹：专家技术型和技术转管理型。对于专家技术型，并不是每个人都适合，也不是每个人都能做到的。能做到专家的永远只有少数人。想要成为专家跟努力和天赋都分不开的。 \n　　相比之下，技术转管理型倒更符合大部分人的轨迹。因为你的能力即使再强，也只能说是你的单兵作战能力强。但现在这个社会需要的是连接和团队协作。每个研究技术到一个高度后的it人员，在后面的职业生涯中肯定会遇到如何带团队的问题。带一个团队你要懂技术、拥有良好的沟通能力（很多技术人员沟通能力确实有待提高，自勉~），管理能力、情商还不能太低（情商低的人基本上都不受欢迎）等等一些能力。都说管理是一门技术、一门艺术。因此如果你认清了自己要走的这条道路之后，已经可以预见到在未来你会碰到带团队的问题，那么你为什么不从现在就去开始培养这些能力？\n关于投资和理财 \n　　30岁之前拼命赚钱，30岁之后用一部分资产做投资来获得收益，利用工作来获得现金流维持正常生活的运转。这样就可以保证了一定程度上的财务自由。\n选择比努力更重要 \n　　我想要跳槽的那家公司是做校园Ｏ2O，我现在待的公司是做互联网金融。CEO就谈到，他觉得互联网金融这个领域中国还开始处于起步阶段，因为中国的金融正在朝着金融市场化的方向在发展。所以互联网金融还是存在比较多的机会。而校园O2O是消费场景，面对的是广大的用户。经过美团和大众点评的合并，O2O这个行业已经进入了红海阶段。因此在选择一家公司的时候，不仅要看公司的软硬条件是否符合自己的预期，也要判断市场行业的趋势，毕竟如果方向选择对了，那么剩下的就是努力的问题了。\n这次算是和CEO进行一次比较深入的对话。沟通交流最奇妙的地方就在于能让1+1产生大于2的效果。","source":"_posts/essays/leave-office.md","raw":"---\ntitle: 关于离职的思考\ndate: 2016-04-07 21:35:32\ntags:\n- 随笔\n---\n　　在拿到了宅米的offer之后，便向上司提出了离职了。这是我在添米提的第二次离职。相比较上一次，这次的提出离职的过程让我思考颇多，跟上司，跟CEO直接对话沟通。也跟爸爸、姐姐交流了我的想法和困惑。思考能不断成长，记录总结则能巩固你的思考结果。 \n　　提出离职后，先是被上司谈话了。真的是晓之以情动之以理，希望我能留下来。作为一名资深程序员，大公司和创业公司都待过的他，给出的建议确实非常得中肯。其中他提到如何看待跳槽的本质我觉得非常有道理。对于不同的人跳槽是有不同的目的。如果你是为了钱而跳槽，那么跳槽的本质就要回归到钱上面了。薪资只是一个衡量的维度，并不能因为对方的薪资看起来比较高，就觉得性价比更高。但其实不然，更应该比较的是你的时薪。他以一个很典型的例子举例说明了这个问题： \n　　“有两份工作A和B，A月薪10k，但是很轻松，有比较多的时间可以自我成长；B月薪有15k，但是工作时间久，经常晚上和周末加班。如果比较月薪的话，B似乎占有优势，但是我们将A、B工作分别转换成时薪再来对比一下。这里假设A每日工作8个小时，每周工作5天，每个月算4周，时薪为(8x5x4)/10000 = 62.5；B则是996（早上9点到晚上9点，每周上6天），时薪为 （12x6x4）/15000 = 52”。通过比较时薪就可以看出来，其实B工作的时薪并没有比A工作高。因此在跳槽的时候，如果更看重薪资的涨幅的话，那么你就不应该作为时薪的比较。默默算了下自己的时薪只有53元/小时，还得继续努力！ \n　　上司谈话结束后，又接着被CEO约谈了。先是一番好话说尽，然后加薪，比对方公司给的多（能被挽留说明你有存在的价值）。谈完薪资后，CEO就开始在传授着一些人生道理。果然听君一席话胜读十年书。CEO很少给我们灌心灵鸡汤，反而一直都是在灌输着心灵毒药，让我们认清现实的世界。其中几点我感触颇深：\n\n认清你自己 \n　　虽然说任何时候认清自己都不算晚，但是如果你在28岁就认清自己要走的道理和在35岁认清可有着巨大的差别。28岁的你可以无牵绊得去追逐自己的内心，但是35岁的你如果想要继续follow your heart，可能就显得力不从心了。所以越早认清你自己要走的道理越好。从技术角度出发，有两种典型的职业发展轨迹：专家技术型和技术转管理型。对于专家技术型，并不是每个人都适合，也不是每个人都能做到的。能做到专家的永远只有少数人。想要成为专家跟努力和天赋都分不开的。 \n　　相比之下，技术转管理型倒更符合大部分人的轨迹。因为你的能力即使再强，也只能说是你的单兵作战能力强。但现在这个社会需要的是连接和团队协作。每个研究技术到一个高度后的it人员，在后面的职业生涯中肯定会遇到如何带团队的问题。带一个团队你要懂技术、拥有良好的沟通能力（很多技术人员沟通能力确实有待提高，自勉~），管理能力、情商还不能太低（情商低的人基本上都不受欢迎）等等一些能力。都说管理是一门技术、一门艺术。因此如果你认清了自己要走的这条道路之后，已经可以预见到在未来你会碰到带团队的问题，那么你为什么不从现在就去开始培养这些能力？\n关于投资和理财 \n　　30岁之前拼命赚钱，30岁之后用一部分资产做投资来获得收益，利用工作来获得现金流维持正常生活的运转。这样就可以保证了一定程度上的财务自由。\n选择比努力更重要 \n　　我想要跳槽的那家公司是做校园Ｏ2O，我现在待的公司是做互联网金融。CEO就谈到，他觉得互联网金融这个领域中国还开始处于起步阶段，因为中国的金融正在朝着金融市场化的方向在发展。所以互联网金融还是存在比较多的机会。而校园O2O是消费场景，面对的是广大的用户。经过美团和大众点评的合并，O2O这个行业已经进入了红海阶段。因此在选择一家公司的时候，不仅要看公司的软硬条件是否符合自己的预期，也要判断市场行业的趋势，毕竟如果方向选择对了，那么剩下的就是努力的问题了。\n这次算是和CEO进行一次比较深入的对话。沟通交流最奇妙的地方就在于能让1+1产生大于2的效果。","slug":"essays/leave-office","published":1,"updated":"2016-05-06T15:07:41.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqglu0022tstz8p9ic6qv"},{"title":"【随笔】入坑机械键盘","date":"2016-03-21T16:21:48.000Z","_content":"入手人生第二机械键盘\n<!-- more -->\n前天晚上在别人的博客上看到了介绍**酷冷至尊XT**的文章，有半价filco之称。最致命的就是他给键盘拍的照片，深深地吸引了我。原来机械键盘还可以拍得这么好看。立马就去京东买下了这把键盘：酷冷至尊 XT 红轴，因为我已经有一把青轴了，那键盘敲击声和段落感简直爽。\n键盘到手后第一件事就是为键盘拍照，毕竟我可是看了照片才决定要买的。拿出单反，换上50mm的镜头，打上黄色的灯光。原来我特么也可以将一个键盘拍得这么好看。\n\n\n----------------------------\n![](http://7xr6yj.com1.z0.glb.clouddn.com/hexo_keyboard-1.jpg)\n\n\n----------------------------\n![2](http://7xr6yj.com1.z0.glb.clouddn.com/hexo_keyboard-2.jpg)\n\n\n----------------------------\n这世界上有两样是用了就再也不回去的东西，一个是固态硬盘（这年头没装个ssd都不好意思说你是写代码的），另外一个就是机械键盘。\n一开始可能你还无法感受到机械键盘和薄膜键盘的区别。等到时间一久之后，再用回薄膜键盘，那手感简直弱爆了。在买回这把机械键盘后，我已经把家里所有的薄膜键盘都扔了，再也不要用它们了。就是这么任性！\n\n\n","source":"_posts/essays/essays-mechanical-keyboard.md","raw":"---\ntitle: 【随笔】入坑机械键盘\ndate: 2016-03-22 00:21:48\ntags:\n- 随笔\n- 机械键盘\n---\n入手人生第二机械键盘\n<!-- more -->\n前天晚上在别人的博客上看到了介绍**酷冷至尊XT**的文章，有半价filco之称。最致命的就是他给键盘拍的照片，深深地吸引了我。原来机械键盘还可以拍得这么好看。立马就去京东买下了这把键盘：酷冷至尊 XT 红轴，因为我已经有一把青轴了，那键盘敲击声和段落感简直爽。\n键盘到手后第一件事就是为键盘拍照，毕竟我可是看了照片才决定要买的。拿出单反，换上50mm的镜头，打上黄色的灯光。原来我特么也可以将一个键盘拍得这么好看。\n\n\n----------------------------\n![](http://7xr6yj.com1.z0.glb.clouddn.com/hexo_keyboard-1.jpg)\n\n\n----------------------------\n![2](http://7xr6yj.com1.z0.glb.clouddn.com/hexo_keyboard-2.jpg)\n\n\n----------------------------\n这世界上有两样是用了就再也不回去的东西，一个是固态硬盘（这年头没装个ssd都不好意思说你是写代码的），另外一个就是机械键盘。\n一开始可能你还无法感受到机械键盘和薄膜键盘的区别。等到时间一久之后，再用回薄膜键盘，那手感简直弱爆了。在买回这把机械键盘后，我已经把家里所有的薄膜键盘都扔了，再也不要用它们了。就是这么任性！\n\n\n","slug":"essays/essays-mechanical-keyboard","published":1,"updated":"2016-03-21T16:55:54.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgly0024tstz1ifxmj7s"},{"title":"《暗时间》读书笔记","date":"2016-04-30T14:58:21.000Z","_content":"一本豆瓣评分8.5分的书，忘记是从哪个地方了解到这本书，只记得被暗时间这个书名吸引了，于是第一时间看起来了。第一篇顺着目录，挑着感兴趣的话题读了一遍。第二遍的时候，从头到尾，一字一句得看完了。本来这篇读书笔记应该在更早的几天就该完成了，可是总是想着等做完思维导图才开始动笔写。然而这思维导图憋了几天也没完成，于是索性先放弃思维导图，转向写文章了\n\n>《暗时间》以心理学、认知科学和神经科学为主要角度，对学习心理学的意义、日常生活中人们如何进行思考，不同的思维方式会带来怎样的价值，何种学习方法才是有效的，以及在数学和计算机科学学习过程中如何分析问题并解决问题都做了详细的阐述，强调人们需要主动训练自身的反思能力并掌握有效的思考方法。\n\n看一本书，如果不能迭代你的认知与知识的话，那就不能叫学习，只能称为娱乐。因为你只是在重复了解你原本就已经知道的知识。下面的几个部分是我看完《暗时间》后的被迭代的。\n## 暗时间是什么\n作者用了比较大的篇幅介绍了暗时间的意义。其中有一个比喻非常形象：\n> 如果你有一台计算机，你装了一个系统之后就整天把他搁置在那里，你觉得这台计算机被实际使用了吗？没有，因为CPU整天运行的就是空闲进程。运行空闲进程也是一天，运行大数据量计算的程序也是一天，对于CPU来说同样的一天，价值却是完全不一样。\n\n非常生动形象的比喻。了解过计算机的人一看这个比喻就立马明白了什么是暗时间的意义。作者接着又举了一个更普通的例子来说明：\n>如果你正在学习一门专业，你使用自己所投入的天数来衡量，很容易就产生一种错觉，认为投入了不少时间，然而其实，“投入时间”这个说法本身就是荒唐的，实际投入的是时间和效率的乘积。\n\n通过上面两个举例，相信你可以很明了暗时间有什么意义了。作者认为，所谓**暗时间就是你的思维时间**，你走路，买菜，洗脸洗手，坐公交，逛街、出游、吃饭、睡觉所有的这些时间都可以成为暗时间，你可以充分利用这些时间思考，反刍和消化平时看和读的东西，让你的认识能够脱离照本宣科的层面。这段时间看起来微不足道，但日积月累将产生庞大的效应。能够充分利用暗时间的人将无形中多出一大块生命。牛逼的人不仅在自己擅长的领域非常牛逼，连在“业务、兴趣“的领域也特别的牛逼。每每看到这样的人，总是会疑惑，他们怎么哪里来的这么多时间，居然可以在这么多个领域达到如此卓越的地步。或许其中一个原因就是牛逼的人特别善于利用暗时间。\n这是一个非常具有实用价值的概念。尤其是在移动互联网空前发达的今天，随处可见低头一族。吃饭时刷刷朋友圈，看看新闻；等车时刷刷微博；挤地铁时又掏出手机刷着各种公众号文章。大部分的暗时间已经被手机占领了，每天接触着大量的信息，却没有花时间消化，那么多信息你只是看过而已，如果没有进一步的回顾、整理以及内化，看过的文章其实没有在你脑子留下任何有价值的信息。信息过载等同于没有信息。\n现在的我已经逐渐在学习排除干扰因素，增加暗时间来思考了。\n* 关闭朋友圈，减少每天频繁刷朋友圈的次数\n* 每天早上等公交，等地铁的时间用来思考，千万别看手机\n* 地铁拥挤的时候无法看书，也将其纳入暗时间，用来思考。思考的内容包括但不限于：今天的工作计划、近期的阅读计划、待写的文章、人生思考等。\n* 其他暗时间还在慢慢纳入\n\n要想充分利用好暗时间，还需要一个非常重要的技能：**专注，不仅包括能快速进入专注的状态，还包括能够长期保持专注状态。这两个是高效学习最重要的习惯**。\n不得不承认，专注力已经作为一种稀缺资源了。生活中充满着各种分散你注意力的事物，qq消息，邮件提醒，微信消息提醒，朋友圈动态提醒等等太多了。稍微没有控制住，你的注意力就被分散，你就无法专注了。解决这个办法很简单：杜绝一切干扰因素，关闭手机提醒、邮件提醒、qq消息提醒、微信消息提醒，甚至在必要的时候可以断网。\n除了专注，还有一个高效的习惯：**抗干扰**。\n>只有超强的抗干扰能力，才能有效地利用起前面提到的各种暗时间。\n\n因为大多数的暗时间都是处于室外复杂，喧闹的环境，干扰的因素很多。还好抗干扰能力也是可以练习出来的。\n于我而言，现在每天上班的地铁时间，就是我高效看书的时间。一开始也是无法专心在那么嘈杂的环境下安心专注得看书，但经过近半年的训练，在地铁中，现在已经能非常快速得进入阅读状态了。事实证明在有干扰的环境中看书是非常锻炼专注能力的一个办法。另外作者还提到，经常利用各种碎片时间阅读和思考，对迅速集中注意力和保持注意力都非常有帮助。\n\n## 设计自己的进度条\n设计进度条其实和流行的GTD方法学类似，其核心理念在于\n>如果你把任务分割了，你就有了进度条，你就知道，事情是在不断紧张，你总会完成任务或到达你的目标，你会有一个时间估计。反之，如果没有这个分割，整个的任务或目标对你而言就只有两种状态——“完成”和“未完成”\n\n有接触过GTD（Get Thing Done）的人都明白，GTD的方法论就是记录下你所有要做的事，然后再去安排、执行（这是最初级的阶段）。更深入一点的GTD则是：列下所有要做的事，**对每件事都进行拆分**。对于要做的这件事，你可以实际采取的下一步行动是什么。以此类推，每一步都去分析**下一步行动**。到最后的结果便是，一件事就会被拆分成多个下一步行动，每一个行动都是可以实际做到的。这样下来，Get Thing Done就是一件顺理成章的事。\n\n如果我们对于任务或者目标没有进行合理得设计进度条，那么在目标达到之前，你的状态就会一直都是“未完成”，一次又一次的未完成会耗尽你的耐心，让你下意识的产生“这事什么时候才能完成呢？“的疑惑，没有分而治之，你就不知道未来还需要付出多少努力才能达到目的，这样导致的后果就是你会心生怯意，不敢进一步投入时间，免得血本无归。在这要的心理下，不少人就会选择保守策略——退出。设计进度条就是基于人的这种心理弱点，如果你对整个目标的几个重大步骤都有清晰的界定，能够对每个步骤的耗时作出靠谱的上界估计，你就不会被不确定的未来，不确定的时间投入感到恐惧。就会心生退意。\n所以作者就提出了\n>不要过早退出循环\n\n因为即使是设计了进度条，在遇到困难时，大部分的人依然会想到退出、逃避。我们在尝试新事物的时候，会遇到各种各样的困难，不同的人会在碰壁不同的次数之后退出。\n>用程序员喜欢的话就是，我们都在for循环，区别在于你是什么情况下break；有的人退出阙值高，这是能坚持的一类人；有的人退出阙值低，一遇到困难就退出了。\n\n最喜欢这种用程序比喻了，高度贴切。就好比笑点有高有低，坚持阙值也有高有低，下次要放弃之前，先问问自己“难道你是容易放弃的人吗？”。\n>过早退出是一切失败的根源\n\n## 靠专业技能的成功最具有可复制性\n如果说世界上有一种成功可以复制，那也只有靠专业技能的成功可以称得上这种成功了。因为它只需要的只是你在一个领域坚持不懈地专注下去，只需要选择一个不算不太靠谱的方向，然后专心致志得专下去，最后必然能成为高手或者绝顶高手。世界上有很多成功带有偶然因素和运气成分或出身环境，但至少这一样，被无数人复制了无数遍，否则就不会存在学校和教育了。\n\n## 为什么你应该（从现在开始）写博客\n因为写博客有很多好处，却没有任何明显的坏处。\n* 能够交到很多志同道合的朋友\n* 写博客就是对你思考结果、学习结果的再次整理\n 自从开始开通博客之后，每次都会将学习过程记录成博客。每次在写博客的过程中，为了能让自己可以表达更清楚明了，又会趋使我去深入了解。\n* 教是最好的学；\n>为了让一个不明白的人做到明白，你必须要知道从明白到不明白他究竟需要掌握哪些概念，这就迫使我们对我们大脑中的整个知识体系来个寻根究底，把大脑中的那些我们知道，但不知道自己知道的潜在概念或假设都挖出来，把它们从内隐记忆拉扯到外显记忆中。因为只有完全知道，并知道自己知道一切来龙去脉的人，才能真正把一件事情讲得通通透透。\n* 激励你去持续学习和思考\n刚开始可能觉得没有什么内容可以写，这个时候，为了更新博客，我会去逼迫自己为了写而写。看完一本书，会逼迫自己写点读书笔记（就好比这篇文章）；学完一个知识后，我会逼迫自己将学习过程、总结记录下来。写的过程，又促使我进行了二次思考和学习。\n* 学会持之以恒的做一件事情\n如果有什么是我希望坚持做下去的话，那么写博客将会是我的第一选择。\n* 一个长期的价值博客是一份很好的简历。\n作为程序员，拥有自己的网站或者博客，你已经比大多数人进步了。如果能长期坚持写下去，那更是超越了全国90%的用户了（数字纯属杜撰）。一个好的博客就应该如同朋友圈，新朋友通过朋友圈可以大致了解你；博客则是一个让别人了解自己的窗口。（这里的简历指广义上的简历：别人了解自己的窗口）\n\n## 什么才是你不可替代性和核心竞争力\n物依稀为贵，这条最基本经济学铁律已是深入人心。人才在社会上的本质就是一种商品，而商品的稀缺性决定着商品的价值。稀缺性，换种说法就是不可替代性。不可替代性越强，价格就会越高。\n那么如何构筑自己的个人知识体系，提高自己的稀缺性呢？\n作者通过观察得出一个观点：\n>个人的核心竞争力是他独特的个性、知识、经验组合。如果这种组合\n1、绝无仅有\n2、在实践中有价值\n3、具有可持续发展性\n那你就具有核心竞争力。\n\n作者认为以下的知识技能组合是具有相当程度的不可替代性：\n>1、专业技能：成为一个专业领域的专家，你的专业技能越强，在这个领域的不可替代性就越高。\n2、跨领域的技能：解决问题的能力，创新思维，判断与决策能力，Critical-Thinking(批判性思维)，表达沟通能力，Open Mind等。\n3、学习能力：严格来说学习能力也属于跨领域的技能，但由于实在太重要，并且跨任何领域，所以独立出来。如果培养学习能力，就是持续学习和思考新知识\n4、性格要素：专注、持之以恒、自省（意识到自己的问题所在的能力，这是改进自身的大前提）、好奇心、自信、谦卑等等\n\n不管所处哪个行业，上面所说的四个技能都是适用的。作为程序员，专业技能这点是毋庸置疑的。但也千万别忘了培养后面三种技能。专业技能决定了你能走多远，而后面的技能却决定着你能飞多高。\n\n## 精彩摘录\n>1、兴趣遍地都是，专注和持之以恒才是真正稀缺的。\n2、人与人的差距不在资质上，而在花在思考的时间与思考的深度上\n3、靠专业技能的成功是最具有可复制性的\n4、大学期间，最不缺的就是业余时间，最缺的就是专注精神，非凡的注意力造就非凡的专家\n\n参考资料\n来源： http://baike.baidu.com/subview/3147362/11243902.htm#viewPageContent","source":"_posts/essays/darktime-reading-note.md","raw":"---\ntitle: 《暗时间》读书笔记\ndate: 2016-04-30 22:58:21\ntags:\n- 随笔\n- 读书笔记\n---\n一本豆瓣评分8.5分的书，忘记是从哪个地方了解到这本书，只记得被暗时间这个书名吸引了，于是第一时间看起来了。第一篇顺着目录，挑着感兴趣的话题读了一遍。第二遍的时候，从头到尾，一字一句得看完了。本来这篇读书笔记应该在更早的几天就该完成了，可是总是想着等做完思维导图才开始动笔写。然而这思维导图憋了几天也没完成，于是索性先放弃思维导图，转向写文章了\n\n>《暗时间》以心理学、认知科学和神经科学为主要角度，对学习心理学的意义、日常生活中人们如何进行思考，不同的思维方式会带来怎样的价值，何种学习方法才是有效的，以及在数学和计算机科学学习过程中如何分析问题并解决问题都做了详细的阐述，强调人们需要主动训练自身的反思能力并掌握有效的思考方法。\n\n看一本书，如果不能迭代你的认知与知识的话，那就不能叫学习，只能称为娱乐。因为你只是在重复了解你原本就已经知道的知识。下面的几个部分是我看完《暗时间》后的被迭代的。\n## 暗时间是什么\n作者用了比较大的篇幅介绍了暗时间的意义。其中有一个比喻非常形象：\n> 如果你有一台计算机，你装了一个系统之后就整天把他搁置在那里，你觉得这台计算机被实际使用了吗？没有，因为CPU整天运行的就是空闲进程。运行空闲进程也是一天，运行大数据量计算的程序也是一天，对于CPU来说同样的一天，价值却是完全不一样。\n\n非常生动形象的比喻。了解过计算机的人一看这个比喻就立马明白了什么是暗时间的意义。作者接着又举了一个更普通的例子来说明：\n>如果你正在学习一门专业，你使用自己所投入的天数来衡量，很容易就产生一种错觉，认为投入了不少时间，然而其实，“投入时间”这个说法本身就是荒唐的，实际投入的是时间和效率的乘积。\n\n通过上面两个举例，相信你可以很明了暗时间有什么意义了。作者认为，所谓**暗时间就是你的思维时间**，你走路，买菜，洗脸洗手，坐公交，逛街、出游、吃饭、睡觉所有的这些时间都可以成为暗时间，你可以充分利用这些时间思考，反刍和消化平时看和读的东西，让你的认识能够脱离照本宣科的层面。这段时间看起来微不足道，但日积月累将产生庞大的效应。能够充分利用暗时间的人将无形中多出一大块生命。牛逼的人不仅在自己擅长的领域非常牛逼，连在“业务、兴趣“的领域也特别的牛逼。每每看到这样的人，总是会疑惑，他们怎么哪里来的这么多时间，居然可以在这么多个领域达到如此卓越的地步。或许其中一个原因就是牛逼的人特别善于利用暗时间。\n这是一个非常具有实用价值的概念。尤其是在移动互联网空前发达的今天，随处可见低头一族。吃饭时刷刷朋友圈，看看新闻；等车时刷刷微博；挤地铁时又掏出手机刷着各种公众号文章。大部分的暗时间已经被手机占领了，每天接触着大量的信息，却没有花时间消化，那么多信息你只是看过而已，如果没有进一步的回顾、整理以及内化，看过的文章其实没有在你脑子留下任何有价值的信息。信息过载等同于没有信息。\n现在的我已经逐渐在学习排除干扰因素，增加暗时间来思考了。\n* 关闭朋友圈，减少每天频繁刷朋友圈的次数\n* 每天早上等公交，等地铁的时间用来思考，千万别看手机\n* 地铁拥挤的时候无法看书，也将其纳入暗时间，用来思考。思考的内容包括但不限于：今天的工作计划、近期的阅读计划、待写的文章、人生思考等。\n* 其他暗时间还在慢慢纳入\n\n要想充分利用好暗时间，还需要一个非常重要的技能：**专注，不仅包括能快速进入专注的状态，还包括能够长期保持专注状态。这两个是高效学习最重要的习惯**。\n不得不承认，专注力已经作为一种稀缺资源了。生活中充满着各种分散你注意力的事物，qq消息，邮件提醒，微信消息提醒，朋友圈动态提醒等等太多了。稍微没有控制住，你的注意力就被分散，你就无法专注了。解决这个办法很简单：杜绝一切干扰因素，关闭手机提醒、邮件提醒、qq消息提醒、微信消息提醒，甚至在必要的时候可以断网。\n除了专注，还有一个高效的习惯：**抗干扰**。\n>只有超强的抗干扰能力，才能有效地利用起前面提到的各种暗时间。\n\n因为大多数的暗时间都是处于室外复杂，喧闹的环境，干扰的因素很多。还好抗干扰能力也是可以练习出来的。\n于我而言，现在每天上班的地铁时间，就是我高效看书的时间。一开始也是无法专心在那么嘈杂的环境下安心专注得看书，但经过近半年的训练，在地铁中，现在已经能非常快速得进入阅读状态了。事实证明在有干扰的环境中看书是非常锻炼专注能力的一个办法。另外作者还提到，经常利用各种碎片时间阅读和思考，对迅速集中注意力和保持注意力都非常有帮助。\n\n## 设计自己的进度条\n设计进度条其实和流行的GTD方法学类似，其核心理念在于\n>如果你把任务分割了，你就有了进度条，你就知道，事情是在不断紧张，你总会完成任务或到达你的目标，你会有一个时间估计。反之，如果没有这个分割，整个的任务或目标对你而言就只有两种状态——“完成”和“未完成”\n\n有接触过GTD（Get Thing Done）的人都明白，GTD的方法论就是记录下你所有要做的事，然后再去安排、执行（这是最初级的阶段）。更深入一点的GTD则是：列下所有要做的事，**对每件事都进行拆分**。对于要做的这件事，你可以实际采取的下一步行动是什么。以此类推，每一步都去分析**下一步行动**。到最后的结果便是，一件事就会被拆分成多个下一步行动，每一个行动都是可以实际做到的。这样下来，Get Thing Done就是一件顺理成章的事。\n\n如果我们对于任务或者目标没有进行合理得设计进度条，那么在目标达到之前，你的状态就会一直都是“未完成”，一次又一次的未完成会耗尽你的耐心，让你下意识的产生“这事什么时候才能完成呢？“的疑惑，没有分而治之，你就不知道未来还需要付出多少努力才能达到目的，这样导致的后果就是你会心生怯意，不敢进一步投入时间，免得血本无归。在这要的心理下，不少人就会选择保守策略——退出。设计进度条就是基于人的这种心理弱点，如果你对整个目标的几个重大步骤都有清晰的界定，能够对每个步骤的耗时作出靠谱的上界估计，你就不会被不确定的未来，不确定的时间投入感到恐惧。就会心生退意。\n所以作者就提出了\n>不要过早退出循环\n\n因为即使是设计了进度条，在遇到困难时，大部分的人依然会想到退出、逃避。我们在尝试新事物的时候，会遇到各种各样的困难，不同的人会在碰壁不同的次数之后退出。\n>用程序员喜欢的话就是，我们都在for循环，区别在于你是什么情况下break；有的人退出阙值高，这是能坚持的一类人；有的人退出阙值低，一遇到困难就退出了。\n\n最喜欢这种用程序比喻了，高度贴切。就好比笑点有高有低，坚持阙值也有高有低，下次要放弃之前，先问问自己“难道你是容易放弃的人吗？”。\n>过早退出是一切失败的根源\n\n## 靠专业技能的成功最具有可复制性\n如果说世界上有一种成功可以复制，那也只有靠专业技能的成功可以称得上这种成功了。因为它只需要的只是你在一个领域坚持不懈地专注下去，只需要选择一个不算不太靠谱的方向，然后专心致志得专下去，最后必然能成为高手或者绝顶高手。世界上有很多成功带有偶然因素和运气成分或出身环境，但至少这一样，被无数人复制了无数遍，否则就不会存在学校和教育了。\n\n## 为什么你应该（从现在开始）写博客\n因为写博客有很多好处，却没有任何明显的坏处。\n* 能够交到很多志同道合的朋友\n* 写博客就是对你思考结果、学习结果的再次整理\n 自从开始开通博客之后，每次都会将学习过程记录成博客。每次在写博客的过程中，为了能让自己可以表达更清楚明了，又会趋使我去深入了解。\n* 教是最好的学；\n>为了让一个不明白的人做到明白，你必须要知道从明白到不明白他究竟需要掌握哪些概念，这就迫使我们对我们大脑中的整个知识体系来个寻根究底，把大脑中的那些我们知道，但不知道自己知道的潜在概念或假设都挖出来，把它们从内隐记忆拉扯到外显记忆中。因为只有完全知道，并知道自己知道一切来龙去脉的人，才能真正把一件事情讲得通通透透。\n* 激励你去持续学习和思考\n刚开始可能觉得没有什么内容可以写，这个时候，为了更新博客，我会去逼迫自己为了写而写。看完一本书，会逼迫自己写点读书笔记（就好比这篇文章）；学完一个知识后，我会逼迫自己将学习过程、总结记录下来。写的过程，又促使我进行了二次思考和学习。\n* 学会持之以恒的做一件事情\n如果有什么是我希望坚持做下去的话，那么写博客将会是我的第一选择。\n* 一个长期的价值博客是一份很好的简历。\n作为程序员，拥有自己的网站或者博客，你已经比大多数人进步了。如果能长期坚持写下去，那更是超越了全国90%的用户了（数字纯属杜撰）。一个好的博客就应该如同朋友圈，新朋友通过朋友圈可以大致了解你；博客则是一个让别人了解自己的窗口。（这里的简历指广义上的简历：别人了解自己的窗口）\n\n## 什么才是你不可替代性和核心竞争力\n物依稀为贵，这条最基本经济学铁律已是深入人心。人才在社会上的本质就是一种商品，而商品的稀缺性决定着商品的价值。稀缺性，换种说法就是不可替代性。不可替代性越强，价格就会越高。\n那么如何构筑自己的个人知识体系，提高自己的稀缺性呢？\n作者通过观察得出一个观点：\n>个人的核心竞争力是他独特的个性、知识、经验组合。如果这种组合\n1、绝无仅有\n2、在实践中有价值\n3、具有可持续发展性\n那你就具有核心竞争力。\n\n作者认为以下的知识技能组合是具有相当程度的不可替代性：\n>1、专业技能：成为一个专业领域的专家，你的专业技能越强，在这个领域的不可替代性就越高。\n2、跨领域的技能：解决问题的能力，创新思维，判断与决策能力，Critical-Thinking(批判性思维)，表达沟通能力，Open Mind等。\n3、学习能力：严格来说学习能力也属于跨领域的技能，但由于实在太重要，并且跨任何领域，所以独立出来。如果培养学习能力，就是持续学习和思考新知识\n4、性格要素：专注、持之以恒、自省（意识到自己的问题所在的能力，这是改进自身的大前提）、好奇心、自信、谦卑等等\n\n不管所处哪个行业，上面所说的四个技能都是适用的。作为程序员，专业技能这点是毋庸置疑的。但也千万别忘了培养后面三种技能。专业技能决定了你能走多远，而后面的技能却决定着你能飞多高。\n\n## 精彩摘录\n>1、兴趣遍地都是，专注和持之以恒才是真正稀缺的。\n2、人与人的差距不在资质上，而在花在思考的时间与思考的深度上\n3、靠专业技能的成功是最具有可复制性的\n4、大学期间，最不缺的就是业余时间，最缺的就是专注精神，非凡的注意力造就非凡的专家\n\n参考资料\n来源： http://baike.baidu.com/subview/3147362/11243902.htm#viewPageContent","slug":"essays/darktime-reading-note","published":1,"updated":"2016-05-06T15:05:41.508Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgm30028tstz25apaeds"},{"title":"《如何培养技术洞见力》-读后感","date":"2016-04-19T15:22:59.000Z","_content":"\n# 前言\n前几天从开发者头条看到了《如何培养技术洞见力》这篇文章，文中提到了为什么同样是看了一篇文章，听完一场演讲或者是看完一本书，普通人只是会觉得“哇哦，好厉害，好有道理”。然而那些所谓的大神却能从这些信息中获取到最有用的信息，而不只是赞叹。为什么会产生这种区别呢？作者认为最本质的原因在于：他们能够基于信息做有效的深度思考，而这种深度思考能力最直接的体现就是“洞见力”。所谓“洞见力”就是指一个人对某件事物的认知程度和ta自己的“分析结论”，是个人主观的看法和评价。洞见力的不同决定了一个人的思想深度。事实证明，一个人如果没有自己具备独立的深度思考能力，就很难有自己的洞见甚至创造。\n___\n# 那么这种洞见力该如何培养呢？\n作者提出了几个观点：\n* 主动提出问题（又分为如何能主动提出问题和提出有深度的问题）\n* 系统思考\n* 深度阅读培养洞见\n\n以我现在的阅历，我能主动吸收的是“主动提出问题”这个建议。文中说到大部分精彩的演讲和文章都有一个共同点：“自问自答”。不管是演讲或者文章，它们都是在提出问题，并对其进行回答，表达自己的思想观点，这是一种典型的问题求解释式的思维模式。作者以《当谈论Feature Team时我们在谈论什么》这篇文章为例，通过思维导图的形式说明了整篇文章其实就是在回答Feature Team的各种问题。还有《学习的逻辑学》这篇文章也是如此。\n![](http://7xr6yj.com1.z0.glb.clouddn.com/aritcle-review-insight-1.png)\n![](http://7xr6yj.com1.z0.glb.clouddn.com/aritcle-review-insight-2.png)\n\n___\n所以大家发现了没有。自问自答是一种非常好的学习方式。根据**目标管理的SMART原则**，建立一个目标需要具体的、可度量的、可实现的、现实性、有时限这五个原则。通过**主动提出问题**这种学习方式正好解决了具体的，可度量这两个原则。因为主动提问不仅为你的学习订下了学习目标（我要把这些问题都搞明白，解决），而且还将你的学习过程分解为一个个具体的，可衡量的小问题。\n突然明白了以前上学时做阅读时的一个技巧，先看问题再去看文章，带着问题看文章。只可惜这般醒悟来得有点晚，但不迟，从现在开始行动还来得及。\n所以我要开始尝试用这种“主动提问”的方法去学习任何东西。对于任何学习目标，都可以尝试从以下三个类型去提出问题：\n \n* What类型\n* How类型\n* Why类型\n\n现学现卖，我通过这种主动提问的方法，来学习JavaScript的call和apply。下面是我提出的问题\n![](http://7xr6yj.com1.z0.glb.clouddn.com/aritcle-review-insight-3.png)\n\n\n有了这些问题，就可以增强学习的目标性，也可以在你学习完成后，衡量对这些知识的掌握程度。\n \n## 文章地址\n>《如何培养技术洞见力？》http://insights.thoughtworkers.org/insight/\n ","source":"_posts/essays/article-review-insight.md","raw":"---\ntitle: 《如何培养技术洞见力》-读后感\ndate: 2016-04-19 23:22:59\ntags:\n- 随笔\n- 读后感\n- 读书笔记\n---\n\n# 前言\n前几天从开发者头条看到了《如何培养技术洞见力》这篇文章，文中提到了为什么同样是看了一篇文章，听完一场演讲或者是看完一本书，普通人只是会觉得“哇哦，好厉害，好有道理”。然而那些所谓的大神却能从这些信息中获取到最有用的信息，而不只是赞叹。为什么会产生这种区别呢？作者认为最本质的原因在于：他们能够基于信息做有效的深度思考，而这种深度思考能力最直接的体现就是“洞见力”。所谓“洞见力”就是指一个人对某件事物的认知程度和ta自己的“分析结论”，是个人主观的看法和评价。洞见力的不同决定了一个人的思想深度。事实证明，一个人如果没有自己具备独立的深度思考能力，就很难有自己的洞见甚至创造。\n___\n# 那么这种洞见力该如何培养呢？\n作者提出了几个观点：\n* 主动提出问题（又分为如何能主动提出问题和提出有深度的问题）\n* 系统思考\n* 深度阅读培养洞见\n\n以我现在的阅历，我能主动吸收的是“主动提出问题”这个建议。文中说到大部分精彩的演讲和文章都有一个共同点：“自问自答”。不管是演讲或者文章，它们都是在提出问题，并对其进行回答，表达自己的思想观点，这是一种典型的问题求解释式的思维模式。作者以《当谈论Feature Team时我们在谈论什么》这篇文章为例，通过思维导图的形式说明了整篇文章其实就是在回答Feature Team的各种问题。还有《学习的逻辑学》这篇文章也是如此。\n![](http://7xr6yj.com1.z0.glb.clouddn.com/aritcle-review-insight-1.png)\n![](http://7xr6yj.com1.z0.glb.clouddn.com/aritcle-review-insight-2.png)\n\n___\n所以大家发现了没有。自问自答是一种非常好的学习方式。根据**目标管理的SMART原则**，建立一个目标需要具体的、可度量的、可实现的、现实性、有时限这五个原则。通过**主动提出问题**这种学习方式正好解决了具体的，可度量这两个原则。因为主动提问不仅为你的学习订下了学习目标（我要把这些问题都搞明白，解决），而且还将你的学习过程分解为一个个具体的，可衡量的小问题。\n突然明白了以前上学时做阅读时的一个技巧，先看问题再去看文章，带着问题看文章。只可惜这般醒悟来得有点晚，但不迟，从现在开始行动还来得及。\n所以我要开始尝试用这种“主动提问”的方法去学习任何东西。对于任何学习目标，都可以尝试从以下三个类型去提出问题：\n \n* What类型\n* How类型\n* Why类型\n\n现学现卖，我通过这种主动提问的方法，来学习JavaScript的call和apply。下面是我提出的问题\n![](http://7xr6yj.com1.z0.glb.clouddn.com/aritcle-review-insight-3.png)\n\n\n有了这些问题，就可以增强学习的目标性，也可以在你学习完成后，衡量对这些知识的掌握程度。\n \n## 文章地址\n>《如何培养技术洞见力？》http://insights.thoughtworkers.org/insight/\n ","slug":"essays/article-review-insight","published":1,"updated":"2016-05-06T15:06:49.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgm9002ctstzbny8ltr4"},{"title":"基于AngularJS的markdown编辑器","date":"2016-04-14T16:08:41.000Z","_content":"由于这段时间已经是变成了markdown重度使用者了，因此就想着自己折腾一个markdown编辑器，发布在github pages上面。这样就可以实现了一个在线markdown编辑器。\n# 技术栈\n* AngularJS：这个就不用过多介绍了；\n* marked.js（https://github.com/chjj/marked）： 将markdown代码编译成HTML的插件；\n* highlight.js：代码高亮插件\n# 实现的目标\n* 在线编辑markdown，实时生成预览\n* 实现语法高亮显示（未完成）\n* 实现黑色主题（未完成）\n* 实现下载markdown文件和HTML文件（未完成）\n* gulp构建网站发布到git-pages\n# 实现原理\n编译markdown代码，我选择`marked.js`， 当然你也可以选择其他插件，也是一样能将markdown代码编译成HTML。\n由于AngularJS双向绑定的机制，因此可以非常方便得实现了实时生成预览。话不多说，用代码来讲解整个过程。\n## 界面实现\n参照现有的在线markdown编辑器，大多数采用的都是左右分栏的布局，左边是编辑器，右边是预览区。因此我也采用了这样的布局模式。\n![](http://7xr6yj.com1.z0.glb.clouddn.com/angular-markdown-1.png)\n此外，还需要对右边预览区添加必要的CSS样式，比如`h1`~`h6`元素样式的定义、代码样式`pre`  `code`的定义等。\n```css\nh1, h2, h3, h4, h5, h6 {\n    font-family: 'Old Standard TT', serif;\n    font-weight: bold;\n    border-bottom: 1px solid #eee;\n}\n \nh3 {\n    border-bottom: 1px solid #ddd;\n}\npre {\n    white-space: pre-wrap; /* css-3 */\n    white-space: -moz-pre-wrap; /* Mozilla, since 1999 */\n    white-space: -pre-wrap; /* Opera 4-6 */\n    white-space: -o-pre-wrap; /* Opera 7 */\n    word-wrap: break-word; /* Internet Explorer 5.5+ */\n    background-color: #f8f8f8;\n    border: 1px solid #dfdfdf;\n    margin-top: 1.5em;\n    margin-bottom: 1.5em;\n    padding: 0.125rem 0.3125rem 0.0625rem;\n}\n \npre code {\n    background-color: transparent;\n    border: 0;\n    padding: 0;\n}\n```\n## markdown实时预览\n给左边的`textarea`绑定一个`ng-model`，这样就可以实时获取到输入的值，并且可以实时显示在右边的预览区。如下面代码：\n```html\n<div ng-controller=\"EditorController as vm\">\n    <h3 class=\"title\">基于angular的markdown编辑器</h3>\n    <div class=\"container\" >\n    <textarea id=\"editor\" ng-model=\"vm.editor\"></textarea>\n        <div id=\"preview\" >{{vm.editor}}</div>\n    </div>\n</div>\n```\n这样就可以实现左边的编辑器和右边的预览区实时同步了。那么接下来我们还需要做的就是将预览区的markdown代码编译成HTML代码。由于需要实时监听左边的输入框，因此我们可以在预览区的变量中添加一个过滤器：\n```html\n<div id=\"preview\" >{{vm.editor  | render}}</div>\n```\n在过滤器`render`中，我们调用`marked.js`将输入的markdown代码转换为html代码。`marked.js`的使用也非常简单，`marked.js`会启用下面的默认配置（所以不需要你再手动配置）\n```javascirpt\nmarked.setOptions({\n  renderer: new marked.Renderer(),\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: true,\n  smartLists: true,\n  smartypants: false\n});\ndocument.getElementById('content').innerHTML =\n      marked('# Marked in browser\\n\\nRendered by **marked**.');  //在浏览器中可以这么使用\n```\n因此我们就可以这么在过滤器中调用`marked.js`的方法，如下面\n```javascirpt\n    .filter('render', [ function () {\n            return function (input) {\n                if (input.length != 0) {\n                    input = marked(input);\n                }\n                return input;\n            }\n        }])\n```\n那么到这里是不是就可以将markdown代码编译成HTML代码了呢？当然不是的。会出现下面的这种情况，显示出HTML代码：\n![](http://7xr6yj.com1.z0.glb.clouddn.com/angular.gif)\n由于`marked`方法返回的是HTML代码，而在AngularJS中，出于安全考虑，会转义发现的任何HTML内容以阻止HTML注入攻击。因此如果要正常显示的话，需要对HTML进行处理。这样采用AngularJS自带的`$sce`服务：\n```javascript\n    .filter('render', ['$sce', function ($sce) {    //依赖注入$sce\n            return function (input) {\n                if (input.length != 0) {\n                    input = marked(input);\n                }\n                return $sce.trustAsHtml(input);    //返回值用trustAsHtml()处理\n            }\n        }])\n```\n同时，HTML中也需要更改：\n```html\n<div id=\"preview\" ng-bind-html=\"vm.editor | render\"></div>    //使用指令ng-bind-html来绑定变量\n```\n到这里，一个markdown编辑器就打造完成了。来看看效果吧！\n![](http://7xr6yj.com1.z0.glb.clouddn.com/angular-markdown.gif)\n也可以点击[在线演示](http://superman66.github.io/angular-markdown/app/#/editor)，查看效果。\n项目github地址：https://github.com/superman66/angular-markdown\n# 总结：\n实现起来比较简单，主要是利用了` marked.js`插件。\n## 待优化\n* 还需要添加代码高亮的优化\n* 支持以`md`格式和`html`格保存文件到本地\n\n","source":"_posts/angular/angular-markdown.md","raw":"---\ntitle: 基于AngularJS的markdown编辑器\ndate: 2016-04-15 00:08:41\ntags:\n- AngularJS\n- markdown\n---\n由于这段时间已经是变成了markdown重度使用者了，因此就想着自己折腾一个markdown编辑器，发布在github pages上面。这样就可以实现了一个在线markdown编辑器。\n# 技术栈\n* AngularJS：这个就不用过多介绍了；\n* marked.js（https://github.com/chjj/marked）： 将markdown代码编译成HTML的插件；\n* highlight.js：代码高亮插件\n# 实现的目标\n* 在线编辑markdown，实时生成预览\n* 实现语法高亮显示（未完成）\n* 实现黑色主题（未完成）\n* 实现下载markdown文件和HTML文件（未完成）\n* gulp构建网站发布到git-pages\n# 实现原理\n编译markdown代码，我选择`marked.js`， 当然你也可以选择其他插件，也是一样能将markdown代码编译成HTML。\n由于AngularJS双向绑定的机制，因此可以非常方便得实现了实时生成预览。话不多说，用代码来讲解整个过程。\n## 界面实现\n参照现有的在线markdown编辑器，大多数采用的都是左右分栏的布局，左边是编辑器，右边是预览区。因此我也采用了这样的布局模式。\n![](http://7xr6yj.com1.z0.glb.clouddn.com/angular-markdown-1.png)\n此外，还需要对右边预览区添加必要的CSS样式，比如`h1`~`h6`元素样式的定义、代码样式`pre`  `code`的定义等。\n```css\nh1, h2, h3, h4, h5, h6 {\n    font-family: 'Old Standard TT', serif;\n    font-weight: bold;\n    border-bottom: 1px solid #eee;\n}\n \nh3 {\n    border-bottom: 1px solid #ddd;\n}\npre {\n    white-space: pre-wrap; /* css-3 */\n    white-space: -moz-pre-wrap; /* Mozilla, since 1999 */\n    white-space: -pre-wrap; /* Opera 4-6 */\n    white-space: -o-pre-wrap; /* Opera 7 */\n    word-wrap: break-word; /* Internet Explorer 5.5+ */\n    background-color: #f8f8f8;\n    border: 1px solid #dfdfdf;\n    margin-top: 1.5em;\n    margin-bottom: 1.5em;\n    padding: 0.125rem 0.3125rem 0.0625rem;\n}\n \npre code {\n    background-color: transparent;\n    border: 0;\n    padding: 0;\n}\n```\n## markdown实时预览\n给左边的`textarea`绑定一个`ng-model`，这样就可以实时获取到输入的值，并且可以实时显示在右边的预览区。如下面代码：\n```html\n<div ng-controller=\"EditorController as vm\">\n    <h3 class=\"title\">基于angular的markdown编辑器</h3>\n    <div class=\"container\" >\n    <textarea id=\"editor\" ng-model=\"vm.editor\"></textarea>\n        <div id=\"preview\" >{{vm.editor}}</div>\n    </div>\n</div>\n```\n这样就可以实现左边的编辑器和右边的预览区实时同步了。那么接下来我们还需要做的就是将预览区的markdown代码编译成HTML代码。由于需要实时监听左边的输入框，因此我们可以在预览区的变量中添加一个过滤器：\n```html\n<div id=\"preview\" >{{vm.editor  | render}}</div>\n```\n在过滤器`render`中，我们调用`marked.js`将输入的markdown代码转换为html代码。`marked.js`的使用也非常简单，`marked.js`会启用下面的默认配置（所以不需要你再手动配置）\n```javascirpt\nmarked.setOptions({\n  renderer: new marked.Renderer(),\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: true,\n  smartLists: true,\n  smartypants: false\n});\ndocument.getElementById('content').innerHTML =\n      marked('# Marked in browser\\n\\nRendered by **marked**.');  //在浏览器中可以这么使用\n```\n因此我们就可以这么在过滤器中调用`marked.js`的方法，如下面\n```javascirpt\n    .filter('render', [ function () {\n            return function (input) {\n                if (input.length != 0) {\n                    input = marked(input);\n                }\n                return input;\n            }\n        }])\n```\n那么到这里是不是就可以将markdown代码编译成HTML代码了呢？当然不是的。会出现下面的这种情况，显示出HTML代码：\n![](http://7xr6yj.com1.z0.glb.clouddn.com/angular.gif)\n由于`marked`方法返回的是HTML代码，而在AngularJS中，出于安全考虑，会转义发现的任何HTML内容以阻止HTML注入攻击。因此如果要正常显示的话，需要对HTML进行处理。这样采用AngularJS自带的`$sce`服务：\n```javascript\n    .filter('render', ['$sce', function ($sce) {    //依赖注入$sce\n            return function (input) {\n                if (input.length != 0) {\n                    input = marked(input);\n                }\n                return $sce.trustAsHtml(input);    //返回值用trustAsHtml()处理\n            }\n        }])\n```\n同时，HTML中也需要更改：\n```html\n<div id=\"preview\" ng-bind-html=\"vm.editor | render\"></div>    //使用指令ng-bind-html来绑定变量\n```\n到这里，一个markdown编辑器就打造完成了。来看看效果吧！\n![](http://7xr6yj.com1.z0.glb.clouddn.com/angular-markdown.gif)\n也可以点击[在线演示](http://superman66.github.io/angular-markdown/app/#/editor)，查看效果。\n项目github地址：https://github.com/superman66/angular-markdown\n# 总结：\n实现起来比较简单，主要是利用了` marked.js`插件。\n## 待优化\n* 还需要添加代码高亮的优化\n* 支持以`md`格式和`html`格保存文件到本地\n\n","slug":"angular/angular-markdown","published":1,"updated":"2016-05-06T15:07:16.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgmg002htstzowfd4r3e"},{"title":"基于localStorage和AngularJS的markdown简易笔记本","date":"2016-05-04T14:36:21.000Z","_content":"在之前markdown编辑器的基础上，再演化成一个基于localStorage的markdown简易笔记本。\n上一篇基于AngularJS打造的markdown笔记本[点击这里查看](http://superman66.github.io/2016/04/15/angular/angular-markdown/)\n先来看效果图：\n![angular](/images/angular-markdown-note.gif)\n# 已完成功能列表\n* 添加和删除分类\n* 添加和删除笔记本\n* 笔记本编辑与保存\n* 支持全屏编辑\n* 笔记本可以添加多个标签、删除标签\n# 功能待完善列表\n* 支持分类和笔记本的右键菜单（菜单包括：重命名、删除、添加）\n* 支持多级分类\n*  支持移动端布局\n\n# 知识点记录\n## CSS布局\n##### 1、左边两列固定宽度，右边一列宽度自适应。如下图所示\n![angular](/images/angluar-markdown-note-1.png)\n代码如下：\n```html    \n    <style>\n        *{\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t\tbox-sizing: border-box;\n\t}\n\t.sub{\n\t\tfloat: left;\n\t\twidth: 200px;\n\t\tbackground: #eee;\n\t\tborder: 1px solid #ddd;\n\t\theight: 200px;\n\t}\n\t.extra{\n\t\tfloat: left;\n\t\twidth: 300px;\n\t\tbackground: #eee;\n\t\tborder: 1px solid #ddd;\t\n\t\theight: 200px;\n\t}\n\t.main{\n\t\twidth: 100%;\n\t\theight: 200px;\n\t\tpadding-left: 500px;\n\t\tbackground: #eee;\n\t\tborder: 1px solid #ddd;\t\n\t}\n    </style>\n\n\t\t<div class=\"sub\">sub</div>\n\t\t<div class=\"extra\">extra</div>\n\t\t<div class=\"main\">main</div>\n```\n左边两列通过float属性使其固定在左边。最右边一列设置padding值为左边两列的宽度和，同时设置宽度为100%。这样就可以实现了左边两列固定宽度，右边一列宽度自适应。\n##### 2、左右两列固定，中间一列自适应，如下图所示\n![angular](/images/angluar-markdown-note-2.png)\n代码如下：\n```html    \n    <style>\n\t*{\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t\tbox-sizing: border-box;\n\t}\n\t.sub{\n\t\tfloat: left;\n\t\twidth: 200px;\n\t\tbackground: #eee;\n\t\tborder: 1px solid #ddd;\n\t\theight: 200px;\n\t}\n\t.extra{\n\t\tfloat: right;\n\t\twidth: 300px;\n\t\tbackground: #444;\n\t\tborder: 1px solid #ddd;\t\n\t\theight: 200px;\n\t}\n\t.main{\n\t\twidth: 100%;\n\t\theight: 200px;\n\t\tbackground: #888;\n\t\tborder: 1px solid #ddd;\t\n\t}\n    </style>\n\n\t\t<div class=\"sub\">sub</div>\n\t\t<div class=\"extra\">extra</div>\n\t\t<div class=\"main\">main</div>\n```\n第二种布局html部分并没有改变，只对CSS进行了改变。去掉`.main`的padding-left属性值，`.extra`的float属性值由left改为right。\n##### 3、左边一列自适应，右边两列固定宽度。如下图所示\n![angular](/images/angluar-markdown-note-3.png)\n代码如下：\n```html    \n    <style>\n        *{\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t\tbox-sizing: border-box;\n\t}\n\t.sub{\n\t\tfloat: right;\n\t\twidth: 200px;\n\t\tbackground: #eee;\n\t\tborder: 1px solid #ddd;\n\t\theight: 200px;\n\t}\n\t.extra{\n\t\tfloat: right;\n\t\twidth: 300px;\n\t\tbackground: #eee;\n\t\tborder: 1px solid #ddd;\t\n\t\theight: 200px;\n\t}\n\t.main{\n\t\twidth: 100%;\n\t\theight: 200px;\n\t\tpadding-right: 500px;\n\t\tbackground: #eee;\n\t\tborder: 1px solid #ddd;\t\n\t}\n    </style>\n\n\t\t<div class=\"sub\">sub</div>\n\t\t<div class=\"extra\">extra</div>\n\t\t<div class=\"main\">main</div>\n```\n这种布局与第一种布局类似，HTML结构依然保持不变，只不过是`.sub`和`,extra`的float属性改为right，`.main`的padding值改为`padding-right:500px`\n## 基于localStorage存储数据\n由于没有接入数据库，因此采用的是localStorage本地存储。localStorage是基于key-value的JSON格式进行存储，类似于NoSql数据库。为了模拟后台的增删改查API，写了一个data-Service来封装增删改查的方法。\n在写Service的过程中，思维一直受到之前关系型数据库的影响，总是想采用关系型数据库那套增删改查的方法来实现。对比一下，有几个差异点：\n* 自增长id\n    之前在使用MySQL数据库的时候，每条记录会有一个自增长id的，而且这个自增长id是不可逆的，删除了这条记录后，这个id也不会被回收。后续再添加的记录的id是在之前id的基础上递增的。而在localStorage中，则没有自增长id的机制。因此必须模拟实现自增长id。实现机制：每次要添加数据的时候，先去遍历该列表，获取该列表的长度length。如果length不等于的话，则id=length+1。如果length=0，id=1；\n* 读取数据\n    基于JSON的存储，在存储列表数据时一般采用数组，而数组里面再包含一个个对象来存储数据。如果需要根据id来获取相对应对象所在的值，就需要通过先通过查找该id在整个数组中的索引值，再通过这个索引值去得到该对象。\n```javascript\n  {\n    \"id\": 4,    //标识该条记录的唯一id\n    \"name\": \"4\",\n    \"noteList\": [\n      {\n        \"id\": 1,\n        \"title\": \"4-1\",\n        \"createTime\": \"2016-04-26 22:52:59\",\n        \"updateTime\": \"2016-04-26 22:52:59\"\n      },\n      {\n        \"id\": 2,\n        \"title\": \"4-2\",\n        \"createTime\": \"2016-04-26 22:54:09\",\n        \"updateTime\": \"2016-04-26 22:54:09\"\n      }\n    ]\n  }\n```\n* 删除数据\n    删除数据则是采用了数组的方法splice。因为使用splice()删除数据，数组会根据需要减小它们的索引值，并自动减少数组的长度，可以避免产生稀疏数组。\n    \n## ECMAScript5的数组方法\n在操作localStorage数据的过程中，使用到了ECMAScript5的一些方法，比如forEach()，filter()等。之前也是没有接触过。具体关于JavaScript数组将会在另外一篇文章中详细说明。\n* forEach()\n* map()\n* filter()\n* every()和some()\n* reduce()和reduceRight()\n* indexOf()和lastIndexOf()\n\n项目地址：http://superman66.github.io/angular-markdown/app/index.html#/index\n","source":"_posts/angular/angular-markdown-note.md","raw":"---\ntitle: 基于localStorage和AngularJS的markdown简易笔记本\ndate: 2016-05-04 22:36:21\ntags:\n- AngularJS\n- markdown\n---\n在之前markdown编辑器的基础上，再演化成一个基于localStorage的markdown简易笔记本。\n上一篇基于AngularJS打造的markdown笔记本[点击这里查看](http://superman66.github.io/2016/04/15/angular/angular-markdown/)\n先来看效果图：\n![angular](/images/angular-markdown-note.gif)\n# 已完成功能列表\n* 添加和删除分类\n* 添加和删除笔记本\n* 笔记本编辑与保存\n* 支持全屏编辑\n* 笔记本可以添加多个标签、删除标签\n# 功能待完善列表\n* 支持分类和笔记本的右键菜单（菜单包括：重命名、删除、添加）\n* 支持多级分类\n*  支持移动端布局\n\n# 知识点记录\n## CSS布局\n##### 1、左边两列固定宽度，右边一列宽度自适应。如下图所示\n![angular](/images/angluar-markdown-note-1.png)\n代码如下：\n```html    \n    <style>\n        *{\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t\tbox-sizing: border-box;\n\t}\n\t.sub{\n\t\tfloat: left;\n\t\twidth: 200px;\n\t\tbackground: #eee;\n\t\tborder: 1px solid #ddd;\n\t\theight: 200px;\n\t}\n\t.extra{\n\t\tfloat: left;\n\t\twidth: 300px;\n\t\tbackground: #eee;\n\t\tborder: 1px solid #ddd;\t\n\t\theight: 200px;\n\t}\n\t.main{\n\t\twidth: 100%;\n\t\theight: 200px;\n\t\tpadding-left: 500px;\n\t\tbackground: #eee;\n\t\tborder: 1px solid #ddd;\t\n\t}\n    </style>\n\n\t\t<div class=\"sub\">sub</div>\n\t\t<div class=\"extra\">extra</div>\n\t\t<div class=\"main\">main</div>\n```\n左边两列通过float属性使其固定在左边。最右边一列设置padding值为左边两列的宽度和，同时设置宽度为100%。这样就可以实现了左边两列固定宽度，右边一列宽度自适应。\n##### 2、左右两列固定，中间一列自适应，如下图所示\n![angular](/images/angluar-markdown-note-2.png)\n代码如下：\n```html    \n    <style>\n\t*{\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t\tbox-sizing: border-box;\n\t}\n\t.sub{\n\t\tfloat: left;\n\t\twidth: 200px;\n\t\tbackground: #eee;\n\t\tborder: 1px solid #ddd;\n\t\theight: 200px;\n\t}\n\t.extra{\n\t\tfloat: right;\n\t\twidth: 300px;\n\t\tbackground: #444;\n\t\tborder: 1px solid #ddd;\t\n\t\theight: 200px;\n\t}\n\t.main{\n\t\twidth: 100%;\n\t\theight: 200px;\n\t\tbackground: #888;\n\t\tborder: 1px solid #ddd;\t\n\t}\n    </style>\n\n\t\t<div class=\"sub\">sub</div>\n\t\t<div class=\"extra\">extra</div>\n\t\t<div class=\"main\">main</div>\n```\n第二种布局html部分并没有改变，只对CSS进行了改变。去掉`.main`的padding-left属性值，`.extra`的float属性值由left改为right。\n##### 3、左边一列自适应，右边两列固定宽度。如下图所示\n![angular](/images/angluar-markdown-note-3.png)\n代码如下：\n```html    \n    <style>\n        *{\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t\tbox-sizing: border-box;\n\t}\n\t.sub{\n\t\tfloat: right;\n\t\twidth: 200px;\n\t\tbackground: #eee;\n\t\tborder: 1px solid #ddd;\n\t\theight: 200px;\n\t}\n\t.extra{\n\t\tfloat: right;\n\t\twidth: 300px;\n\t\tbackground: #eee;\n\t\tborder: 1px solid #ddd;\t\n\t\theight: 200px;\n\t}\n\t.main{\n\t\twidth: 100%;\n\t\theight: 200px;\n\t\tpadding-right: 500px;\n\t\tbackground: #eee;\n\t\tborder: 1px solid #ddd;\t\n\t}\n    </style>\n\n\t\t<div class=\"sub\">sub</div>\n\t\t<div class=\"extra\">extra</div>\n\t\t<div class=\"main\">main</div>\n```\n这种布局与第一种布局类似，HTML结构依然保持不变，只不过是`.sub`和`,extra`的float属性改为right，`.main`的padding值改为`padding-right:500px`\n## 基于localStorage存储数据\n由于没有接入数据库，因此采用的是localStorage本地存储。localStorage是基于key-value的JSON格式进行存储，类似于NoSql数据库。为了模拟后台的增删改查API，写了一个data-Service来封装增删改查的方法。\n在写Service的过程中，思维一直受到之前关系型数据库的影响，总是想采用关系型数据库那套增删改查的方法来实现。对比一下，有几个差异点：\n* 自增长id\n    之前在使用MySQL数据库的时候，每条记录会有一个自增长id的，而且这个自增长id是不可逆的，删除了这条记录后，这个id也不会被回收。后续再添加的记录的id是在之前id的基础上递增的。而在localStorage中，则没有自增长id的机制。因此必须模拟实现自增长id。实现机制：每次要添加数据的时候，先去遍历该列表，获取该列表的长度length。如果length不等于的话，则id=length+1。如果length=0，id=1；\n* 读取数据\n    基于JSON的存储，在存储列表数据时一般采用数组，而数组里面再包含一个个对象来存储数据。如果需要根据id来获取相对应对象所在的值，就需要通过先通过查找该id在整个数组中的索引值，再通过这个索引值去得到该对象。\n```javascript\n  {\n    \"id\": 4,    //标识该条记录的唯一id\n    \"name\": \"4\",\n    \"noteList\": [\n      {\n        \"id\": 1,\n        \"title\": \"4-1\",\n        \"createTime\": \"2016-04-26 22:52:59\",\n        \"updateTime\": \"2016-04-26 22:52:59\"\n      },\n      {\n        \"id\": 2,\n        \"title\": \"4-2\",\n        \"createTime\": \"2016-04-26 22:54:09\",\n        \"updateTime\": \"2016-04-26 22:54:09\"\n      }\n    ]\n  }\n```\n* 删除数据\n    删除数据则是采用了数组的方法splice。因为使用splice()删除数据，数组会根据需要减小它们的索引值，并自动减少数组的长度，可以避免产生稀疏数组。\n    \n## ECMAScript5的数组方法\n在操作localStorage数据的过程中，使用到了ECMAScript5的一些方法，比如forEach()，filter()等。之前也是没有接触过。具体关于JavaScript数组将会在另外一篇文章中详细说明。\n* forEach()\n* map()\n* filter()\n* every()和some()\n* reduce()和reduceRight()\n* indexOf()和lastIndexOf()\n\n项目地址：http://superman66.github.io/angular-markdown/app/index.html#/index\n","slug":"angular/angular-markdown-note","published":1,"updated":"2016-05-06T14:58:40.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgmo002ltstzkwmtvxok"},{"title":"AngularJS动态加载模块和依赖","date":"2016-02-24T14:23:54.000Z","_content":"由于AngularJS是单页面应用框架，在正常的情况下，会在访问页面的时候将所有的CSS、JavaScript文件都加载进来。文件不多的时候，页面启动速度倒不会影响太多。但是一旦文件数太多或者加载的第三方库比较大的时候，就会影响页面启动速度。因此对于应用规模大、文件数比较多或者加载的第三方库比较大的时候，采用动态加载JS或者动态加载模块会极大提升页面的启动速度。本文将介绍如何利用ocLazyLoad实现动态加载。\n<!-- more -->\nAngularJS动态加载依赖第三方库：[ocLazyLoad](https://oclazyload.readme.io/docs)。ocLazyLoad是一个第三方库，支持AngularJS动态加载`module`、`service`、`directive`以及静态文件。\n### 安装ocLazyLoad\n可通过npm或者bower进行安装\n```bash\nnpm install oclazyload\nbower install oclazyload\n```\n### 将`ocLazyLoad` module 添加到你的应用中\n```javascript\nangular.module('myApp',['oc.lazyLoad']);\n```\n### 配置 `ocLazyLoad`\n你可以在 `config`函数中配置 `$ocLazyLoadProvider`,配置文件如下\n```bash\n.config(['$ocLazyLoadProvider', function($ocLazyLoadProvider){\n    $ocLazyLoadProvider.config({\n        debug: true,\n        events: true,\n        modules: [\n            {\n                name: 'TestModule',\n                files: ['test.js']\n            }\n        ]\n    })\n}])\n```\n* debug: 用来开启debug模式。布尔值，默认是false。当开启debug模式时，$ocLazyLoad会打印出所有的错误到console控制台上。\n* events：当你动态加载了module的时候，$ocLazyLoad会广播相应的事件。布尔值，默认为false。\n* modules：用于定义你需要动态加载的模块。定义每个模块的名字需要唯一。\nmodules必须要用**数组**的形式，其中files也必须以**数组**的形式存在，哪怕只需要加载一个文件\n\n### 在路由当中加载module\n```bash\n    .config(['$routeProvider', function($routeProvider) {\n        $routeProvider.otherwise('/index');\n        $routeProvider.when('/index', {\n            templateUrl: 'index.html',\n            controller: 'IndexController',\n            resolve: { //  resolve 里的属性如果返回的是 promise对象，那么resolve将会在view加载之前执行\n                loadMyCtrl: ['$ocLazyLoad', function($ocLazyLoad) {\n                    // 在这里可以延迟加载任何文件或者刚才预定义的modules\n                    return $ocLazyLoad.load('TestModule'); //加载刚才定义的TestModule\n                    /*return $ocLazyLoad.load([   // 如果要加载多个module，需要写成数组的形式\n                        'TestModule',\n                        'MainModule'\n                        ]);*/\n                }]\n            }\n        })\n    }])\n```\nresolve设置的属性可以被注入到Controller当中。如果resolve返回的是promise对象的话，那么它们将在控制器加载以及$routeChangeSuccess被触发之前执行。\n**$ocLazyLoad就是利用这个原理hack，进行动态加载**。\n`resolve`的值可以是：\n* key，the value of key 是会被注入到Controller的依赖的名字；\n* factory，即可以是一个service的名字，也可以是一个返回值，它是会被注入到控制器中的函\n数或可以被resolve的promise对象。\n\n通过这样的配置，就可以实现了AngularJS动态加载模块和依赖。但是$ocLazyLoad提供的功能更加丰富，不止动态加载模块和依赖，还能动态加载service，diretive等。更多的功能，可以访问[$ocLazyLoad官网](https://oclazyload.readme.io)\n","source":"_posts/angular/angular-lazyload.md","raw":"---\ntitle: AngularJS动态加载模块和依赖\ndate: 2016-02-24 22:23:54\ntags: \n- AngularJS\n- 动态加载\n---\n由于AngularJS是单页面应用框架，在正常的情况下，会在访问页面的时候将所有的CSS、JavaScript文件都加载进来。文件不多的时候，页面启动速度倒不会影响太多。但是一旦文件数太多或者加载的第三方库比较大的时候，就会影响页面启动速度。因此对于应用规模大、文件数比较多或者加载的第三方库比较大的时候，采用动态加载JS或者动态加载模块会极大提升页面的启动速度。本文将介绍如何利用ocLazyLoad实现动态加载。\n<!-- more -->\nAngularJS动态加载依赖第三方库：[ocLazyLoad](https://oclazyload.readme.io/docs)。ocLazyLoad是一个第三方库，支持AngularJS动态加载`module`、`service`、`directive`以及静态文件。\n### 安装ocLazyLoad\n可通过npm或者bower进行安装\n```bash\nnpm install oclazyload\nbower install oclazyload\n```\n### 将`ocLazyLoad` module 添加到你的应用中\n```javascript\nangular.module('myApp',['oc.lazyLoad']);\n```\n### 配置 `ocLazyLoad`\n你可以在 `config`函数中配置 `$ocLazyLoadProvider`,配置文件如下\n```bash\n.config(['$ocLazyLoadProvider', function($ocLazyLoadProvider){\n    $ocLazyLoadProvider.config({\n        debug: true,\n        events: true,\n        modules: [\n            {\n                name: 'TestModule',\n                files: ['test.js']\n            }\n        ]\n    })\n}])\n```\n* debug: 用来开启debug模式。布尔值，默认是false。当开启debug模式时，$ocLazyLoad会打印出所有的错误到console控制台上。\n* events：当你动态加载了module的时候，$ocLazyLoad会广播相应的事件。布尔值，默认为false。\n* modules：用于定义你需要动态加载的模块。定义每个模块的名字需要唯一。\nmodules必须要用**数组**的形式，其中files也必须以**数组**的形式存在，哪怕只需要加载一个文件\n\n### 在路由当中加载module\n```bash\n    .config(['$routeProvider', function($routeProvider) {\n        $routeProvider.otherwise('/index');\n        $routeProvider.when('/index', {\n            templateUrl: 'index.html',\n            controller: 'IndexController',\n            resolve: { //  resolve 里的属性如果返回的是 promise对象，那么resolve将会在view加载之前执行\n                loadMyCtrl: ['$ocLazyLoad', function($ocLazyLoad) {\n                    // 在这里可以延迟加载任何文件或者刚才预定义的modules\n                    return $ocLazyLoad.load('TestModule'); //加载刚才定义的TestModule\n                    /*return $ocLazyLoad.load([   // 如果要加载多个module，需要写成数组的形式\n                        'TestModule',\n                        'MainModule'\n                        ]);*/\n                }]\n            }\n        })\n    }])\n```\nresolve设置的属性可以被注入到Controller当中。如果resolve返回的是promise对象的话，那么它们将在控制器加载以及$routeChangeSuccess被触发之前执行。\n**$ocLazyLoad就是利用这个原理hack，进行动态加载**。\n`resolve`的值可以是：\n* key，the value of key 是会被注入到Controller的依赖的名字；\n* factory，即可以是一个service的名字，也可以是一个返回值，它是会被注入到控制器中的函\n数或可以被resolve的promise对象。\n\n通过这样的配置，就可以实现了AngularJS动态加载模块和依赖。但是$ocLazyLoad提供的功能更加丰富，不止动态加载模块和依赖，还能动态加载service，diretive等。更多的功能，可以访问[$ocLazyLoad官网](https://oclazyload.readme.io)\n","slug":"angular/angular-lazyload","published":1,"updated":"2016-02-24T14:47:59.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciomyqgms002otstzj8p6088a"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciomyqgil0000tstzxiyyat9x","tag_id":"ciomyqgiu0001tstzn00jgof2","_id":"ciomyqgix0002tstzyz93oq6f"},{"post_id":"ciomyqgj90005tstz1v3ogyjp","tag_id":"ciomyqgjb0006tstzy0746lu8","_id":"ciomyqgjc0008tstzrb6n14qy"},{"post_id":"ciomyqgj90005tstz1v3ogyjp","tag_id":"ciomyqgjc0007tstz2v6cbwbq","_id":"ciomyqgjc0009tstzy43a9di7"},{"post_id":"ciomyqgje000atstze16gwq2y","tag_id":"ciomyqgjg000btstzl9kitblq","_id":"ciomyqgjg000ctstzkspo44i4"},{"post_id":"ciomyqgji000dtstz0654bfgn","tag_id":"ciomyqgjk000etstz2b2zukzi","_id":"ciomyqgjl000ftstztnv67y5f"},{"post_id":"ciomyqgji000dtstz0654bfgn","tag_id":"ciomyqgjb0006tstzy0746lu8","_id":"ciomyqgjl000gtstz5kjaqipe"},{"post_id":"ciomyqgjn000htstztdnj89yv","tag_id":"ciomyqgjb0006tstzy0746lu8","_id":"ciomyqgjo000itstzea8p6fst"},{"post_id":"ciomyqgjr000jtstzqrh2p617","tag_id":"ciomyqgjt000ktstzx1a0e3c3","_id":"ciomyqgju000mtstzfzy5ptg4"},{"post_id":"ciomyqgjr000jtstzqrh2p617","tag_id":"ciomyqgjt000ltstz2sf2vdfi","_id":"ciomyqgju000ntstzkm86ulau"},{"post_id":"ciomyqgjw000otstzd60ihkyu","tag_id":"ciomyqgjy000ptstzqjmxu6he","_id":"ciomyqgjz000rtstz7an433fp"},{"post_id":"ciomyqgjw000otstzd60ihkyu","tag_id":"ciomyqgjy000qtstzckjvzftj","_id":"ciomyqgjz000ststzc1615wa7"},{"post_id":"ciomyqgk3000ttstz6q0pwww9","tag_id":"ciomyqgjy000ptstzqjmxu6he","_id":"ciomyqgk5000utstz6ahdvnxt"},{"post_id":"ciomyqgk3000ttstz6q0pwww9","tag_id":"ciomyqgjy000qtstzckjvzftj","_id":"ciomyqgk6000vtstztze1mdph"},{"post_id":"ciomyqgk7000wtstz04zii0cr","tag_id":"ciomyqgjy000qtstzckjvzftj","_id":"ciomyqgkb000ztstz1endt22b"},{"post_id":"ciomyqgk7000wtstz04zii0cr","tag_id":"ciomyqgka000xtstzoepzwymq","_id":"ciomyqgkb0010tstztirui5mq"},{"post_id":"ciomyqgk7000wtstz04zii0cr","tag_id":"ciomyqgka000ytstziq2turr4","_id":"ciomyqgkb0011tstzcwo7je20"},{"post_id":"ciomyqgkf0012tstzf0mt9nyj","tag_id":"ciomyqgjy000qtstzckjvzftj","_id":"ciomyqgkh0014tstzdon2f6gh"},{"post_id":"ciomyqgkf0012tstzf0mt9nyj","tag_id":"ciomyqgka000xtstzoepzwymq","_id":"ciomyqgki0015tstzdts325rk"},{"post_id":"ciomyqgkf0012tstzf0mt9nyj","tag_id":"ciomyqgkh0013tstzs35i10r5","_id":"ciomyqgki0016tstzv0pbjfvx"},{"post_id":"ciomyqgkk0017tstzv6nc7g49","tag_id":"ciomyqgjy000qtstzckjvzftj","_id":"ciomyqgkl0018tstz9dqghjnz"},{"post_id":"ciomyqgkn0019tstztqdf26xp","tag_id":"ciomyqgjy000qtstzckjvzftj","_id":"ciomyqgkp001atstz7qp584zq"},{"post_id":"ciomyqgkq001btstz6dtq6nkp","tag_id":"ciomyqgjy000ptstzqjmxu6he","_id":"ciomyqgks001ctstzsxh3172r"},{"post_id":"ciomyqgkq001btstz6dtq6nkp","tag_id":"ciomyqgjy000qtstzckjvzftj","_id":"ciomyqgkt001dtstzf92blqqt"},{"post_id":"ciomyqgku001etstzhc70xcsj","tag_id":"ciomyqgkw001ftstzg61zqr4q","_id":"ciomyqgkx001gtstz3h1qrghg"},{"post_id":"ciomyqgkz001htstzp4sel9i4","tag_id":"ciomyqgl1001itstznm7h81cj","_id":"ciomyqgl2001jtstzeh92kg85"},{"post_id":"ciomyqgl3001ktstzei9boz8b","tag_id":"ciomyqgl1001itstznm7h81cj","_id":"ciomyqgl6001ltstz6mlvgqok"},{"post_id":"ciomyqgl8001mtstzhgdkxrdd","tag_id":"ciomyqgl1001itstznm7h81cj","_id":"ciomyqgla001ntstz7krixkk3"},{"post_id":"ciomyqglc001otstzhtn1o3ak","tag_id":"ciomyqgl1001itstznm7h81cj","_id":"ciomyqgle001ptstzwaptwhmt"},{"post_id":"ciomyqglg001qtstzzay3ocjq","tag_id":"ciomyqglh001rtstzs9dx2s2e","_id":"ciomyqgli001ttstzt8vrypos"},{"post_id":"ciomyqglg001qtstzzay3ocjq","tag_id":"ciomyqgli001ststzawe7vegb","_id":"ciomyqglj001utstzwgvajlz2"},{"post_id":"ciomyqglk001vtstzm2hsxm93","tag_id":"ciomyqglm001wtstzznyefp9t","_id":"ciomyqglm001xtstz6qt2zs0r"},{"post_id":"ciomyqglo001ytstzwkgpmgns","tag_id":"ciomyqglq001ztstzah51wp3z","_id":"ciomyqglr0020tstz2ze74nxq"},{"post_id":"ciomyqglo001ytstzwkgpmgns","tag_id":"ciomyqglm001wtstzznyefp9t","_id":"ciomyqglr0021tstzb2mttn0a"},{"post_id":"ciomyqglu0022tstz8p9ic6qv","tag_id":"ciomyqglm001wtstzznyefp9t","_id":"ciomyqglw0023tstzsezrubcn"},{"post_id":"ciomyqgly0024tstz1ifxmj7s","tag_id":"ciomyqglm001wtstzznyefp9t","_id":"ciomyqgm10026tstzev9trimh"},{"post_id":"ciomyqgly0024tstz1ifxmj7s","tag_id":"ciomyqgm00025tstzjkjiq8gy","_id":"ciomyqgm10027tstzhx2xhr3e"},{"post_id":"ciomyqgm30028tstz25apaeds","tag_id":"ciomyqglm001wtstzznyefp9t","_id":"ciomyqgm7002atstzbp6a5qt8"},{"post_id":"ciomyqgm30028tstz25apaeds","tag_id":"ciomyqgm60029tstz8iuy1xwb","_id":"ciomyqgm7002btstz92u8vvlg"},{"post_id":"ciomyqgm9002ctstzbny8ltr4","tag_id":"ciomyqglm001wtstzznyefp9t","_id":"ciomyqgme002etstzicbkkkh7"},{"post_id":"ciomyqgm9002ctstzbny8ltr4","tag_id":"ciomyqgmd002dtstz9sbzms6y","_id":"ciomyqgmf002ftstzkyttc0e8"},{"post_id":"ciomyqgm9002ctstzbny8ltr4","tag_id":"ciomyqgm60029tstz8iuy1xwb","_id":"ciomyqgmf002gtstzkjtvgdyt"},{"post_id":"ciomyqgmg002htstzowfd4r3e","tag_id":"ciomyqgiu0001tstzn00jgof2","_id":"ciomyqgmm002jtstzliv44wq6"},{"post_id":"ciomyqgmg002htstzowfd4r3e","tag_id":"ciomyqgml002itstz7v7pyztm","_id":"ciomyqgmm002ktstzlmm1wiqy"},{"post_id":"ciomyqgmo002ltstzkwmtvxok","tag_id":"ciomyqgiu0001tstzn00jgof2","_id":"ciomyqgmq002mtstzkrg4iz5w"},{"post_id":"ciomyqgmo002ltstzkwmtvxok","tag_id":"ciomyqgml002itstz7v7pyztm","_id":"ciomyqgmr002ntstzbc1zvyp5"},{"post_id":"ciomyqgms002otstzj8p6088a","tag_id":"ciomyqgiu0001tstzn00jgof2","_id":"ciomyqgmv002qtstzbx0249ia"},{"post_id":"ciomyqgms002otstzj8p6088a","tag_id":"ciomyqgmu002ptstzlfi33mum","_id":"ciomyqgmv002rtstzjheuug0t"}],"Tag":[{"name":"AngularJS","_id":"ciomyqgiu0001tstzn00jgof2"},{"name":"移动端","_id":"ciomyqgjb0006tstzy0746lu8"},{"name":"rem布局","_id":"ciomyqgjc0007tstz2v6cbwbq"},{"name":"nodejs","_id":"ciomyqgjg000btstzl9kitblq"},{"name":"微信","_id":"ciomyqgjk000etstz2b2zukzi"},{"name":"Javascript","_id":"ciomyqgjt000ktstzx1a0e3c3"},{"name":"Javascript学习笔记","_id":"ciomyqgjt000ltstz2sf2vdfi"},{"name":"JavaScript","_id":"ciomyqgjy000ptstzqjmxu6he"},{"name":"JavaScript学习笔记","_id":"ciomyqgjy000qtstzckjvzftj"},{"name":"面向对象","_id":"ciomyqgka000xtstzoepzwymq"},{"name":"对象","_id":"ciomyqgka000ytstziq2turr4"},{"name":"继承","_id":"ciomyqgkh0013tstzs35i10r5"},{"name":"面试总结","_id":"ciomyqgkw001ftstzg61zqr4q"},{"name":"Hexo","_id":"ciomyqgl1001itstznm7h81cj"},{"name":"Git","_id":"ciomyqglh001rtstzs9dx2s2e"},{"name":"Git规范","_id":"ciomyqgli001ststzawe7vegb"},{"name":"随笔","_id":"ciomyqglm001wtstzznyefp9t"},{"name":"阅读书单","_id":"ciomyqglq001ztstzah51wp3z"},{"name":"机械键盘","_id":"ciomyqgm00025tstzjkjiq8gy"},{"name":"读书笔记","_id":"ciomyqgm60029tstz8iuy1xwb"},{"name":"读后感","_id":"ciomyqgmd002dtstz9sbzms6y"},{"name":"markdown","_id":"ciomyqgml002itstz7v7pyztm"},{"name":"动态加载","_id":"ciomyqgmu002ptstzlfi33mum"}]}}